
Tuya_Dimmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008204  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a8  080083a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080083a8  080083a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083a8  080083a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080083b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000070  08008420  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08008420  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111b5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d2  00000000  00000000  0003124e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00033b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f4  00000000  00000000  00035c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014867  00000000  00000000  0004e354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e77f  00000000  00000000  00062bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f133a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048bc  00000000  00000000  000f138c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080082fc 	.word	0x080082fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080082fc 	.word	0x080082fc

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_ADC1_Init+0x74>)
 800098a:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <MX_ADC1_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_ADC1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_ADC1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_ADC1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_ADC1_Init+0x74>)
 80009a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_ADC1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_ADC1_Init+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_ADC1_Init+0x74>)
 80009b6:	f003 f9ef 	bl	8003d98 <HAL_ADC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009c0:	f002 fce8 	bl	8003394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_ADC1_Init+0x74>)
 80009d6:	f003 fca3 	bl	8004320 <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009e0:	f002 fcd8 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	40012400 	.word	0x40012400

080009f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <HAL_ADC_MspInit+0x98>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d137      	bne.n	8000a84 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_ADC_MspInit+0x9c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <HAL_ADC_MspInit+0xa0>)
 8000a6c:	f003 ffaa 	bl	80049c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a70:	23fe      	movs	r3, #254	; 0xfe
 8000a72:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a74:	2303      	movs	r3, #3
 8000a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <HAL_ADC_MspInit+0xa4>)
 8000a80:	f003 ffa0 	bl	80049c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40012400 	.word	0x40012400
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40010800 	.word	0x40010800

08000a9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0318 	add.w	r3, r7, #24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab0:	4b74      	ldr	r3, [pc, #464]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a73      	ldr	r2, [pc, #460]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b71      	ldr	r3, [pc, #452]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b6e      	ldr	r3, [pc, #440]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a6d      	ldr	r2, [pc, #436]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b6b      	ldr	r3, [pc, #428]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b68      	ldr	r3, [pc, #416]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a67      	ldr	r2, [pc, #412]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b65      	ldr	r3, [pc, #404]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a61      	ldr	r2, [pc, #388]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b5f      	ldr	r3, [pc, #380]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b10:	4b5c      	ldr	r3, [pc, #368]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a5b      	ldr	r2, [pc, #364]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <MX_GPIO_Init+0x1e8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY2_Pin|RELAY3_Pin|RELAY4_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2170      	movs	r1, #112	; 0x70
 8000b2c:	4856      	ldr	r0, [pc, #344]	; (8000c88 <MX_GPIO_Init+0x1ec>)
 8000b2e:	f004 f8e4 	bl	8004cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY6_Pin|RELAY5_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2130      	movs	r1, #48	; 0x30
 8000b36:	4855      	ldr	r0, [pc, #340]	; (8000c8c <MX_GPIO_Init+0x1f0>)
 8000b38:	f004 f8df 	bl	8004cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY1_Pin|RELAY0_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2103      	movs	r1, #3
 8000b40:	4853      	ldr	r0, [pc, #332]	; (8000c90 <MX_GPIO_Init+0x1f4>)
 8000b42:	f004 f8da 	bl	8004cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4c:	4851      	ldr	r0, [pc, #324]	; (8000c94 <MX_GPIO_Init+0x1f8>)
 8000b4e:	f004 f8d4 	bl	8004cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2101      	movs	r1, #1
 8000b56:	4850      	ldr	r0, [pc, #320]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b58:	f004 f8cf 	bl	8004cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RELAY2_Pin|RELAY3_Pin|RELAY4_Pin;
 8000b5c:	2370      	movs	r3, #112	; 0x70
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4845      	ldr	r0, [pc, #276]	; (8000c88 <MX_GPIO_Init+0x1ec>)
 8000b74:	f003 ff26 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_Pin;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7c:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <MX_GPIO_Init+0x200>)
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4842      	ldr	r0, [pc, #264]	; (8000c94 <MX_GPIO_Init+0x1f8>)
 8000b8c:	f003 ff1a 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY6_Pin|RELAY5_Pin;
 8000b90:	2330      	movs	r3, #48	; 0x30
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4839      	ldr	r0, [pc, #228]	; (8000c8c <MX_GPIO_Init+0x1f0>)
 8000ba8:	f003 ff0c 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY1_Pin|RELAY0_Pin;
 8000bac:	2303      	movs	r3, #3
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4833      	ldr	r0, [pc, #204]	; (8000c90 <MX_GPIO_Init+0x1f4>)
 8000bc4:	f003 fefe 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH9_Pin;
 8000bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH9_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	482a      	ldr	r0, [pc, #168]	; (8000c88 <MX_GPIO_Init+0x1ec>)
 8000bde:	f003 fef1 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = TOUCH0_Pin|TOUCH10_Pin;
 8000be2:	f240 4301 	movw	r3, #1025	; 0x401
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bec:	2302      	movs	r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4824      	ldr	r0, [pc, #144]	; (8000c88 <MX_GPIO_Init+0x1ec>)
 8000bf8:	f003 fee4 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH2_Pin|TOUCH4_Pin|TOUCH1_Pin|TOUCH3_Pin;
 8000bfc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c06:	2302      	movs	r3, #2
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <MX_GPIO_Init+0x1f4>)
 8000c12:	f003 fed7 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TOUCH5_Pin|DIMMER_DOWN_Pin|DIMMER_UP_Pin|TOUCH6_Pin;
 8000c16:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c20:	2302      	movs	r3, #2
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481b      	ldr	r0, [pc, #108]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000c2c:	f003 feca 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIMMER_Pin;
 8000c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIMMER_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x1f8>)
 8000c4a:	f003 febb 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0318 	add.w	r3, r7, #24
 8000c62:	4619      	mov	r1, r3
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000c66:	f003 fead 	bl	80049c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	2006      	movs	r0, #6
 8000c70:	f003 fdc1 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c74:	2006      	movs	r0, #6
 8000c76:	f003 fdda 	bl	800482e <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40011800 	.word	0x40011800
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40010800 	.word	0x40010800
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	10210000 	.word	0x10210000

08000ca0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000ca6:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <MX_I2C1_Init+0x54>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_I2C1_Init+0x58>)
 8000cae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cde:	f004 f83d 	bl	8004d5c <HAL_I2C_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce8:	f002 fb54 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200000bc 	.word	0x200000bc
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	000186a0 	.word	0x000186a0

08000cfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <HAL_I2C_MspInit+0x70>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d123      	bne.n	8000d64 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_I2C_MspInit+0x74>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_I2C_MspInit+0x74>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_I2C_MspInit+0x74>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d34:	23c0      	movs	r3, #192	; 0xc0
 8000d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4619      	mov	r1, r3
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_I2C_MspInit+0x78>)
 8000d48:	f003 fe3c 	bl	80049c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0x74>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_I2C_MspInit+0x74>)
 8000d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d56:	61d3      	str	r3, [r2, #28]
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_I2C_MspInit+0x74>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f002 ff85 	bl	8003c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f8b1 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f7ff fe89 	bl	8000a9c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d8a:	f002 fb83 	bl	8003494 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d8e:	f002 fc91 	bl	80036b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d92:	f002 fd25 	bl	80037e0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d96:	f002 fec7 	bl	8003b28 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d9a:	f002 fc3f 	bl	800361c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d9e:	f7ff ff7f 	bl	8000ca0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000da2:	f7ff fde9 	bl	8000978 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // PWM start for Switch Status indication LEDs

  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                      //LED0
 8000da6:	2100      	movs	r1, #0
 8000da8:	4844      	ldr	r0, [pc, #272]	; (8000ebc <main+0x144>)
 8000daa:	f005 fe8f 	bl	8006acc <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);                      //LED1
 8000dae:	210c      	movs	r1, #12
 8000db0:	4842      	ldr	r0, [pc, #264]	; (8000ebc <main+0x144>)
 8000db2:	f005 fe8b 	bl	8006acc <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);						 //LED2
 8000db6:	210c      	movs	r1, #12
 8000db8:	4841      	ldr	r0, [pc, #260]	; (8000ec0 <main+0x148>)
 8000dba:	f005 fe87 	bl	8006acc <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);                      //LED3
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	483e      	ldr	r0, [pc, #248]	; (8000ebc <main+0x144>)
 8000dc2:	f005 fe83 	bl	8006acc <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);						 //LED4
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	483d      	ldr	r0, [pc, #244]	; (8000ec0 <main+0x148>)
 8000dca:	f005 fe7f 	bl	8006acc <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);                      //LED5
 8000dce:	2104      	movs	r1, #4
 8000dd0:	483a      	ldr	r0, [pc, #232]	; (8000ebc <main+0x144>)
 8000dd2:	f005 fe7b 	bl	8006acc <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);					     //LED6
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4839      	ldr	r0, [pc, #228]	; (8000ec0 <main+0x148>)
 8000dda:	f005 fe77 	bl	8006acc <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                      //DIMMER_UP
 8000dde:	2100      	movs	r1, #0
 8000de0:	4837      	ldr	r0, [pc, #220]	; (8000ec0 <main+0x148>)
 8000de2:	f005 fe73 	bl	8006acc <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);                      //DIMMER_DOWN
 8000de6:	2100      	movs	r1, #0
 8000de8:	4836      	ldr	r0, [pc, #216]	; (8000ec4 <main+0x14c>)
 8000dea:	f005 fe6f 	bl	8006acc <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);                      //indication_LED
 8000dee:	2104      	movs	r1, #4
 8000df0:	4834      	ldr	r0, [pc, #208]	; (8000ec4 <main+0x14c>)
 8000df2:	f005 fe6b 	bl	8006acc <HAL_TIM_PWM_Start>

      //INITIAL STATE PWM ON WITH MINIMUM POWER ALL SWITCH

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);          //LED0
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <main+0x150>)
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <main+0x144>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);          //LED1
 8000e00:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <main+0x150>)
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <main+0x144>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);          //LED2
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <main+0x150>)
 8000e0c:	781a      	ldrb	r2, [r3, #0]
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <main+0x148>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);          //LED3
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <main+0x150>)
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <main+0x144>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);          //LED4
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <main+0x150>)
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <main+0x148>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);          //LED5
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <main+0x150>)
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <main+0x144>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MIN_PWM);          //LED6
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <main+0x150>)
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <main+0x148>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,ZERO_PWM);          //DIMMER_UP
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <main+0x154>)
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <main+0x148>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,ZERO_PWM);          //DIMMER_DOWN
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <main+0x154>)
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <main+0x14c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Z_PWM);            //indication
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <main+0x14c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38

        EEPROM_initial();
 8000e58:	f002 f9d4 	bl	8003204 <EEPROM_initial>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	       HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	491c      	ldr	r1, [pc, #112]	; (8000ed0 <main+0x158>)
 8000e60:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <main+0x15c>)
 8000e62:	f006 fdc7 	bl	80079f4 <HAL_UART_Receive_IT>
	  	   Touch_Read();
 8000e66:	f000 ff39 	bl	8001cdc <Touch_Read>
	  	   Uart_Read_data();
 8000e6a:	f001 fd53 	bl	8002914 <Uart_Read_data>
	  	   Rx_Data_evaluation();
 8000e6e:	f001 fde1 	bl	8002a34 <Rx_Data_evaluation>
	  	   Indication();
 8000e72:	f001 ff05 	bl	8002c80 <Indication>
	  	   Adc_read();
 8000e76:	f000 f887 	bl	8000f88 <Adc_read>
	  	   if( Tuya_flag == 1)
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <main+0x160>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d1ec      	bne.n	8000e5c <main+0xe4>
	  	   {
	  		   uint32_t Now = HAL_GetTick();
 8000e82:	f002 ff5b 	bl	8003d3c <HAL_GetTick>
 8000e86:	6078      	str	r0, [r7, #4]
	  		   if(Tuya_Heart_Flag == 1)
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <main+0x164>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d103      	bne.n	8000e98 <main+0x120>
	  		   {
	  			   Tuya_Heart_Flag = 0;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <main+0x164>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e7e1      	b.n	8000e5c <main+0xe4>
	  		   }
	  		   else
	  		   {
	  			   if((Now - Tuya_Start_Time) > 45000)
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <main+0x168>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d9d9      	bls.n	8000e5c <main+0xe4>
	  			   {
	  				   Tuya_Start_Time = Now;
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <main+0x168>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
	  				   Tuya_Reset_Flag = 1;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <main+0x16c>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
	  				   Tuya_Reset();
 8000eb4:	f000 fef6 	bl	8001ca4 <Tuya_Reset>
	       HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 8000eb8:	e7d0      	b.n	8000e5c <main+0xe4>
 8000eba:	bf00      	nop
 8000ebc:	200003b4 	.word	0x200003b4
 8000ec0:	200003fc 	.word	0x200003fc
 8000ec4:	20000324 	.word	0x20000324
 8000ec8:	20000001 	.word	0x20000001
 8000ecc:	2000029f 	.word	0x2000029f
 8000ed0:	20000289 	.word	0x20000289
 8000ed4:	20000444 	.word	0x20000444
 8000ed8:	2000029c 	.word	0x2000029c
 8000edc:	20000294 	.word	0x20000294
 8000ee0:	20000298 	.word	0x20000298
 8000ee4:	20000295 	.word	0x20000295

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	; 0x50
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef2:	2228      	movs	r2, #40	; 0x28
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f007 f9f8 	bl	80082ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f20:	2310      	movs	r3, #16
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 ff15 	bl	8005d5c <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000f38:	f002 fa2c 	bl	8003394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 f982 	bl	8006260 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f62:	f002 fa17 	bl	8003394 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f66:	2302      	movs	r3, #2
 8000f68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 fb0d 	bl	8006590 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f7c:	f002 fa0a 	bl	8003394 <Error_Handler>
  }
}
 8000f80:	bf00      	nop
 8000f82:	3750      	adds	r7, #80	; 0x50
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <Adc_read>:

/* USER CODE BEGIN 4 */
///////////STM32RESTART//////////////
void Adc_read()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0
      uint16_t Adc_read = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	857b      	strh	r3, [r7, #42]	; 0x2a

/***********************************************************************************************************************/
      //S1
	  Adc_read = read_adc(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fc72 	bl	800187c <read_adc>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	857b      	strh	r3, [r7, #42]	; 0x2a
	  ADC_Tempvalue[0] += Adc_read;
 8000f9c:	4b92      	ldr	r3, [pc, #584]	; (80011e8 <Adc_read+0x260>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a90      	ldr	r2, [pc, #576]	; (80011e8 <Adc_read+0x260>)
 8000fa6:	6013      	str	r3, [r2, #0]
	  if(Touch_Flag[0] == 2)
 8000fa8:	4b90      	ldr	r3, [pc, #576]	; (80011ec <Adc_read+0x264>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d120      	bne.n	8000ff2 <Adc_read+0x6a>
	  {
		 Adc_read = read_adc(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fc63 	bl	800187c <read_adc>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	857b      	strh	r3, [r7, #42]	; 0x2a
		 if(Adc_read >= adc0_init)             					  // CHECKING WITH INITIAL VALUE IF INITIAL VALUE IS GREATER THAN PRESENT VALUE
 8000fba:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <Adc_read+0x268>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d308      	bcc.n	8000fd6 <Adc_read+0x4e>
		 {
		     ADCValue1_0 = Adc_read - adc0_init + ADCValue1_0;
 8000fc4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000fc6:	4b8a      	ldr	r3, [pc, #552]	; (80011f0 <Adc_read+0x268>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1ad2      	subs	r2, r2, r3
 8000fcc:	4b89      	ldr	r3, [pc, #548]	; (80011f4 <Adc_read+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a88      	ldr	r2, [pc, #544]	; (80011f4 <Adc_read+0x26c>)
 8000fd4:	6013      	str	r3, [r2, #0]
		 }

		 if(Adc_read < adc0_init)
 8000fd6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000fd8:	4b85      	ldr	r3, [pc, #532]	; (80011f0 <Adc_read+0x268>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d208      	bcs.n	8000ff2 <Adc_read+0x6a>
		 {
			 ADCValue1_0 = adc0_init - Adc_read + ADCValue1_0;
 8000fe0:	4b83      	ldr	r3, [pc, #524]	; (80011f0 <Adc_read+0x268>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000fe6:	1ad2      	subs	r2, r2, r3
 8000fe8:	4b82      	ldr	r3, [pc, #520]	; (80011f4 <Adc_read+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a81      	ldr	r2, [pc, #516]	; (80011f4 <Adc_read+0x26c>)
 8000ff0:	6013      	str	r3, [r2, #0]
		 }
	  }
/***********************************************************************************************************************/
	  //S2
	  Adc_read = read_adc(2);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f000 fc42 	bl	800187c <read_adc>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	857b      	strh	r3, [r7, #42]	; 0x2a
	  ADC_Tempvalue[1] += Adc_read;
 8000ffc:	4b7a      	ldr	r3, [pc, #488]	; (80011e8 <Adc_read+0x260>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001002:	4413      	add	r3, r2
 8001004:	4a78      	ldr	r2, [pc, #480]	; (80011e8 <Adc_read+0x260>)
 8001006:	6053      	str	r3, [r2, #4]
	  if(Touch_Flag[1] == 2)
 8001008:	4b78      	ldr	r3, [pc, #480]	; (80011ec <Adc_read+0x264>)
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d120      	bne.n	8001052 <Adc_read+0xca>
	  {
	 	  Adc_read = read_adc(2);
 8001010:	2002      	movs	r0, #2
 8001012:	f000 fc33 	bl	800187c <read_adc>
 8001016:	4603      	mov	r3, r0
 8001018:	857b      	strh	r3, [r7, #42]	; 0x2a
		  if(Adc_read >= adc1_init)             				     // CHECKING WITH INITIAL VALUE IF INITIAL VALUE IS GREATER THAN PRESENT VALUE
 800101a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800101c:	4b76      	ldr	r3, [pc, #472]	; (80011f8 <Adc_read+0x270>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d308      	bcc.n	8001036 <Adc_read+0xae>
		  {
			  ADCValue1_1 = Adc_read - adc1_init + ADCValue1_1;
 8001024:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001026:	4b74      	ldr	r3, [pc, #464]	; (80011f8 <Adc_read+0x270>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1ad2      	subs	r2, r2, r3
 800102c:	4b73      	ldr	r3, [pc, #460]	; (80011fc <Adc_read+0x274>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4413      	add	r3, r2
 8001032:	4a72      	ldr	r2, [pc, #456]	; (80011fc <Adc_read+0x274>)
 8001034:	6013      	str	r3, [r2, #0]
		  }

		  if(Adc_read < adc1_init)
 8001036:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001038:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <Adc_read+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d208      	bcs.n	8001052 <Adc_read+0xca>
		  {
			  ADCValue1_1 = adc1_init - Adc_read + ADCValue1_1;
 8001040:	4b6d      	ldr	r3, [pc, #436]	; (80011f8 <Adc_read+0x270>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001046:	1ad2      	subs	r2, r2, r3
 8001048:	4b6c      	ldr	r3, [pc, #432]	; (80011fc <Adc_read+0x274>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4413      	add	r3, r2
 800104e:	4a6b      	ldr	r2, [pc, #428]	; (80011fc <Adc_read+0x274>)
 8001050:	6013      	str	r3, [r2, #0]
		  }
	   }
/***********************************************************************************************************************/
	 //S3
	 Adc_read = read_adc(3);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 fc12 	bl	800187c <read_adc>
 8001058:	4603      	mov	r3, r0
 800105a:	857b      	strh	r3, [r7, #42]	; 0x2a
	 ADC_Tempvalue[2] += Adc_read;
 800105c:	4b62      	ldr	r3, [pc, #392]	; (80011e8 <Adc_read+0x260>)
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001062:	4413      	add	r3, r2
 8001064:	4a60      	ldr	r2, [pc, #384]	; (80011e8 <Adc_read+0x260>)
 8001066:	6093      	str	r3, [r2, #8]
	 if(Touch_Flag[2] == 2)
 8001068:	4b60      	ldr	r3, [pc, #384]	; (80011ec <Adc_read+0x264>)
 800106a:	789b      	ldrb	r3, [r3, #2]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d120      	bne.n	80010b2 <Adc_read+0x12a>
	 {
		 Adc_read = read_adc(3);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 fc03 	bl	800187c <read_adc>
 8001076:	4603      	mov	r3, r0
 8001078:	857b      	strh	r3, [r7, #42]	; 0x2a
		 if(Adc_read >= adc2_init)             					 // CHECKING WITH INITIAL VALUE IF INITIAL VALUE IS GREATER THAN PRESENT VALUE
 800107a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800107c:	4b60      	ldr	r3, [pc, #384]	; (8001200 <Adc_read+0x278>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d308      	bcc.n	8001096 <Adc_read+0x10e>
		 {
			 ADCValue1_2 =Adc_read - adc2_init + ADCValue1_2;
 8001084:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001086:	4b5e      	ldr	r3, [pc, #376]	; (8001200 <Adc_read+0x278>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1ad2      	subs	r2, r2, r3
 800108c:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <Adc_read+0x27c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a5c      	ldr	r2, [pc, #368]	; (8001204 <Adc_read+0x27c>)
 8001094:	6013      	str	r3, [r2, #0]
		 }

		 if(Adc_read < adc2_init)
 8001096:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <Adc_read+0x278>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d208      	bcs.n	80010b2 <Adc_read+0x12a>
		 {
			 ADCValue1_2 = adc2_init - Adc_read + ADCValue1_2;
 80010a0:	4b57      	ldr	r3, [pc, #348]	; (8001200 <Adc_read+0x278>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010a6:	1ad2      	subs	r2, r2, r3
 80010a8:	4b56      	ldr	r3, [pc, #344]	; (8001204 <Adc_read+0x27c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a55      	ldr	r2, [pc, #340]	; (8001204 <Adc_read+0x27c>)
 80010b0:	6013      	str	r3, [r2, #0]
		 }
	  }
/***********************************************************************************************************************/
	  //S4
	  Adc_read = read_adc(4);
 80010b2:	2004      	movs	r0, #4
 80010b4:	f000 fbe2 	bl	800187c <read_adc>
 80010b8:	4603      	mov	r3, r0
 80010ba:	857b      	strh	r3, [r7, #42]	; 0x2a
	  ADC_Tempvalue[3] += Adc_read;
 80010bc:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <Adc_read+0x260>)
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010c2:	4413      	add	r3, r2
 80010c4:	4a48      	ldr	r2, [pc, #288]	; (80011e8 <Adc_read+0x260>)
 80010c6:	60d3      	str	r3, [r2, #12]
	  if(Touch_Flag[3] == 2)
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <Adc_read+0x264>)
 80010ca:	78db      	ldrb	r3, [r3, #3]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d120      	bne.n	8001112 <Adc_read+0x18a>
	  {
		  Adc_read = read_adc(4);
 80010d0:	2004      	movs	r0, #4
 80010d2:	f000 fbd3 	bl	800187c <read_adc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	857b      	strh	r3, [r7, #42]	; 0x2a
		  if(Adc_read >= adc3_init)             					  // CHECKING WITH INITIAL VALUE IF INITIAL VALUE IS GREATER THAN PRESENT VALUE
 80010da:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80010dc:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <Adc_read+0x280>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d308      	bcc.n	80010f6 <Adc_read+0x16e>
		  {
			  ADCValue1_3 = Adc_read - adc3_init + ADCValue1_3;
 80010e4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80010e6:	4b48      	ldr	r3, [pc, #288]	; (8001208 <Adc_read+0x280>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <Adc_read+0x284>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a46      	ldr	r2, [pc, #280]	; (800120c <Adc_read+0x284>)
 80010f4:	6013      	str	r3, [r2, #0]
		  }

		  if(Adc_read < adc3_init)
 80010f6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <Adc_read+0x280>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d208      	bcs.n	8001112 <Adc_read+0x18a>
		  {
			  ADCValue1_3 = adc3_init - Adc_read + ADCValue1_3;
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <Adc_read+0x280>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001106:	1ad2      	subs	r2, r2, r3
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <Adc_read+0x284>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	4a3f      	ldr	r2, [pc, #252]	; (800120c <Adc_read+0x284>)
 8001110:	6013      	str	r3, [r2, #0]
		  }
	   }
/***********************************************************************************************************************/
	  //S5
	  Adc_read = read_adc(5);
 8001112:	2005      	movs	r0, #5
 8001114:	f000 fbb2 	bl	800187c <read_adc>
 8001118:	4603      	mov	r3, r0
 800111a:	857b      	strh	r3, [r7, #42]	; 0x2a
	  ADC_Tempvalue[4] += Adc_read;
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <Adc_read+0x260>)
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001122:	4413      	add	r3, r2
 8001124:	4a30      	ldr	r2, [pc, #192]	; (80011e8 <Adc_read+0x260>)
 8001126:	6113      	str	r3, [r2, #16]
	  if(Touch_Flag[4] == 2)
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <Adc_read+0x264>)
 800112a:	791b      	ldrb	r3, [r3, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d120      	bne.n	8001172 <Adc_read+0x1ea>
	  {
		  Adc_read = read_adc(5);
 8001130:	2005      	movs	r0, #5
 8001132:	f000 fba3 	bl	800187c <read_adc>
 8001136:	4603      	mov	r3, r0
 8001138:	857b      	strh	r3, [r7, #42]	; 0x2a
		  if(Adc_read >= adc4_init)             					  // CHECKING WITH INITIAL VALUE IF INITIAL VALUE IS GREATER THAN PRESENT VALUE
 800113a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800113c:	4b34      	ldr	r3, [pc, #208]	; (8001210 <Adc_read+0x288>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d308      	bcc.n	8001156 <Adc_read+0x1ce>
		  {
			  ADCValue1_4 = Adc_read - adc4_init + ADCValue1_4;
 8001144:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <Adc_read+0x288>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad2      	subs	r2, r2, r3
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <Adc_read+0x28c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4413      	add	r3, r2
 8001152:	4a30      	ldr	r2, [pc, #192]	; (8001214 <Adc_read+0x28c>)
 8001154:	6013      	str	r3, [r2, #0]
		  }

		  if(Adc_read < adc4_init)
 8001156:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <Adc_read+0x288>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d208      	bcs.n	8001172 <Adc_read+0x1ea>
		  {
			  ADCValue1_4 = adc4_init - Adc_read + ADCValue1_4;
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <Adc_read+0x288>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001166:	1ad2      	subs	r2, r2, r3
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <Adc_read+0x28c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4413      	add	r3, r2
 800116e:	4a29      	ldr	r2, [pc, #164]	; (8001214 <Adc_read+0x28c>)
 8001170:	6013      	str	r3, [r2, #0]
		  }
	   }
/***********************************************************************************************************************/
	  //S6
	  Adc_read = read_adc(6);
 8001172:	2006      	movs	r0, #6
 8001174:	f000 fb82 	bl	800187c <read_adc>
 8001178:	4603      	mov	r3, r0
 800117a:	857b      	strh	r3, [r7, #42]	; 0x2a
      ADC_Tempvalue[5] += Adc_read;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <Adc_read+0x260>)
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001182:	4413      	add	r3, r2
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <Adc_read+0x260>)
 8001186:	6153      	str	r3, [r2, #20]
	  if(Touch_Flag[5] == 2)
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <Adc_read+0x264>)
 800118a:	795b      	ldrb	r3, [r3, #5]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d120      	bne.n	80011d2 <Adc_read+0x24a>
	  {
	      Adc_read = read_adc(6);
 8001190:	2006      	movs	r0, #6
 8001192:	f000 fb73 	bl	800187c <read_adc>
 8001196:	4603      	mov	r3, r0
 8001198:	857b      	strh	r3, [r7, #42]	; 0x2a
		  if(Adc_read >= adc5_init)             					  // CHECKING WITH INITIAL VALUE IF INITIAL VALUE IS GREATER THAN PRESENT VALUE
 800119a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <Adc_read+0x290>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d308      	bcc.n	80011b6 <Adc_read+0x22e>
		  {
			  ADCValue1_5 = Adc_read - adc5_init + ADCValue1_5;
 80011a4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <Adc_read+0x290>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <Adc_read+0x294>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a1a      	ldr	r2, [pc, #104]	; (800121c <Adc_read+0x294>)
 80011b4:	6013      	str	r3, [r2, #0]
		  }

		  if(Adc_read < adc5_init)
 80011b6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <Adc_read+0x290>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d208      	bcs.n	80011d2 <Adc_read+0x24a>
		  {
			  ADCValue1_5 = adc5_init - Adc_read + ADCValue1_5;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <Adc_read+0x290>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <Adc_read+0x294>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <Adc_read+0x294>)
 80011d0:	6013      	str	r3, [r2, #0]
		  }
	   }
/***********************************************************************************************************************/
	  //S7
	  Adc_read = read_adc(7);
 80011d2:	2007      	movs	r0, #7
 80011d4:	f000 fb52 	bl	800187c <read_adc>
 80011d8:	4603      	mov	r3, r0
 80011da:	857b      	strh	r3, [r7, #42]	; 0x2a
	  ADC_Tempvalue[6] += Adc_read;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <Adc_read+0x260>)
 80011de:	699a      	ldr	r2, [r3, #24]
 80011e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80011e2:	4413      	add	r3, r2
 80011e4:	e01c      	b.n	8001220 <Adc_read+0x298>
 80011e6:	bf00      	nop
 80011e8:	200002e4 	.word	0x200002e4
 80011ec:	20000114 	.word	0x20000114
 80011f0:	200002c4 	.word	0x200002c4
 80011f4:	200002a4 	.word	0x200002a4
 80011f8:	200002c8 	.word	0x200002c8
 80011fc:	200002a8 	.word	0x200002a8
 8001200:	200002cc 	.word	0x200002cc
 8001204:	200002ac 	.word	0x200002ac
 8001208:	200002d0 	.word	0x200002d0
 800120c:	200002b0 	.word	0x200002b0
 8001210:	200002d4 	.word	0x200002d4
 8001214:	200002b4 	.word	0x200002b4
 8001218:	200002d8 	.word	0x200002d8
 800121c:	200002b8 	.word	0x200002b8
 8001220:	4aa9      	ldr	r2, [pc, #676]	; (80014c8 <Adc_read+0x540>)
 8001222:	6193      	str	r3, [r2, #24]
	  if(Touch_Flag[6] == 2)
 8001224:	4ba9      	ldr	r3, [pc, #676]	; (80014cc <Adc_read+0x544>)
 8001226:	799b      	ldrb	r3, [r3, #6]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d120      	bne.n	800126e <Adc_read+0x2e6>
	  {
		  Adc_read = read_adc(7);
 800122c:	2007      	movs	r0, #7
 800122e:	f000 fb25 	bl	800187c <read_adc>
 8001232:	4603      	mov	r3, r0
 8001234:	857b      	strh	r3, [r7, #42]	; 0x2a
		  if(Adc_read >= adc6_init)             					  // CHECKING WITH INITIAL VALUE IF INITIAL VALUE IS GREATER THAN PRESENT VALUE
 8001236:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001238:	4ba5      	ldr	r3, [pc, #660]	; (80014d0 <Adc_read+0x548>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d308      	bcc.n	8001252 <Adc_read+0x2ca>
		  {
			  ADCValue1_6 = Adc_read - adc6_init + ADCValue1_6;
 8001240:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001242:	4ba3      	ldr	r3, [pc, #652]	; (80014d0 <Adc_read+0x548>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	1ad2      	subs	r2, r2, r3
 8001248:	4ba2      	ldr	r3, [pc, #648]	; (80014d4 <Adc_read+0x54c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4413      	add	r3, r2
 800124e:	4aa1      	ldr	r2, [pc, #644]	; (80014d4 <Adc_read+0x54c>)
 8001250:	6013      	str	r3, [r2, #0]
		  }

		  if(Adc_read<adc6_init)
 8001252:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001254:	4b9e      	ldr	r3, [pc, #632]	; (80014d0 <Adc_read+0x548>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d208      	bcs.n	800126e <Adc_read+0x2e6>
		  {
			  ADCValue1_6 = adc6_init - Adc_read + ADCValue1_6;
 800125c:	4b9c      	ldr	r3, [pc, #624]	; (80014d0 <Adc_read+0x548>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001262:	1ad2      	subs	r2, r2, r3
 8001264:	4b9b      	ldr	r3, [pc, #620]	; (80014d4 <Adc_read+0x54c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4413      	add	r3, r2
 800126a:	4a9a      	ldr	r2, [pc, #616]	; (80014d4 <Adc_read+0x54c>)
 800126c:	6013      	str	r3, [r2, #0]
		  }
	   }

/***********************************************************************************************************************/
	  //S8
	  Adc_read = read_adc(8);
 800126e:	2008      	movs	r0, #8
 8001270:	f000 fb04 	bl	800187c <read_adc>
 8001274:	4603      	mov	r3, r0
 8001276:	857b      	strh	r3, [r7, #42]	; 0x2a
	  ADC_Tempvalue[7] += Adc_read;
 8001278:	4b93      	ldr	r3, [pc, #588]	; (80014c8 <Adc_read+0x540>)
 800127a:	69da      	ldr	r2, [r3, #28]
 800127c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800127e:	4413      	add	r3, r2
 8001280:	4a91      	ldr	r2, [pc, #580]	; (80014c8 <Adc_read+0x540>)
 8001282:	61d3      	str	r3, [r2, #28]
	  if(Touch_Flag[7] == 2)
 8001284:	4b91      	ldr	r3, [pc, #580]	; (80014cc <Adc_read+0x544>)
 8001286:	79db      	ldrb	r3, [r3, #7]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d120      	bne.n	80012ce <Adc_read+0x346>
	  {
		  Adc_read = read_adc(8);
 800128c:	2008      	movs	r0, #8
 800128e:	f000 faf5 	bl	800187c <read_adc>
 8001292:	4603      	mov	r3, r0
 8001294:	857b      	strh	r3, [r7, #42]	; 0x2a
		  if(Adc_read >= adc7_init)             					  // CHECKING WITH INITIAL VALUE IF INITIAL VALUE IS GREATER THAN PRESENT VALUE
 8001296:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001298:	4b8f      	ldr	r3, [pc, #572]	; (80014d8 <Adc_read+0x550>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d308      	bcc.n	80012b2 <Adc_read+0x32a>
		  {
			  ADCValue1_7 = Adc_read - adc7_init + ADCValue1_7;
 80012a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80012a2:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <Adc_read+0x550>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad2      	subs	r2, r2, r3
 80012a8:	4b8c      	ldr	r3, [pc, #560]	; (80014dc <Adc_read+0x554>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a8b      	ldr	r2, [pc, #556]	; (80014dc <Adc_read+0x554>)
 80012b0:	6013      	str	r3, [r2, #0]
		  }

		  if(Adc_read < adc7_init)
 80012b2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80012b4:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <Adc_read+0x550>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d208      	bcs.n	80012ce <Adc_read+0x346>
		  {
			  ADCValue1_7 = adc7_init - Adc_read + ADCValue1_7;
 80012bc:	4b86      	ldr	r3, [pc, #536]	; (80014d8 <Adc_read+0x550>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012c2:	1ad2      	subs	r2, r2, r3
 80012c4:	4b85      	ldr	r3, [pc, #532]	; (80014dc <Adc_read+0x554>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a84      	ldr	r2, [pc, #528]	; (80014dc <Adc_read+0x554>)
 80012cc:	6013      	str	r3, [r2, #0]
		  }
	   }
/**********************************************************************************************************************/
	   ADC_Counter = ADC_Counter + 1;
 80012ce:	4b84      	ldr	r3, [pc, #528]	; (80014e0 <Adc_read+0x558>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b82      	ldr	r3, [pc, #520]	; (80014e0 <Adc_read+0x558>)
 80012d8:	801a      	strh	r2, [r3, #0]

       if(ADC_Counter == MAX_SAMPLE)
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <Adc_read+0x558>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f040 8235 	bne.w	8001752 <Adc_read+0x7ca>
       {
				   /************ TAKING THE AVG *****************/

          float temp_ADC1_0 = 0;
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
	      float temp_ADC1_1 = 0;
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
	      float temp_ADC1_2 = 0;
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
	      float temp_ADC1_3 = 0;
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
	      float temp_ADC1_4 = 0;
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
	      float temp_ADC1_5 = 0;
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
	      float temp_ADC1_6 = 0;
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
	      float temp_ADC1_7 = 0;
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]

		  ADCValue1_0 = ADCValue1_0/MAX_SAMPLE;
 8001318:	4b72      	ldr	r3, [pc, #456]	; (80014e4 <Adc_read+0x55c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a72      	ldr	r2, [pc, #456]	; (80014e8 <Adc_read+0x560>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0b1b      	lsrs	r3, r3, #12
 8001324:	4a6f      	ldr	r2, [pc, #444]	; (80014e4 <Adc_read+0x55c>)
 8001326:	6013      	str	r3, [r2, #0]
		  ADCValue1_1 = ADCValue1_1/MAX_SAMPLE;
 8001328:	4b70      	ldr	r3, [pc, #448]	; (80014ec <Adc_read+0x564>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a6e      	ldr	r2, [pc, #440]	; (80014e8 <Adc_read+0x560>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0b1b      	lsrs	r3, r3, #12
 8001334:	4a6d      	ldr	r2, [pc, #436]	; (80014ec <Adc_read+0x564>)
 8001336:	6013      	str	r3, [r2, #0]
		  ADCValue1_2 = ADCValue1_2/MAX_SAMPLE;
 8001338:	4b6d      	ldr	r3, [pc, #436]	; (80014f0 <Adc_read+0x568>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a6a      	ldr	r2, [pc, #424]	; (80014e8 <Adc_read+0x560>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0b1b      	lsrs	r3, r3, #12
 8001344:	4a6a      	ldr	r2, [pc, #424]	; (80014f0 <Adc_read+0x568>)
 8001346:	6013      	str	r3, [r2, #0]
		  ADCValue1_3 = ADCValue1_3/MAX_SAMPLE;
 8001348:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <Adc_read+0x56c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a66      	ldr	r2, [pc, #408]	; (80014e8 <Adc_read+0x560>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0b1b      	lsrs	r3, r3, #12
 8001354:	4a67      	ldr	r2, [pc, #412]	; (80014f4 <Adc_read+0x56c>)
 8001356:	6013      	str	r3, [r2, #0]
		  ADCValue1_4 = ADCValue1_4/MAX_SAMPLE;
 8001358:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <Adc_read+0x570>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a62      	ldr	r2, [pc, #392]	; (80014e8 <Adc_read+0x560>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0b1b      	lsrs	r3, r3, #12
 8001364:	4a64      	ldr	r2, [pc, #400]	; (80014f8 <Adc_read+0x570>)
 8001366:	6013      	str	r3, [r2, #0]
		  ADCValue1_5 = ADCValue1_5/MAX_SAMPLE;
 8001368:	4b64      	ldr	r3, [pc, #400]	; (80014fc <Adc_read+0x574>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a5e      	ldr	r2, [pc, #376]	; (80014e8 <Adc_read+0x560>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0b1b      	lsrs	r3, r3, #12
 8001374:	4a61      	ldr	r2, [pc, #388]	; (80014fc <Adc_read+0x574>)
 8001376:	6013      	str	r3, [r2, #0]
		  ADCValue1_6 = ADCValue1_6/MAX_SAMPLE;
 8001378:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <Adc_read+0x54c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a5a      	ldr	r2, [pc, #360]	; (80014e8 <Adc_read+0x560>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <Adc_read+0x54c>)
 8001386:	6013      	str	r3, [r2, #0]
		  ADCValue1_7 = ADCValue1_7/MAX_SAMPLE;
 8001388:	4b54      	ldr	r3, [pc, #336]	; (80014dc <Adc_read+0x554>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <Adc_read+0x560>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0b1b      	lsrs	r3, r3, #12
 8001394:	4a51      	ldr	r2, [pc, #324]	; (80014dc <Adc_read+0x554>)
 8001396:	6013      	str	r3, [r2, #0]

     /***********************************************/
		  temp_ADC1_0 = ADCValue1_0;
 8001398:	4b52      	ldr	r3, [pc, #328]	; (80014e4 <Adc_read+0x55c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fa93 	bl	80008c8 <__aeabi_ui2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
		  temp_ADC1_1 = ADCValue1_1;
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <Adc_read+0x564>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fa8c 	bl	80008c8 <__aeabi_ui2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	623b      	str	r3, [r7, #32]
		  temp_ADC1_2 = ADCValue1_2;
 80013b4:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <Adc_read+0x568>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fa85 	bl	80008c8 <__aeabi_ui2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	61fb      	str	r3, [r7, #28]
		  temp_ADC1_3 = ADCValue1_3;
 80013c2:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <Adc_read+0x56c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fa7e 	bl	80008c8 <__aeabi_ui2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	61bb      	str	r3, [r7, #24]
		  temp_ADC1_4 = ADCValue1_4;
 80013d0:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <Adc_read+0x570>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fa77 	bl	80008c8 <__aeabi_ui2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	617b      	str	r3, [r7, #20]
		  temp_ADC1_5 = ADCValue1_5;
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <Adc_read+0x574>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fa70 	bl	80008c8 <__aeabi_ui2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	613b      	str	r3, [r7, #16]
		  temp_ADC1_6 = ADCValue1_6;
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <Adc_read+0x54c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fa69 	bl	80008c8 <__aeabi_ui2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
		  temp_ADC1_7 = ADCValue1_7;
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <Adc_read+0x554>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fa62 	bl	80008c8 <__aeabi_ui2f>
 8001404:	4603      	mov	r3, r0
 8001406:	60bb      	str	r3, [r7, #8]

		  ADCValue1_0 = (temp_ADC1_0*0.0079+0.0049)*230;
 8001408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800140a:	f7ff f92f 	bl	800066c <__aeabi_f2d>
 800140e:	a328      	add	r3, pc, #160	; (adr r3, 80014b0 <Adc_read+0x528>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7fe fe9c 	bl	8000150 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	a325      	add	r3, pc, #148	; (adr r3, 80014b8 <Adc_read+0x530>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7fe ffc3 	bl	80003b0 <__adddf3>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	a323      	add	r3, pc, #140	; (adr r3, 80014c0 <Adc_read+0x538>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7fe fe8a 	bl	8000150 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff f96a 	bl	800071c <__aeabi_d2uiz>
 8001448:	4603      	mov	r3, r0
 800144a:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <Adc_read+0x55c>)
 800144c:	6013      	str	r3, [r2, #0]
		  ADCValue1_1 = (temp_ADC1_1*0.0079+0.0049)*230;
 800144e:	6a38      	ldr	r0, [r7, #32]
 8001450:	f7ff f90c 	bl	800066c <__aeabi_f2d>
 8001454:	a316      	add	r3, pc, #88	; (adr r3, 80014b0 <Adc_read+0x528>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7fe fe79 	bl	8000150 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	a314      	add	r3, pc, #80	; (adr r3, 80014b8 <Adc_read+0x530>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7fe ffa0 	bl	80003b0 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	a311      	add	r3, pc, #68	; (adr r3, 80014c0 <Adc_read+0x538>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7fe fe67 	bl	8000150 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff f947 	bl	800071c <__aeabi_d2uiz>
 800148e:	4603      	mov	r3, r0
 8001490:	4a16      	ldr	r2, [pc, #88]	; (80014ec <Adc_read+0x564>)
 8001492:	6013      	str	r3, [r2, #0]
		  ADCValue1_2 = (temp_ADC1_2*0.0079+0.0049)*230;
 8001494:	69f8      	ldr	r0, [r7, #28]
 8001496:	f7ff f8e9 	bl	800066c <__aeabi_f2d>
 800149a:	a305      	add	r3, pc, #20	; (adr r3, 80014b0 <Adc_read+0x528>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7fe fe56 	bl	8000150 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	e028      	b.n	8001500 <Adc_read+0x578>
 80014ae:	bf00      	nop
 80014b0:	0d1b7176 	.word	0x0d1b7176
 80014b4:	3f802de0 	.word	0x3f802de0
 80014b8:	bc01a36e 	.word	0xbc01a36e
 80014bc:	3f741205 	.word	0x3f741205
 80014c0:	00000000 	.word	0x00000000
 80014c4:	406cc000 	.word	0x406cc000
 80014c8:	200002e4 	.word	0x200002e4
 80014cc:	20000114 	.word	0x20000114
 80014d0:	200002dc 	.word	0x200002dc
 80014d4:	200002bc 	.word	0x200002bc
 80014d8:	200002e0 	.word	0x200002e0
 80014dc:	200002c0 	.word	0x200002c0
 80014e0:	20000304 	.word	0x20000304
 80014e4:	200002a4 	.word	0x200002a4
 80014e8:	d1b71759 	.word	0xd1b71759
 80014ec:	200002a8 	.word	0x200002a8
 80014f0:	200002ac 	.word	0x200002ac
 80014f4:	200002b0 	.word	0x200002b0
 80014f8:	200002b4 	.word	0x200002b4
 80014fc:	200002b8 	.word	0x200002b8
 8001500:	a397      	add	r3, pc, #604	; (adr r3, 8001760 <Adc_read+0x7d8>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe ff53 	bl	80003b0 <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	a395      	add	r3, pc, #596	; (adr r3, 8001768 <Adc_read+0x7e0>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7fe fe1a 	bl	8000150 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff f8fa 	bl	800071c <__aeabi_d2uiz>
 8001528:	4603      	mov	r3, r0
 800152a:	4a97      	ldr	r2, [pc, #604]	; (8001788 <Adc_read+0x800>)
 800152c:	6013      	str	r3, [r2, #0]
		  ADCValue1_3 = (temp_ADC1_3*0.0079+0.0049)*230;
 800152e:	69b8      	ldr	r0, [r7, #24]
 8001530:	f7ff f89c 	bl	800066c <__aeabi_f2d>
 8001534:	a38e      	add	r3, pc, #568	; (adr r3, 8001770 <Adc_read+0x7e8>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7fe fe09 	bl	8000150 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	a386      	add	r3, pc, #536	; (adr r3, 8001760 <Adc_read+0x7d8>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe ff30 	bl	80003b0 <__adddf3>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	a383      	add	r3, pc, #524	; (adr r3, 8001768 <Adc_read+0x7e0>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe fdf7 	bl	8000150 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff f8d7 	bl	800071c <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	4a86      	ldr	r2, [pc, #536]	; (800178c <Adc_read+0x804>)
 8001572:	6013      	str	r3, [r2, #0]
		  ADCValue1_4 = (temp_ADC1_4*0.0079+0.0049)*230;
 8001574:	6978      	ldr	r0, [r7, #20]
 8001576:	f7ff f879 	bl	800066c <__aeabi_f2d>
 800157a:	a37d      	add	r3, pc, #500	; (adr r3, 8001770 <Adc_read+0x7e8>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7fe fde6 	bl	8000150 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	a374      	add	r3, pc, #464	; (adr r3, 8001760 <Adc_read+0x7d8>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe ff0d 	bl	80003b0 <__adddf3>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	a372      	add	r3, pc, #456	; (adr r3, 8001768 <Adc_read+0x7e0>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7fe fdd4 	bl	8000150 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff f8b4 	bl	800071c <__aeabi_d2uiz>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a76      	ldr	r2, [pc, #472]	; (8001790 <Adc_read+0x808>)
 80015b8:	6013      	str	r3, [r2, #0]
		  ADCValue1_5 = (temp_ADC1_5*0.0079+0.0049)*230;
 80015ba:	6938      	ldr	r0, [r7, #16]
 80015bc:	f7ff f856 	bl	800066c <__aeabi_f2d>
 80015c0:	a36b      	add	r3, pc, #428	; (adr r3, 8001770 <Adc_read+0x7e8>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7fe fdc3 	bl	8000150 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	a363      	add	r3, pc, #396	; (adr r3, 8001760 <Adc_read+0x7d8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7fe feea 	bl	80003b0 <__adddf3>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	a360      	add	r3, pc, #384	; (adr r3, 8001768 <Adc_read+0x7e0>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7fe fdb1 	bl	8000150 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff f891 	bl	800071c <__aeabi_d2uiz>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a65      	ldr	r2, [pc, #404]	; (8001794 <Adc_read+0x80c>)
 80015fe:	6013      	str	r3, [r2, #0]
		  ADCValue1_6 = (temp_ADC1_6*0.0079+0.0049)*230;
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff f833 	bl	800066c <__aeabi_f2d>
 8001606:	a35a      	add	r3, pc, #360	; (adr r3, 8001770 <Adc_read+0x7e8>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe fda0 	bl	8000150 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	a351      	add	r3, pc, #324	; (adr r3, 8001760 <Adc_read+0x7d8>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe fec7 	bl	80003b0 <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	a34f      	add	r3, pc, #316	; (adr r3, 8001768 <Adc_read+0x7e0>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe fd8e 	bl	8000150 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff f86e 	bl	800071c <__aeabi_d2uiz>
 8001640:	4603      	mov	r3, r0
 8001642:	4a55      	ldr	r2, [pc, #340]	; (8001798 <Adc_read+0x810>)
 8001644:	6013      	str	r3, [r2, #0]
		  ADCValue1_7 = (temp_ADC1_7*0.0141-0.0553)*230;
 8001646:	68b8      	ldr	r0, [r7, #8]
 8001648:	f7ff f810 	bl	800066c <__aeabi_f2d>
 800164c:	a34a      	add	r3, pc, #296	; (adr r3, 8001778 <Adc_read+0x7f0>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe fd7d 	bl	8000150 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	a348      	add	r3, pc, #288	; (adr r3, 8001780 <Adc_read+0x7f8>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fea2 	bl	80003ac <__aeabi_dsub>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	a33d      	add	r3, pc, #244	; (adr r3, 8001768 <Adc_read+0x7e0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe fd6b 	bl	8000150 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff f84b 	bl	800071c <__aeabi_d2uiz>
 8001686:	4603      	mov	r3, r0
 8001688:	4a44      	ldr	r2, [pc, #272]	; (800179c <Adc_read+0x814>)
 800168a:	6013      	str	r3, [r2, #0]

		  uint32_t Now = HAL_GetTick();
 800168c:	f002 fb56 	bl	8003d3c <HAL_GetTick>
 8001690:	6078      	str	r0, [r7, #4]

		  if(Now - ADC_Start_Time >= 3000)
 8001692:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <Adc_read+0x818>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800169e:	4293      	cmp	r3, r2
 80016a0:	d906      	bls.n	80016b0 <Adc_read+0x728>
          {
               ADC_Start_Time =Now;
 80016a2:	4a3f      	ldr	r2, [pc, #252]	; (80017a0 <Adc_read+0x818>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6013      	str	r3, [r2, #0]
//               if( Tuya_flag == 1)
//               {
			   Serial_out();
 80016a8:	f000 f94e 	bl	8001948 <Serial_out>
//               }
               adc_clear();                                      // CLEARING THE ADC VALUES AFTER TAKING THE SAMPLES
 80016ac:	f000 f890 	bl	80017d0 <adc_clear>
           }

           adc0_init = ADC_Tempvalue[0]/MAX_SAMPLE;
 80016b0:	4b3c      	ldr	r3, [pc, #240]	; (80017a4 <Adc_read+0x81c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a3c      	ldr	r2, [pc, #240]	; (80017a8 <Adc_read+0x820>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0b1b      	lsrs	r3, r3, #12
 80016bc:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <Adc_read+0x824>)
 80016be:	6013      	str	r3, [r2, #0]
		   adc1_init = ADC_Tempvalue[1]/MAX_SAMPLE;
 80016c0:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <Adc_read+0x81c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <Adc_read+0x820>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0b1b      	lsrs	r3, r3, #12
 80016cc:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <Adc_read+0x828>)
 80016ce:	6013      	str	r3, [r2, #0]
		   adc2_init = ADC_Tempvalue[2]/MAX_SAMPLE;
 80016d0:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <Adc_read+0x81c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a34      	ldr	r2, [pc, #208]	; (80017a8 <Adc_read+0x820>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0b1b      	lsrs	r3, r3, #12
 80016dc:	4a35      	ldr	r2, [pc, #212]	; (80017b4 <Adc_read+0x82c>)
 80016de:	6013      	str	r3, [r2, #0]
		   adc3_init = ADC_Tempvalue[3]/MAX_SAMPLE;
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <Adc_read+0x81c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <Adc_read+0x820>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0b1b      	lsrs	r3, r3, #12
 80016ec:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <Adc_read+0x830>)
 80016ee:	6013      	str	r3, [r2, #0]
		   adc4_init = ADC_Tempvalue[4]/MAX_SAMPLE;
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <Adc_read+0x81c>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <Adc_read+0x820>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0b1b      	lsrs	r3, r3, #12
 80016fc:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <Adc_read+0x834>)
 80016fe:	6013      	str	r3, [r2, #0]
		   adc5_init = ADC_Tempvalue[5]/MAX_SAMPLE;
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <Adc_read+0x81c>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <Adc_read+0x820>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0b1b      	lsrs	r3, r3, #12
 800170c:	4a2c      	ldr	r2, [pc, #176]	; (80017c0 <Adc_read+0x838>)
 800170e:	6013      	str	r3, [r2, #0]
		   adc6_init = ADC_Tempvalue[6]/MAX_SAMPLE;
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <Adc_read+0x81c>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <Adc_read+0x820>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0b1b      	lsrs	r3, r3, #12
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <Adc_read+0x83c>)
 800171e:	6013      	str	r3, [r2, #0]
		   adc7_init = ADC_Tempvalue[7]/MAX_SAMPLE;
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <Adc_read+0x81c>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <Adc_read+0x820>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0b1b      	lsrs	r3, r3, #12
 800172c:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <Adc_read+0x840>)
 800172e:	6013      	str	r3, [r2, #0]

/***************************************************************************************************/
		   ADC_Counter = 0;
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <Adc_read+0x844>)
 8001732:	2200      	movs	r2, #0
 8001734:	801a      	strh	r2, [r3, #0]
		   for(int i = 0; i < 8; i++)
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173a:	e007      	b.n	800174c <Adc_read+0x7c4>
		   {
			    ADC_Tempvalue[i] = 0;
 800173c:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <Adc_read+0x81c>)
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	2100      	movs	r1, #0
 8001742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		   for(int i = 0; i < 8; i++)
 8001746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001748:	3301      	adds	r3, #1
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	2b07      	cmp	r3, #7
 8001750:	ddf4      	ble.n	800173c <Adc_read+0x7b4>

  /* USER CODE END 5 */

       }

}
 8001752:	bf00      	nop
 8001754:	3730      	adds	r7, #48	; 0x30
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w
 8001760:	bc01a36e 	.word	0xbc01a36e
 8001764:	3f741205 	.word	0x3f741205
 8001768:	00000000 	.word	0x00000000
 800176c:	406cc000 	.word	0x406cc000
 8001770:	0d1b7176 	.word	0x0d1b7176
 8001774:	3f802de0 	.word	0x3f802de0
 8001778:	f6fd21ff 	.word	0xf6fd21ff
 800177c:	3f8ce075 	.word	0x3f8ce075
 8001780:	16f0068e 	.word	0x16f0068e
 8001784:	3fac5048 	.word	0x3fac5048
 8001788:	200002ac 	.word	0x200002ac
 800178c:	200002b0 	.word	0x200002b0
 8001790:	200002b4 	.word	0x200002b4
 8001794:	200002b8 	.word	0x200002b8
 8001798:	200002bc 	.word	0x200002bc
 800179c:	200002c0 	.word	0x200002c0
 80017a0:	20000308 	.word	0x20000308
 80017a4:	200002e4 	.word	0x200002e4
 80017a8:	d1b71759 	.word	0xd1b71759
 80017ac:	200002c4 	.word	0x200002c4
 80017b0:	200002c8 	.word	0x200002c8
 80017b4:	200002cc 	.word	0x200002cc
 80017b8:	200002d0 	.word	0x200002d0
 80017bc:	200002d4 	.word	0x200002d4
 80017c0:	200002d8 	.word	0x200002d8
 80017c4:	200002dc 	.word	0x200002dc
 80017c8:	200002e0 	.word	0x200002e0
 80017cc:	20000304 	.word	0x20000304

080017d0 <adc_clear>:

/**********************************************
 * CLEARING ADC VALUES AFTER TAKING THE SAMPLES
 **********************************************/
void adc_clear()
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	   ADCValue1_0 = 0;
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <adc_clear+0x6c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
	   ADCValue1_1 = 0;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <adc_clear+0x70>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
	   ADCValue1_2 = 0;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <adc_clear+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
	   ADCValue1_3 = 0;
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <adc_clear+0x78>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
	   ADCValue1_4 = 0;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <adc_clear+0x7c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
	   ADCValue1_5 = 0;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <adc_clear+0x80>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
	   ADCValue1_6 = 0;
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <adc_clear+0x84>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
	   ADCValue1_7 = 0;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <adc_clear+0x88>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

	   adc0_init = 0;
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <adc_clear+0x8c>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
	   adc1_init = 0;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <adc_clear+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
	   adc2_init = 0;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <adc_clear+0x94>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
	   adc3_init = 0;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <adc_clear+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
	   adc4_init = 0;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <adc_clear+0x9c>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	   adc5_init = 0;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <adc_clear+0xa0>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
	   adc6_init = 0;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <adc_clear+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
	   adc7_init = 0;
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <adc_clear+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	200002a4 	.word	0x200002a4
 8001840:	200002a8 	.word	0x200002a8
 8001844:	200002ac 	.word	0x200002ac
 8001848:	200002b0 	.word	0x200002b0
 800184c:	200002b4 	.word	0x200002b4
 8001850:	200002b8 	.word	0x200002b8
 8001854:	200002bc 	.word	0x200002bc
 8001858:	200002c0 	.word	0x200002c0
 800185c:	200002c4 	.word	0x200002c4
 8001860:	200002c8 	.word	0x200002c8
 8001864:	200002cc 	.word	0x200002cc
 8001868:	200002d0 	.word	0x200002d0
 800186c:	200002d4 	.word	0x200002d4
 8001870:	200002d8 	.word	0x200002d8
 8001874:	200002dc 	.word	0x200002dc
 8001878:	200002e0 	.word	0x200002e0

0800187c <read_adc>:
 * READING ADC VALUE OF EACH CHANNEL ON DEMAND
 * Configuring each channel and using polling
 *****************************************************************/

int read_adc(int channel)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	   ADC_ChannelConfTypeDef sConfig = {0};
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
	   int adc = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
	   switch(channel)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b08      	cmp	r3, #8
 8001898:	d82f      	bhi.n	80018fa <read_adc+0x7e>
 800189a:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <read_adc+0x24>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018c5 	.word	0x080018c5
 80018a4:	080018cb 	.word	0x080018cb
 80018a8:	080018d1 	.word	0x080018d1
 80018ac:	080018d7 	.word	0x080018d7
 80018b0:	080018dd 	.word	0x080018dd
 80018b4:	080018e3 	.word	0x080018e3
 80018b8:	080018e9 	.word	0x080018e9
 80018bc:	080018ef 	.word	0x080018ef
 80018c0:	080018f5 	.word	0x080018f5
	   {
		   case 0:
			     sConfig.Channel = ADC_CHANNEL_0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
		   break;
 80018c8:	e018      	b.n	80018fc <read_adc+0x80>

		   case 1:
			     sConfig.Channel = ADC_CHANNEL_1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
		   break;
 80018ce:	e015      	b.n	80018fc <read_adc+0x80>

		   case 2:
			     sConfig.Channel = ADC_CHANNEL_2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	60bb      	str	r3, [r7, #8]
		   break;
 80018d4:	e012      	b.n	80018fc <read_adc+0x80>

		   case 3:
			     sConfig.Channel = ADC_CHANNEL_3;
 80018d6:	2303      	movs	r3, #3
 80018d8:	60bb      	str	r3, [r7, #8]
		   break;
 80018da:	e00f      	b.n	80018fc <read_adc+0x80>

		   case 4:
			     sConfig.Channel = ADC_CHANNEL_4;
 80018dc:	2304      	movs	r3, #4
 80018de:	60bb      	str	r3, [r7, #8]
		   break;
 80018e0:	e00c      	b.n	80018fc <read_adc+0x80>

		   case 5:
			     sConfig.Channel = ADC_CHANNEL_5;
 80018e2:	2305      	movs	r3, #5
 80018e4:	60bb      	str	r3, [r7, #8]
		   break;
 80018e6:	e009      	b.n	80018fc <read_adc+0x80>

		   case 6:
			     sConfig.Channel = ADC_CHANNEL_7;
 80018e8:	2307      	movs	r3, #7
 80018ea:	60bb      	str	r3, [r7, #8]
		   break;
 80018ec:	e006      	b.n	80018fc <read_adc+0x80>

		   case 7:
			     sConfig.Channel = ADC_CHANNEL_6;
 80018ee:	2306      	movs	r3, #6
 80018f0:	60bb      	str	r3, [r7, #8]
		   break;
 80018f2:	e003      	b.n	80018fc <read_adc+0x80>

		   case 8:
			     sConfig.Channel = ADC_CHANNEL_8;
 80018f4:	2308      	movs	r3, #8
 80018f6:	60bb      	str	r3, [r7, #8]
		   break;
 80018f8:	e000      	b.n	80018fc <read_adc+0x80>

		   default:
		   break;
 80018fa:	bf00      	nop
		}

		sConfig.Rank = ADC_REGULAR_RANK_1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001900:	2306      	movs	r3, #6
 8001902:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4619      	mov	r1, r3
 800190a:	480e      	ldr	r0, [pc, #56]	; (8001944 <read_adc+0xc8>)
 800190c:	f002 fd08 	bl	8004320 <HAL_ADC_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <read_adc+0x9e>
		{
		    Error_Handler();
 8001916:	f001 fd3d 	bl	8003394 <Error_Handler>
		}

		HAL_ADC_Start(&hadc1);
 800191a:	480a      	ldr	r0, [pc, #40]	; (8001944 <read_adc+0xc8>)
 800191c:	f002 fb14 	bl	8003f48 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8001920:	210a      	movs	r1, #10
 8001922:	4808      	ldr	r0, [pc, #32]	; (8001944 <read_adc+0xc8>)
 8001924:	f002 fbea 	bl	80040fc <HAL_ADC_PollForConversion>
		adc = HAL_ADC_GetValue(&hadc1) ;
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <read_adc+0xc8>)
 800192a:	f002 fced 	bl	8004308 <HAL_ADC_GetValue>
 800192e:	4603      	mov	r3, r0
 8001930:	617b      	str	r3, [r7, #20]
		HAL_ADC_Stop(&hadc1);
 8001932:	4804      	ldr	r0, [pc, #16]	; (8001944 <read_adc+0xc8>)
 8001934:	f002 fbb6 	bl	80040a4 <HAL_ADC_Stop>
		return adc;
 8001938:	697b      	ldr	r3, [r7, #20]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000008c 	.word	0x2000008c

08001948 <Serial_out>:
/******************************************************************
 * SENDING ADC VALUE TO TUYA USING UART
******************************************************************/

void Serial_out()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
	    uint8_t  ADC_Tx_Buff[15];
	    uint8_t  bytes[2];
	    uint8_t  Check_Sum = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	74fb      	strb	r3, [r7, #19]
	    uint32_t Tx_Data_Sum = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]

	    ADC_Tx_Buff[0]  = 0x55;
 8001956:	2355      	movs	r3, #85	; 0x55
 8001958:	713b      	strb	r3, [r7, #4]
	    ADC_Tx_Buff[1]  = 0xAA;
 800195a:	23aa      	movs	r3, #170	; 0xaa
 800195c:	717b      	strb	r3, [r7, #5]
	    ADC_Tx_Buff[2]  = 0x03;
 800195e:	2303      	movs	r3, #3
 8001960:	71bb      	strb	r3, [r7, #6]
	    ADC_Tx_Buff[3]  = 0x07;
 8001962:	2307      	movs	r3, #7
 8001964:	71fb      	strb	r3, [r7, #7]
	    ADC_Tx_Buff[4]  = 0x00;
 8001966:	2300      	movs	r3, #0
 8001968:	723b      	strb	r3, [r7, #8]
	    ADC_Tx_Buff[5]  = 0x08;
 800196a:	2308      	movs	r3, #8
 800196c:	727b      	strb	r3, [r7, #9]
	    ADC_Tx_Buff[7]  = 0x02;
 800196e:	2302      	movs	r3, #2
 8001970:	72fb      	strb	r3, [r7, #11]
	    ADC_Tx_Buff[8]  = 0x00;
 8001972:	2300      	movs	r3, #0
 8001974:	733b      	strb	r3, [r7, #12]
	    ADC_Tx_Buff[9]  = 0x04;
 8001976:	2304      	movs	r3, #4
 8001978:	737b      	strb	r3, [r7, #13]
	    ADC_Tx_Buff[10] = 0x00;
 800197a:	2300      	movs	r3, #0
 800197c:	73bb      	strb	r3, [r7, #14]
	    ADC_Tx_Buff[11] = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]


	    ADC_Tx_Buff[6] = 0x68;
 8001982:	2368      	movs	r3, #104	; 0x68
 8001984:	72bb      	strb	r3, [r7, #10]
	  	bytes[0] = ADCValue1_0 >> 8;
 8001986:	4bac      	ldr	r3, [pc, #688]	; (8001c38 <Serial_out+0x2f0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	b2db      	uxtb	r3, r3
 800198e:	703b      	strb	r3, [r7, #0]
	  	bytes[1] = ADCValue1_0 & 0x00FF;
 8001990:	4ba9      	ldr	r3, [pc, #676]	; (8001c38 <Serial_out+0x2f0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	707b      	strb	r3, [r7, #1]
	  	ADC_Tx_Buff[12] = bytes[0];
 8001998:	783b      	ldrb	r3, [r7, #0]
 800199a:	743b      	strb	r3, [r7, #16]
	  	ADC_Tx_Buff[13] = bytes[1];
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	747b      	strb	r3, [r7, #17]

	  	for(uint8_t i = 0; i <= 13; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	76fb      	strb	r3, [r7, #27]
 80019a4:	e00b      	b.n	80019be <Serial_out+0x76>
	  	{
	  	     Tx_Data_Sum += ADC_Tx_Buff[i];
 80019a6:	7efb      	ldrb	r3, [r7, #27]
 80019a8:	3320      	adds	r3, #32
 80019aa:	443b      	add	r3, r7
 80019ac:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80019b0:	461a      	mov	r2, r3
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	61fb      	str	r3, [r7, #28]
	  	for(uint8_t i = 0; i <= 13; i++)
 80019b8:	7efb      	ldrb	r3, [r7, #27]
 80019ba:	3301      	adds	r3, #1
 80019bc:	76fb      	strb	r3, [r7, #27]
 80019be:	7efb      	ldrb	r3, [r7, #27]
 80019c0:	2b0d      	cmp	r3, #13
 80019c2:	d9f0      	bls.n	80019a6 <Serial_out+0x5e>
	  	}
	  	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	74fb      	strb	r3, [r7, #19]
	  	ADC_Tx_Buff[14] = Check_Sum ;
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	74bb      	strb	r3, [r7, #18]
	  	HAL_UART_Transmit(&huart2,ADC_Tx_Buff,sizeof(ADC_Tx_Buff),100);
 80019cc:	1d39      	adds	r1, r7, #4
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	220f      	movs	r2, #15
 80019d2:	489a      	ldr	r0, [pc, #616]	; (8001c3c <Serial_out+0x2f4>)
 80019d4:	f005 ff7c 	bl	80078d0 <HAL_UART_Transmit>
	  	Check_Sum = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	74fb      	strb	r3, [r7, #19]
	  	Tx_Data_Sum = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]


	  	ADC_Tx_Buff[6] = 0x69;
 80019e0:	2369      	movs	r3, #105	; 0x69
 80019e2:	72bb      	strb	r3, [r7, #10]
	  	bytes[0] = ADCValue1_1 >> 8;
 80019e4:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <Serial_out+0x2f8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	703b      	strb	r3, [r7, #0]
	  	bytes[1] = ADCValue1_1 & 0x00FF;
 80019ee:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <Serial_out+0x2f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	707b      	strb	r3, [r7, #1]
	  	ADC_Tx_Buff[12] = bytes[0];
 80019f6:	783b      	ldrb	r3, [r7, #0]
 80019f8:	743b      	strb	r3, [r7, #16]
	  	ADC_Tx_Buff[13] = bytes[1];
 80019fa:	787b      	ldrb	r3, [r7, #1]
 80019fc:	747b      	strb	r3, [r7, #17]

	  	for(uint8_t i = 0; i <= 13; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	76bb      	strb	r3, [r7, #26]
 8001a02:	e00b      	b.n	8001a1c <Serial_out+0xd4>
	  	{
	  	  	 Tx_Data_Sum += ADC_Tx_Buff[i];
 8001a04:	7ebb      	ldrb	r3, [r7, #26]
 8001a06:	3320      	adds	r3, #32
 8001a08:	443b      	add	r3, r7
 8001a0a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	61fb      	str	r3, [r7, #28]
	  	for(uint8_t i = 0; i <= 13; i++)
 8001a16:	7ebb      	ldrb	r3, [r7, #26]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	76bb      	strb	r3, [r7, #26]
 8001a1c:	7ebb      	ldrb	r3, [r7, #26]
 8001a1e:	2b0d      	cmp	r3, #13
 8001a20:	d9f0      	bls.n	8001a04 <Serial_out+0xbc>
	  	}
	  	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	74fb      	strb	r3, [r7, #19]
	  	ADC_Tx_Buff[14] = Check_Sum ;
 8001a26:	7cfb      	ldrb	r3, [r7, #19]
 8001a28:	74bb      	strb	r3, [r7, #18]
	  	HAL_UART_Transmit(&huart2,ADC_Tx_Buff,sizeof(ADC_Tx_Buff),100);
 8001a2a:	1d39      	adds	r1, r7, #4
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	220f      	movs	r2, #15
 8001a30:	4882      	ldr	r0, [pc, #520]	; (8001c3c <Serial_out+0x2f4>)
 8001a32:	f005 ff4d 	bl	80078d0 <HAL_UART_Transmit>
	  	Check_Sum = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	74fb      	strb	r3, [r7, #19]
	  	Tx_Data_Sum = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]


	  	ADC_Tx_Buff[6] = 0x6B;
 8001a3e:	236b      	movs	r3, #107	; 0x6b
 8001a40:	72bb      	strb	r3, [r7, #10]
	  	bytes[0] = ADCValue1_2 >> 8;
 8001a42:	4b80      	ldr	r3, [pc, #512]	; (8001c44 <Serial_out+0x2fc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	703b      	strb	r3, [r7, #0]
	  	bytes[1] = ADCValue1_2 & 0x00FF;
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <Serial_out+0x2fc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	707b      	strb	r3, [r7, #1]
	  	ADC_Tx_Buff[12] = bytes[0];
 8001a54:	783b      	ldrb	r3, [r7, #0]
 8001a56:	743b      	strb	r3, [r7, #16]
	  	ADC_Tx_Buff[13] = bytes[1];
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	747b      	strb	r3, [r7, #17]

	  	for(uint8_t i = 0; i <= 13; i++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	767b      	strb	r3, [r7, #25]
 8001a60:	e00b      	b.n	8001a7a <Serial_out+0x132>
	  	{
	  	  	 Tx_Data_Sum += ADC_Tx_Buff[i];
 8001a62:	7e7b      	ldrb	r3, [r7, #25]
 8001a64:	3320      	adds	r3, #32
 8001a66:	443b      	add	r3, r7
 8001a68:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	61fb      	str	r3, [r7, #28]
	  	for(uint8_t i = 0; i <= 13; i++)
 8001a74:	7e7b      	ldrb	r3, [r7, #25]
 8001a76:	3301      	adds	r3, #1
 8001a78:	767b      	strb	r3, [r7, #25]
 8001a7a:	7e7b      	ldrb	r3, [r7, #25]
 8001a7c:	2b0d      	cmp	r3, #13
 8001a7e:	d9f0      	bls.n	8001a62 <Serial_out+0x11a>
	  	}
	  	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	74fb      	strb	r3, [r7, #19]
	  	ADC_Tx_Buff[14] = Check_Sum ;
 8001a84:	7cfb      	ldrb	r3, [r7, #19]
 8001a86:	74bb      	strb	r3, [r7, #18]
	  	HAL_UART_Transmit(&huart2,ADC_Tx_Buff,sizeof(ADC_Tx_Buff),100);
 8001a88:	1d39      	adds	r1, r7, #4
 8001a8a:	2364      	movs	r3, #100	; 0x64
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	486b      	ldr	r0, [pc, #428]	; (8001c3c <Serial_out+0x2f4>)
 8001a90:	f005 ff1e 	bl	80078d0 <HAL_UART_Transmit>
	  	Check_Sum = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	74fb      	strb	r3, [r7, #19]
	  	Tx_Data_Sum = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]


	  	ADC_Tx_Buff[6] = 0x6C;
 8001a9c:	236c      	movs	r3, #108	; 0x6c
 8001a9e:	72bb      	strb	r3, [r7, #10]
	  	bytes[0] = ADCValue1_3 >> 8;
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <Serial_out+0x300>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	703b      	strb	r3, [r7, #0]
	  	bytes[1] = ADCValue1_3 & 0x00FF;
 8001aaa:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <Serial_out+0x300>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	707b      	strb	r3, [r7, #1]
	  	ADC_Tx_Buff[12] = bytes[0];
 8001ab2:	783b      	ldrb	r3, [r7, #0]
 8001ab4:	743b      	strb	r3, [r7, #16]
	  	ADC_Tx_Buff[13] = bytes[1];
 8001ab6:	787b      	ldrb	r3, [r7, #1]
 8001ab8:	747b      	strb	r3, [r7, #17]

	  	for(uint8_t i = 0; i <= 13; i++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	763b      	strb	r3, [r7, #24]
 8001abe:	e00b      	b.n	8001ad8 <Serial_out+0x190>
	  	{
	  	  	 Tx_Data_Sum += ADC_Tx_Buff[i];
 8001ac0:	7e3b      	ldrb	r3, [r7, #24]
 8001ac2:	3320      	adds	r3, #32
 8001ac4:	443b      	add	r3, r7
 8001ac6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001aca:	461a      	mov	r2, r3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	61fb      	str	r3, [r7, #28]
	  	for(uint8_t i = 0; i <= 13; i++)
 8001ad2:	7e3b      	ldrb	r3, [r7, #24]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	763b      	strb	r3, [r7, #24]
 8001ad8:	7e3b      	ldrb	r3, [r7, #24]
 8001ada:	2b0d      	cmp	r3, #13
 8001adc:	d9f0      	bls.n	8001ac0 <Serial_out+0x178>
	  	}
	  	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	74fb      	strb	r3, [r7, #19]
	  	ADC_Tx_Buff[14] = Check_Sum ;
 8001ae2:	7cfb      	ldrb	r3, [r7, #19]
 8001ae4:	74bb      	strb	r3, [r7, #18]
	  	HAL_UART_Transmit(&huart2,ADC_Tx_Buff,sizeof(ADC_Tx_Buff),100);
 8001ae6:	1d39      	adds	r1, r7, #4
 8001ae8:	2364      	movs	r3, #100	; 0x64
 8001aea:	220f      	movs	r2, #15
 8001aec:	4853      	ldr	r0, [pc, #332]	; (8001c3c <Serial_out+0x2f4>)
 8001aee:	f005 feef 	bl	80078d0 <HAL_UART_Transmit>
	  	Check_Sum = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	74fb      	strb	r3, [r7, #19]
	  	Tx_Data_Sum = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]


	  	ADC_Tx_Buff[6] = 0x6D;
 8001afa:	236d      	movs	r3, #109	; 0x6d
 8001afc:	72bb      	strb	r3, [r7, #10]
	  	bytes[0] = ADCValue1_4 >> 8;
 8001afe:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <Serial_out+0x304>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	703b      	strb	r3, [r7, #0]
	  	bytes[1] = ADCValue1_4 & 0x00FF;
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <Serial_out+0x304>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	707b      	strb	r3, [r7, #1]
	  	ADC_Tx_Buff[12] = bytes[0];
 8001b10:	783b      	ldrb	r3, [r7, #0]
 8001b12:	743b      	strb	r3, [r7, #16]
	  	ADC_Tx_Buff[13] = bytes[1];
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	747b      	strb	r3, [r7, #17]

	  	for(uint8_t i = 0; i <= 13; i++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	75fb      	strb	r3, [r7, #23]
 8001b1c:	e00b      	b.n	8001b36 <Serial_out+0x1ee>
	  	{
	  	  	 Tx_Data_Sum += ADC_Tx_Buff[i];
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	3320      	adds	r3, #32
 8001b22:	443b      	add	r3, r7
 8001b24:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	61fb      	str	r3, [r7, #28]
	  	for(uint8_t i = 0; i <= 13; i++)
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	3301      	adds	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	2b0d      	cmp	r3, #13
 8001b3a:	d9f0      	bls.n	8001b1e <Serial_out+0x1d6>
	    }
	  	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	74fb      	strb	r3, [r7, #19]
	  	ADC_Tx_Buff[14] = Check_Sum ;
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	74bb      	strb	r3, [r7, #18]
	  	HAL_UART_Transmit(&huart2,ADC_Tx_Buff,sizeof(ADC_Tx_Buff),100);
 8001b44:	1d39      	adds	r1, r7, #4
 8001b46:	2364      	movs	r3, #100	; 0x64
 8001b48:	220f      	movs	r2, #15
 8001b4a:	483c      	ldr	r0, [pc, #240]	; (8001c3c <Serial_out+0x2f4>)
 8001b4c:	f005 fec0 	bl	80078d0 <HAL_UART_Transmit>
	  	Check_Sum = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	74fb      	strb	r3, [r7, #19]
	  	Tx_Data_Sum = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]


	  	ADC_Tx_Buff[6] = 0x6E;
 8001b58:	236e      	movs	r3, #110	; 0x6e
 8001b5a:	72bb      	strb	r3, [r7, #10]
	  	bytes[0] = ADCValue1_5 >> 8;
 8001b5c:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <Serial_out+0x308>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	703b      	strb	r3, [r7, #0]
	  	bytes[1] = ADCValue1_5 & 0x00FF;
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <Serial_out+0x308>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	707b      	strb	r3, [r7, #1]
	  	ADC_Tx_Buff[12] = bytes[0];
 8001b6e:	783b      	ldrb	r3, [r7, #0]
 8001b70:	743b      	strb	r3, [r7, #16]
	  	ADC_Tx_Buff[13] = bytes[1];
 8001b72:	787b      	ldrb	r3, [r7, #1]
 8001b74:	747b      	strb	r3, [r7, #17]

	  	for(uint8_t i = 0; i <= 13; i++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	75bb      	strb	r3, [r7, #22]
 8001b7a:	e00b      	b.n	8001b94 <Serial_out+0x24c>
	  	{
	  	  	 Tx_Data_Sum += ADC_Tx_Buff[i];
 8001b7c:	7dbb      	ldrb	r3, [r7, #22]
 8001b7e:	3320      	adds	r3, #32
 8001b80:	443b      	add	r3, r7
 8001b82:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001b86:	461a      	mov	r2, r3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	61fb      	str	r3, [r7, #28]
	  	for(uint8_t i = 0; i <= 13; i++)
 8001b8e:	7dbb      	ldrb	r3, [r7, #22]
 8001b90:	3301      	adds	r3, #1
 8001b92:	75bb      	strb	r3, [r7, #22]
 8001b94:	7dbb      	ldrb	r3, [r7, #22]
 8001b96:	2b0d      	cmp	r3, #13
 8001b98:	d9f0      	bls.n	8001b7c <Serial_out+0x234>
	  	}
	  	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	74fb      	strb	r3, [r7, #19]
	  	ADC_Tx_Buff[14] = Check_Sum ;
 8001b9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ba0:	74bb      	strb	r3, [r7, #18]
	  	HAL_UART_Transmit(&huart2,ADC_Tx_Buff,sizeof(ADC_Tx_Buff),100);
 8001ba2:	1d39      	adds	r1, r7, #4
 8001ba4:	2364      	movs	r3, #100	; 0x64
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	4824      	ldr	r0, [pc, #144]	; (8001c3c <Serial_out+0x2f4>)
 8001baa:	f005 fe91 	bl	80078d0 <HAL_UART_Transmit>
	  	Check_Sum = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	74fb      	strb	r3, [r7, #19]
	  	Tx_Data_Sum = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]


	  	ADC_Tx_Buff[6] = 0x6F;
 8001bb6:	236f      	movs	r3, #111	; 0x6f
 8001bb8:	72bb      	strb	r3, [r7, #10]
	  	bytes[0] = ADCValue1_6 >> 8;
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <Serial_out+0x30c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	703b      	strb	r3, [r7, #0]
	  	bytes[1] = ADCValue1_6 & 0x00FF;
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <Serial_out+0x30c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	707b      	strb	r3, [r7, #1]
	  	ADC_Tx_Buff[12] = bytes[0];
 8001bcc:	783b      	ldrb	r3, [r7, #0]
 8001bce:	743b      	strb	r3, [r7, #16]
	  	ADC_Tx_Buff[13] = bytes[1];
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	747b      	strb	r3, [r7, #17]

	  	for(uint8_t i = 0; i <= 13; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	757b      	strb	r3, [r7, #21]
 8001bd8:	e00b      	b.n	8001bf2 <Serial_out+0x2aa>
	  	{
	  	  	 Tx_Data_Sum += ADC_Tx_Buff[i];
 8001bda:	7d7b      	ldrb	r3, [r7, #21]
 8001bdc:	3320      	adds	r3, #32
 8001bde:	443b      	add	r3, r7
 8001be0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001be4:	461a      	mov	r2, r3
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	61fb      	str	r3, [r7, #28]
	  	for(uint8_t i = 0; i <= 13; i++)
 8001bec:	7d7b      	ldrb	r3, [r7, #21]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	757b      	strb	r3, [r7, #21]
 8001bf2:	7d7b      	ldrb	r3, [r7, #21]
 8001bf4:	2b0d      	cmp	r3, #13
 8001bf6:	d9f0      	bls.n	8001bda <Serial_out+0x292>
	  	}
	  	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	74fb      	strb	r3, [r7, #19]
	  	ADC_Tx_Buff[14] = Check_Sum ;
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	74bb      	strb	r3, [r7, #18]
	  	HAL_UART_Transmit(&huart2,ADC_Tx_Buff,sizeof(ADC_Tx_Buff),100);
 8001c00:	1d39      	adds	r1, r7, #4
 8001c02:	2364      	movs	r3, #100	; 0x64
 8001c04:	220f      	movs	r2, #15
 8001c06:	480d      	ldr	r0, [pc, #52]	; (8001c3c <Serial_out+0x2f4>)
 8001c08:	f005 fe62 	bl	80078d0 <HAL_UART_Transmit>
	  	Check_Sum = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	74fb      	strb	r3, [r7, #19]
	  	Tx_Data_Sum = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]


	  	ADC_Tx_Buff[6] = 0x6A;
 8001c14:	236a      	movs	r3, #106	; 0x6a
 8001c16:	72bb      	strb	r3, [r7, #10]
	  	bytes[0] = ADCValue1_7 >> 8;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <Serial_out+0x310>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	703b      	strb	r3, [r7, #0]
	  	bytes[1] = ADCValue1_7 & 0x00FF;
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <Serial_out+0x310>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	707b      	strb	r3, [r7, #1]
	  	ADC_Tx_Buff[12] = bytes[0];
 8001c2a:	783b      	ldrb	r3, [r7, #0]
 8001c2c:	743b      	strb	r3, [r7, #16]
	  	ADC_Tx_Buff[13] = bytes[1];
 8001c2e:	787b      	ldrb	r3, [r7, #1]
 8001c30:	747b      	strb	r3, [r7, #17]

	  	for(uint8_t i =0; i <= 13; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	753b      	strb	r3, [r7, #20]
 8001c36:	e01d      	b.n	8001c74 <Serial_out+0x32c>
 8001c38:	200002a4 	.word	0x200002a4
 8001c3c:	20000444 	.word	0x20000444
 8001c40:	200002a8 	.word	0x200002a8
 8001c44:	200002ac 	.word	0x200002ac
 8001c48:	200002b0 	.word	0x200002b0
 8001c4c:	200002b4 	.word	0x200002b4
 8001c50:	200002b8 	.word	0x200002b8
 8001c54:	200002bc 	.word	0x200002bc
 8001c58:	200002c0 	.word	0x200002c0
	  	{
	  	  	 Tx_Data_Sum += ADC_Tx_Buff[i];
 8001c5c:	7d3b      	ldrb	r3, [r7, #20]
 8001c5e:	3320      	adds	r3, #32
 8001c60:	443b      	add	r3, r7
 8001c62:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001c66:	461a      	mov	r2, r3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	61fb      	str	r3, [r7, #28]
	  	for(uint8_t i =0; i <= 13; i++)
 8001c6e:	7d3b      	ldrb	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	753b      	strb	r3, [r7, #20]
 8001c74:	7d3b      	ldrb	r3, [r7, #20]
 8001c76:	2b0d      	cmp	r3, #13
 8001c78:	d9f0      	bls.n	8001c5c <Serial_out+0x314>
	  	}
	  	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	74fb      	strb	r3, [r7, #19]
	  	ADC_Tx_Buff[14] = Check_Sum ;
 8001c7e:	7cfb      	ldrb	r3, [r7, #19]
 8001c80:	74bb      	strb	r3, [r7, #18]
	  	HAL_UART_Transmit(&huart2,ADC_Tx_Buff,sizeof(ADC_Tx_Buff),100);
 8001c82:	1d39      	adds	r1, r7, #4
 8001c84:	2364      	movs	r3, #100	; 0x64
 8001c86:	220f      	movs	r2, #15
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <Serial_out+0x358>)
 8001c8a:	f005 fe21 	bl	80078d0 <HAL_UART_Transmit>
	  	Check_Sum = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	74fb      	strb	r3, [r7, #19]
	  	Tx_Data_Sum = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
}
 8001c96:	bf00      	nop
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000444 	.word	0x20000444

08001ca4 <Tuya_Reset>:
/*
 *
 */

void Tuya_Reset()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
      if(Tuya_Reset_Flag == 1)
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <Tuya_Reset+0x30>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10f      	bne.n	8001cd0 <Tuya_Reset+0x2c>
      {
         Tuya_Reset_Flag = 0;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <Tuya_Reset+0x30>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
         HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2101      	movs	r1, #1
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <Tuya_Reset+0x34>)
 8001cbc:	f003 f81d 	bl	8004cfa <HAL_GPIO_WritePin>
         HAL_Delay(Delay);
 8001cc0:	2032      	movs	r0, #50	; 0x32
 8001cc2:	f002 f845 	bl	8003d50 <HAL_Delay>
         HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <Tuya_Reset+0x34>)
 8001ccc:	f003 f815 	bl	8004cfa <HAL_GPIO_WritePin>
      }
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000295 	.word	0x20000295
 8001cd8:	40011400 	.word	0x40011400

08001cdc <Touch_Read>:
/***********************SWITCH_OPERATION**************************/
void Touch_Read(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
	/*********************************** SWITCH1 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH0_GPIO_Port,TOUCH0_Pin))
 8001ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce6:	48a0      	ldr	r0, [pc, #640]	; (8001f68 <Touch_Read+0x28c>)
 8001ce8:	f002 fff0 	bl	8004ccc <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d04a      	beq.n	8001d88 <Touch_Read+0xac>
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d158      	bne.n	8001da8 <Touch_Read+0xcc>
	{
			static uint32_t Start_Time = 0;
			static uint8_t long_press = 0;
		case GPIO_PIN_SET:
			;
			if(Touch_Flag[0] == 0)             //OFF _CHECKING
 8001cf6:	4b9d      	ldr	r3, [pc, #628]	; (8001f6c <Touch_Read+0x290>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <Touch_Read+0x3c>
			{
				switch_operation(Switch_1,SW_ON);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	2001      	movs	r0, #1
 8001d02:	f000 fa55 	bl	80021b0 <switch_operation>

				Start_Time=HAL_GetTick();
 8001d06:	f002 f819 	bl	8003d3c <HAL_GetTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a98      	ldr	r2, [pc, #608]	; (8001f70 <Touch_Read+0x294>)
 8001d0e:	6013      	str	r3, [r2, #0]

				long_press = 0;
 8001d10:	4b98      	ldr	r3, [pc, #608]	; (8001f74 <Touch_Read+0x298>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e00f      	b.n	8001d38 <Touch_Read+0x5c>
			}
			else if(Touch_Flag[0] == 2)          //ON
 8001d18:	4b94      	ldr	r3, [pc, #592]	; (8001f6c <Touch_Read+0x290>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d10b      	bne.n	8001d38 <Touch_Read+0x5c>
			{
				switch_operation(Switch_1,SW_OFF);
 8001d20:	2100      	movs	r1, #0
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 fa44 	bl	80021b0 <switch_operation>
				Start_Time=HAL_GetTick();
 8001d28:	f002 f808 	bl	8003d3c <HAL_GetTick>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <Touch_Read+0x294>)
 8001d30:	6013      	str	r3, [r2, #0]
				long_press = 0;
 8001d32:	4b90      	ldr	r3, [pc, #576]	; (8001f74 <Touch_Read+0x298>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
			}
			if((HAL_GPIO_ReadPin(TOUCH0_GPIO_Port,TOUCH0_Pin)==GPIO_PIN_SET))
 8001d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d3c:	488a      	ldr	r0, [pc, #552]	; (8001f68 <Touch_Read+0x28c>)
 8001d3e:	f002 ffc5 	bl	8004ccc <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d11b      	bne.n	8001d80 <Touch_Read+0xa4>
			{
				if(Touch_Flag[0]==1||Touch_Flag[0]==3)
 8001d48:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <Touch_Read+0x290>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d003      	beq.n	8001d58 <Touch_Read+0x7c>
 8001d50:	4b86      	ldr	r3, [pc, #536]	; (8001f6c <Touch_Read+0x290>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d113      	bne.n	8001d80 <Touch_Read+0xa4>
				{
					if(long_press==0)
 8001d58:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <Touch_Read+0x298>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10f      	bne.n	8001d80 <Touch_Read+0xa4>
					{
					   uint32_t now_time = HAL_GetTick();
 8001d60:	f001 ffec 	bl	8003d3c <HAL_GetTick>
 8001d64:	6078      	str	r0, [r7, #4]

						if((now_time-Start_Time) > 5000)
 8001d66:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <Touch_Read+0x294>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d904      	bls.n	8001d80 <Touch_Read+0xa4>
						{
							long_press=1;
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <Touch_Read+0x298>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
							switch_long_press();	/////////LONG_PRESS_FOR WIFI/////////////
 8001d7c:	f000 fcfa 	bl	8002774 <switch_long_press>

						}
					 }
				 }
		    }
			HAL_Delay(10);
 8001d80:	200a      	movs	r0, #10
 8001d82:	f001 ffe5 	bl	8003d50 <HAL_Delay>
			break;
 8001d86:	e012      	b.n	8001dae <Touch_Read+0xd2>
		case GPIO_PIN_RESET:
			;
			if(Touch_Flag[0] == 1)
 8001d88:	4b78      	ldr	r3, [pc, #480]	; (8001f6c <Touch_Read+0x290>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d103      	bne.n	8001d98 <Touch_Read+0xbc>
			{
				Touch_Flag[0] = 2;
 8001d90:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <Touch_Read+0x290>)
 8001d92:	2202      	movs	r2, #2
 8001d94:	701a      	strb	r2, [r3, #0]
			}
			else if(Touch_Flag[0] == 3)
			{
				Touch_Flag[0] = 0;
			}
		break;
 8001d96:	e009      	b.n	8001dac <Touch_Read+0xd0>
			else if(Touch_Flag[0] == 3)
 8001d98:	4b74      	ldr	r3, [pc, #464]	; (8001f6c <Touch_Read+0x290>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d105      	bne.n	8001dac <Touch_Read+0xd0>
				Touch_Flag[0] = 0;
 8001da0:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <Touch_Read+0x290>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
		break;
 8001da6:	e001      	b.n	8001dac <Touch_Read+0xd0>
	default:
		break;
 8001da8:	bf00      	nop
 8001daa:	e000      	b.n	8001dae <Touch_Read+0xd2>
		break;
 8001dac:	bf00      	nop
	}
/*********************************** SWITCH 2 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH1_GPIO_Port,TOUCH1_Pin))
 8001dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001db2:	4871      	ldr	r0, [pc, #452]	; (8001f78 <Touch_Read+0x29c>)
 8001db4:	f002 ff8a 	bl	8004ccc <HAL_GPIO_ReadPin>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d042      	beq.n	8001e44 <Touch_Read+0x168>
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d150      	bne.n	8001e64 <Touch_Read+0x188>
	{
			static uint32_t Start_Time = 0;
			static uint8_t long_press = 0;
		case GPIO_PIN_SET:
			;
			if(Touch_Flag[1]==0)
 8001dc2:	4b6a      	ldr	r3, [pc, #424]	; (8001f6c <Touch_Read+0x290>)
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <Touch_Read+0x108>
			{
				switch_operation(Switch_2, SW_ON);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f000 f9ef 	bl	80021b0 <switch_operation>
				long_press = 0;
 8001dd2:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <Touch_Read+0x2a0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
				Start_Time = HAL_GetTick();
 8001dd8:	f001 ffb0 	bl	8003d3c <HAL_GetTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a68      	ldr	r2, [pc, #416]	; (8001f80 <Touch_Read+0x2a4>)
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00f      	b.n	8001e04 <Touch_Read+0x128>
			}
			else if(Touch_Flag[1]==2)
 8001de4:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <Touch_Read+0x290>)
 8001de6:	785b      	ldrb	r3, [r3, #1]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d10b      	bne.n	8001e04 <Touch_Read+0x128>
			{
				switch_operation(Switch_2, SW_OFF);
 8001dec:	2100      	movs	r1, #0
 8001dee:	2002      	movs	r0, #2
 8001df0:	f000 f9de 	bl	80021b0 <switch_operation>
				long_press = 0;
 8001df4:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <Touch_Read+0x2a0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
				 Start_Time = HAL_GetTick();
 8001dfa:	f001 ff9f 	bl	8003d3c <HAL_GetTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a5f      	ldr	r2, [pc, #380]	; (8001f80 <Touch_Read+0x2a4>)
 8001e02:	6013      	str	r3, [r2, #0]
			}
			if(HAL_GPIO_ReadPin(TOUCH1_GPIO_Port,TOUCH1_Pin)==GPIO_PIN_SET)
 8001e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e08:	485b      	ldr	r0, [pc, #364]	; (8001f78 <Touch_Read+0x29c>)
 8001e0a:	f002 ff5f 	bl	8004ccc <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d113      	bne.n	8001e3c <Touch_Read+0x160>
			{
				if(long_press==0)
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <Touch_Read+0x2a0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10f      	bne.n	8001e3c <Touch_Read+0x160>
				{
					uint32_t  now_time=HAL_GetTick();
 8001e1c:	f001 ff8e 	bl	8003d3c <HAL_GetTick>
 8001e20:	6038      	str	r0, [r7, #0]

					if((now_time-Start_Time)>5000)
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <Touch_Read+0x2a4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d904      	bls.n	8001e3c <Touch_Read+0x160>
					{
						long_press=1;
 8001e32:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <Touch_Read+0x2a0>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
						switch_long_press();             /////////LONG_PRESS_FOR WIFI/////////////
 8001e38:	f000 fc9c 	bl	8002774 <switch_long_press>

					}

				}
			}
			HAL_Delay(10);
 8001e3c:	200a      	movs	r0, #10
 8001e3e:	f001 ff87 	bl	8003d50 <HAL_Delay>
			break;
 8001e42:	e012      	b.n	8001e6a <Touch_Read+0x18e>

		case GPIO_PIN_RESET:
			;
			if(Touch_Flag[1]==1) //off
 8001e44:	4b49      	ldr	r3, [pc, #292]	; (8001f6c <Touch_Read+0x290>)
 8001e46:	785b      	ldrb	r3, [r3, #1]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d103      	bne.n	8001e54 <Touch_Read+0x178>
			{
				Touch_Flag[1]=2;
 8001e4c:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <Touch_Read+0x290>)
 8001e4e:	2202      	movs	r2, #2
 8001e50:	705a      	strb	r2, [r3, #1]
			}
			else if(Touch_Flag[1]==3) //on
			{
				Touch_Flag[1]=0;
			}
			break;
 8001e52:	e009      	b.n	8001e68 <Touch_Read+0x18c>
			else if(Touch_Flag[1]==3) //on
 8001e54:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <Touch_Read+0x290>)
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d105      	bne.n	8001e68 <Touch_Read+0x18c>
				Touch_Flag[1]=0;
 8001e5c:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <Touch_Read+0x290>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	705a      	strb	r2, [r3, #1]
			break;
 8001e62:	e001      	b.n	8001e68 <Touch_Read+0x18c>
		default:
			break;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <Touch_Read+0x18e>
			break;
 8001e68:	bf00      	nop
	}
	/*********************************** SWITCH 3 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH2_GPIO_Port,TOUCH2_Pin))
 8001e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6e:	4842      	ldr	r0, [pc, #264]	; (8001f78 <Touch_Read+0x29c>)
 8001e70:	f002 ff2c 	bl	8004ccc <HAL_GPIO_ReadPin>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <Touch_Read+0x1ca>
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d122      	bne.n	8001ec4 <Touch_Read+0x1e8>
	{
		case GPIO_PIN_SET:
			;
			 if(Touch_Flag[2]==0)      /************0,1,2,3**************/
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <Touch_Read+0x290>)
 8001e80:	789b      	ldrb	r3, [r3, #2]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <Touch_Read+0x1b2>
				 {

				  switch_operation(Switch_3, SW_ON);
 8001e86:	2101      	movs	r1, #1
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f991 	bl	80021b0 <switch_operation>

				 }
			 if(Touch_Flag[2]==2)
 8001e8e:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <Touch_Read+0x290>)
 8001e90:	789b      	ldrb	r3, [r3, #2]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d103      	bne.n	8001e9e <Touch_Read+0x1c2>
				 {
				  switch_operation(Switch_3, SW_OFF);
 8001e96:	2100      	movs	r1, #0
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f989 	bl	80021b0 <switch_operation>

				 }
			 HAL_Delay(10);
 8001e9e:	200a      	movs	r0, #10
 8001ea0:	f001 ff56 	bl	8003d50 <HAL_Delay>
			 break;
 8001ea4:	e011      	b.n	8001eca <Touch_Read+0x1ee>
		case GPIO_PIN_RESET:
			;
				 if(Touch_Flag[2]==1)
 8001ea6:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <Touch_Read+0x290>)
 8001ea8:	789b      	ldrb	r3, [r3, #2]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <Touch_Read+0x1d8>
				 {
					 Touch_Flag[2]=2;
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <Touch_Read+0x290>)
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	709a      	strb	r2, [r3, #2]

				 }
				 if(Touch_Flag[2]==3)
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <Touch_Read+0x290>)
 8001eb6:	789b      	ldrb	r3, [r3, #2]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d105      	bne.n	8001ec8 <Touch_Read+0x1ec>
				 {
			        Touch_Flag[2]=0;
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <Touch_Read+0x290>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	709a      	strb	r2, [r3, #2]
				 }
				 break;
 8001ec2:	e001      	b.n	8001ec8 <Touch_Read+0x1ec>
	   default:
			break;
 8001ec4:	bf00      	nop
 8001ec6:	e000      	b.n	8001eca <Touch_Read+0x1ee>
				 break;
 8001ec8:	bf00      	nop

	}
	/*********************************** SWITCH 4 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH3_GPIO_Port,TOUCH3_Pin))
 8001eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ece:	482a      	ldr	r0, [pc, #168]	; (8001f78 <Touch_Read+0x29c>)
 8001ed0:	f002 fefc 	bl	8004ccc <HAL_GPIO_ReadPin>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <Touch_Read+0x22a>
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d122      	bne.n	8001f24 <Touch_Read+0x248>
	{
	  case GPIO_PIN_SET:
		  ;
		 if(Touch_Flag[3]==0)
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <Touch_Read+0x290>)
 8001ee0:	78db      	ldrb	r3, [r3, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <Touch_Read+0x212>
		 	 {
			     switch_operation(Switch_4, SW_ON);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2004      	movs	r0, #4
 8001eea:	f000 f961 	bl	80021b0 <switch_operation>
		 	 }
		 if(Touch_Flag[3]==2)
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <Touch_Read+0x290>)
 8001ef0:	78db      	ldrb	r3, [r3, #3]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d103      	bne.n	8001efe <Touch_Read+0x222>
			 {
				 switch_operation(Switch_4, SW_OFF);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2004      	movs	r0, #4
 8001efa:	f000 f959 	bl	80021b0 <switch_operation>
			 }
		 HAL_Delay(10);
 8001efe:	200a      	movs	r0, #10
 8001f00:	f001 ff26 	bl	8003d50 <HAL_Delay>
		 break;
 8001f04:	e011      	b.n	8001f2a <Touch_Read+0x24e>
	 case GPIO_PIN_RESET:
		 ;
			 if(Touch_Flag[3]==1)
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <Touch_Read+0x290>)
 8001f08:	78db      	ldrb	r3, [r3, #3]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <Touch_Read+0x238>
			 {
				 Touch_Flag[3]=2;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <Touch_Read+0x290>)
 8001f10:	2202      	movs	r2, #2
 8001f12:	70da      	strb	r2, [r3, #3]

			 }
			 if(Touch_Flag[3]==3)
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <Touch_Read+0x290>)
 8001f16:	78db      	ldrb	r3, [r3, #3]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d105      	bne.n	8001f28 <Touch_Read+0x24c>
			 {
		         Touch_Flag[3]=0;
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <Touch_Read+0x290>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	70da      	strb	r2, [r3, #3]
			 }
		break;
 8001f22:	e001      	b.n	8001f28 <Touch_Read+0x24c>
	default:
		break;
 8001f24:	bf00      	nop
 8001f26:	e000      	b.n	8001f2a <Touch_Read+0x24e>
		break;
 8001f28:	bf00      	nop

	}
	/*********************************** SWITCH 5 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH4_GPIO_Port,TOUCH4_Pin))
 8001f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f2e:	4812      	ldr	r0, [pc, #72]	; (8001f78 <Touch_Read+0x29c>)
 8001f30:	f002 fecc 	bl	8004ccc <HAL_GPIO_ReadPin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d024      	beq.n	8001f84 <Touch_Read+0x2a8>
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d131      	bne.n	8001fa2 <Touch_Read+0x2c6>
	{
	case GPIO_PIN_SET:
		;
		 if(Touch_Flag[4]==0)
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <Touch_Read+0x290>)
 8001f40:	791b      	ldrb	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <Touch_Read+0x272>
		 	  {
			      switch_operation(Switch_5, SW_ON);
 8001f46:	2101      	movs	r1, #1
 8001f48:	2005      	movs	r0, #5
 8001f4a:	f000 f931 	bl	80021b0 <switch_operation>
		 	  }
		 if(Touch_Flag[4]==2)
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <Touch_Read+0x290>)
 8001f50:	791b      	ldrb	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d103      	bne.n	8001f5e <Touch_Read+0x282>
		 	{
		 		 switch_operation(Switch_5, SW_OFF);
 8001f56:	2100      	movs	r1, #0
 8001f58:	2005      	movs	r0, #5
 8001f5a:	f000 f929 	bl	80021b0 <switch_operation>
		 	}
		 HAL_Delay(10);
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f001 fef6 	bl	8003d50 <HAL_Delay>
		 break;
 8001f64:	e020      	b.n	8001fa8 <Touch_Read+0x2cc>
 8001f66:	bf00      	nop
 8001f68:	40011800 	.word	0x40011800
 8001f6c:	20000114 	.word	0x20000114
 8001f70:	2000030c 	.word	0x2000030c
 8001f74:	20000310 	.word	0x20000310
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	20000311 	.word	0x20000311
 8001f80:	20000314 	.word	0x20000314
	case GPIO_PIN_RESET:
		;
			 if(Touch_Flag[4]==1)
 8001f84:	4b82      	ldr	r3, [pc, #520]	; (8002190 <Touch_Read+0x4b4>)
 8001f86:	791b      	ldrb	r3, [r3, #4]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d102      	bne.n	8001f92 <Touch_Read+0x2b6>
			 {
				 Touch_Flag[4]=2;
 8001f8c:	4b80      	ldr	r3, [pc, #512]	; (8002190 <Touch_Read+0x4b4>)
 8001f8e:	2202      	movs	r2, #2
 8001f90:	711a      	strb	r2, [r3, #4]

			 }
			 if(Touch_Flag[4]==3)
 8001f92:	4b7f      	ldr	r3, [pc, #508]	; (8002190 <Touch_Read+0x4b4>)
 8001f94:	791b      	ldrb	r3, [r3, #4]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d105      	bne.n	8001fa6 <Touch_Read+0x2ca>
			 {
		        Touch_Flag[4]=0;
 8001f9a:	4b7d      	ldr	r3, [pc, #500]	; (8002190 <Touch_Read+0x4b4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	711a      	strb	r2, [r3, #4]
			 }
			 break;
 8001fa0:	e001      	b.n	8001fa6 <Touch_Read+0x2ca>
	default:
		break;
 8001fa2:	bf00      	nop
 8001fa4:	e000      	b.n	8001fa8 <Touch_Read+0x2cc>
			 break;
 8001fa6:	bf00      	nop

	}
	/*********************************** SWITCH 6 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH5_GPIO_Port,TOUCH5_Pin))
 8001fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fac:	4879      	ldr	r0, [pc, #484]	; (8002194 <Touch_Read+0x4b8>)
 8001fae:	f002 fe8d 	bl	8004ccc <HAL_GPIO_ReadPin>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <Touch_Read+0x308>
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d122      	bne.n	8002002 <Touch_Read+0x326>
		{
		case GPIO_PIN_SET:
			;
			 if(Touch_Flag[5]==0)
 8001fbc:	4b74      	ldr	r3, [pc, #464]	; (8002190 <Touch_Read+0x4b4>)
 8001fbe:	795b      	ldrb	r3, [r3, #5]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <Touch_Read+0x2f0>
			 	  {
				     switch_operation(Switch_6, SW_ON);
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	2006      	movs	r0, #6
 8001fc8:	f000 f8f2 	bl	80021b0 <switch_operation>
			 	  }
			 if(Touch_Flag[5]==2)
 8001fcc:	4b70      	ldr	r3, [pc, #448]	; (8002190 <Touch_Read+0x4b4>)
 8001fce:	795b      	ldrb	r3, [r3, #5]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d103      	bne.n	8001fdc <Touch_Read+0x300>
			 	{
			 		switch_operation(Switch_6, SW_OFF);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2006      	movs	r0, #6
 8001fd8:	f000 f8ea 	bl	80021b0 <switch_operation>
			 	}
			 HAL_Delay(10);
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f001 feb7 	bl	8003d50 <HAL_Delay>
			 break;
 8001fe2:	e011      	b.n	8002008 <Touch_Read+0x32c>
		case GPIO_PIN_RESET:
			;
				 if(Touch_Flag[5]==1)
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <Touch_Read+0x4b4>)
 8001fe6:	795b      	ldrb	r3, [r3, #5]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <Touch_Read+0x316>
				 {
					 Touch_Flag[5]=2;
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <Touch_Read+0x4b4>)
 8001fee:	2202      	movs	r2, #2
 8001ff0:	715a      	strb	r2, [r3, #5]

				 }
				 if(Touch_Flag[5]==3)
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <Touch_Read+0x4b4>)
 8001ff4:	795b      	ldrb	r3, [r3, #5]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d105      	bne.n	8002006 <Touch_Read+0x32a>
				 {
			         Touch_Flag[5]=0;
 8001ffa:	4b65      	ldr	r3, [pc, #404]	; (8002190 <Touch_Read+0x4b4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	715a      	strb	r2, [r3, #5]

				 }
				 break;
 8002000:	e001      	b.n	8002006 <Touch_Read+0x32a>
		default:
			break;
 8002002:	bf00      	nop
 8002004:	e000      	b.n	8002008 <Touch_Read+0x32c>
				 break;
 8002006:	bf00      	nop

		}
	/***********************************  DIMMER SWITCH  ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH6_GPIO_Port,TOUCH6_Pin))
 8002008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800200c:	4861      	ldr	r0, [pc, #388]	; (8002194 <Touch_Read+0x4b8>)
 800200e:	f002 fe5d 	bl	8004ccc <HAL_GPIO_ReadPin>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d016      	beq.n	8002046 <Touch_Read+0x36a>
 8002018:	2b01      	cmp	r3, #1
 800201a:	d124      	bne.n	8002066 <Touch_Read+0x38a>
		{
		 case GPIO_PIN_SET:

			 if(Touch_Flag[6]==0)      //OFF
 800201c:	4b5c      	ldr	r3, [pc, #368]	; (8002190 <Touch_Read+0x4b4>)
 800201e:	799b      	ldrb	r3, [r3, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <Touch_Read+0x352>
			 {
			     switch_operation(Switch_7,SW_ON);
 8002024:	2101      	movs	r1, #1
 8002026:	2007      	movs	r0, #7
 8002028:	f000 f8c2 	bl	80021b0 <switch_operation>
 800202c:	e007      	b.n	800203e <Touch_Read+0x362>
			 }
			 else if(Touch_Flag[6]==2)     //ON
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <Touch_Read+0x4b4>)
 8002030:	799b      	ldrb	r3, [r3, #6]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d103      	bne.n	800203e <Touch_Read+0x362>
			 {
				 switch_operation(Switch_7,SW_OFF);
 8002036:	2100      	movs	r1, #0
 8002038:	2007      	movs	r0, #7
 800203a:	f000 f8b9 	bl	80021b0 <switch_operation>
			 }
			 HAL_Delay(10);
 800203e:	200a      	movs	r0, #10
 8002040:	f001 fe86 	bl	8003d50 <HAL_Delay>
			 break;
 8002044:	e012      	b.n	800206c <Touch_Read+0x390>
		 case GPIO_PIN_RESET:

			 if(Touch_Flag[6]==1)
 8002046:	4b52      	ldr	r3, [pc, #328]	; (8002190 <Touch_Read+0x4b4>)
 8002048:	799b      	ldrb	r3, [r3, #6]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d103      	bne.n	8002056 <Touch_Read+0x37a>
			 {
				 Touch_Flag[6]=2;
 800204e:	4b50      	ldr	r3, [pc, #320]	; (8002190 <Touch_Read+0x4b4>)
 8002050:	2202      	movs	r2, #2
 8002052:	719a      	strb	r2, [r3, #6]
			 }
			 else if(Touch_Flag[6]==3)
			 {
				Touch_Flag[6]=0;
			 }
			 break;
 8002054:	e009      	b.n	800206a <Touch_Read+0x38e>
			 else if(Touch_Flag[6]==3)
 8002056:	4b4e      	ldr	r3, [pc, #312]	; (8002190 <Touch_Read+0x4b4>)
 8002058:	799b      	ldrb	r3, [r3, #6]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d105      	bne.n	800206a <Touch_Read+0x38e>
				Touch_Flag[6]=0;
 800205e:	4b4c      	ldr	r3, [pc, #304]	; (8002190 <Touch_Read+0x4b4>)
 8002060:	2200      	movs	r2, #0
 8002062:	719a      	strb	r2, [r3, #6]
			 break;
 8002064:	e001      	b.n	800206a <Touch_Read+0x38e>
		default:
			break;
 8002066:	bf00      	nop
 8002068:	e000      	b.n	800206c <Touch_Read+0x390>
			 break;
 800206a:	bf00      	nop
		//DIMMER SWITCH OPERATIONS
		}
		if(dimmer_flag==1)
 800206c:	4b4a      	ldr	r3, [pc, #296]	; (8002198 <Touch_Read+0x4bc>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 8081 	bne.w	8002178 <Touch_Read+0x49c>
			{
				switch(HAL_GPIO_ReadPin(DIMMER_UP_GPIO_Port, DIMMER_UP_Pin))    /***************DIMMMER SWITCH_1 UP*******************/
 8002076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207a:	4846      	ldr	r0, [pc, #280]	; (8002194 <Touch_Read+0x4b8>)
 800207c:	f002 fe26 	bl	8004ccc <HAL_GPIO_ReadPin>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d028      	beq.n	80020d8 <Touch_Read+0x3fc>
 8002086:	2b01      	cmp	r3, #1
 8002088:	d133      	bne.n	80020f2 <Touch_Read+0x416>
				{
					case GPIO_PIN_SET:
					 if(Touch_Flag[7]==0)
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <Touch_Read+0x4b4>)
 800208c:	79db      	ldrb	r3, [r3, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d131      	bne.n	80020f6 <Touch_Read+0x41a>
					 {
						 Touch_Flag[7] = 1;
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <Touch_Read+0x4b4>)
 8002094:	2201      	movs	r2, #1
 8002096:	71da      	strb	r2, [r3, #7]
						 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MAX_PWM);
 8002098:	4b40      	ldr	r3, [pc, #256]	; (800219c <Touch_Read+0x4c0>)
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <Touch_Read+0x4c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34

						 if(dimmer_level < 100)
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <Touch_Read+0x4c8>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b63      	cmp	r3, #99	; 0x63
 80020a8:	d825      	bhi.n	80020f6 <Touch_Read+0x41a>
							 {
							     dimmer_level = dimmer_level + 5;
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <Touch_Read+0x4c8>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	3305      	adds	r3, #5
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <Touch_Read+0x4c8>)
 80020b4:	701a      	strb	r2, [r3, #0]
							     if(dimmer_level > 100)
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <Touch_Read+0x4c8>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d902      	bls.n	80020c4 <Touch_Read+0x3e8>
							     {
							    	 dimmer_level = 100;
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <Touch_Read+0x4c8>)
 80020c0:	2264      	movs	r2, #100	; 0x64
 80020c2:	701a      	strb	r2, [r3, #0]
							     }
							     dimmer_operation(SW_ON,dimmer_level);
 80020c4:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <Touch_Read+0x4c8>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	2001      	movs	r0, #1
 80020cc:	f000 fa28 	bl	8002520 <dimmer_operation>
							     HAL_Delay(10);
 80020d0:	200a      	movs	r0, #10
 80020d2:	f001 fe3d 	bl	8003d50 <HAL_Delay>
							 }

					 }
					break;
 80020d6:	e00e      	b.n	80020f6 <Touch_Read+0x41a>
					case GPIO_PIN_RESET:
						if(Touch_Flag[7]==1)
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <Touch_Read+0x4b4>)
 80020da:	79db      	ldrb	r3, [r3, #7]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10c      	bne.n	80020fa <Touch_Read+0x41e>
						{
							Touch_Flag[7]=0;
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <Touch_Read+0x4b4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	71da      	strb	r2, [r3, #7]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <Touch_Read+0x4cc>)
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <Touch_Read+0x4c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
						}
						break;
 80020f0:	e003      	b.n	80020fa <Touch_Read+0x41e>
					default:
						break;
 80020f2:	bf00      	nop
 80020f4:	e002      	b.n	80020fc <Touch_Read+0x420>
					break;
 80020f6:	bf00      	nop
 80020f8:	e000      	b.n	80020fc <Touch_Read+0x420>
						break;
 80020fa:	bf00      	nop
				}

				switch(HAL_GPIO_ReadPin(DIMMER_DOWN_GPIO_Port,DIMMER_DOWN_Pin))                    /***************DIMMMER SWITCH_2 DOWN*******************/
 80020fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002100:	4824      	ldr	r0, [pc, #144]	; (8002194 <Touch_Read+0x4b8>)
 8002102:	f002 fde3 	bl	8004ccc <HAL_GPIO_ReadPin>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d028      	beq.n	800215e <Touch_Read+0x482>
 800210c:	2b01      	cmp	r3, #1
 800210e:	d135      	bne.n	800217c <Touch_Read+0x4a0>
				{
					case GPIO_PIN_SET:
					 if(Touch_Flag[8]==0)
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <Touch_Read+0x4b4>)
 8002112:	7a1b      	ldrb	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d133      	bne.n	8002180 <Touch_Read+0x4a4>
					 {
						 Touch_Flag[8]=1;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <Touch_Read+0x4b4>)
 800211a:	2201      	movs	r2, #1
 800211c:	721a      	strb	r2, [r3, #8]
						 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM);
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <Touch_Read+0x4c0>)
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <Touch_Read+0x4d0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
						 if(dimmer_level > 1)
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <Touch_Read+0x4c8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d927      	bls.n	8002180 <Touch_Read+0x4a4>
							 {
							     dimmer_level = dimmer_level - 5;
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <Touch_Read+0x4c8>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	3b05      	subs	r3, #5
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <Touch_Read+0x4c8>)
 800213a:	701a      	strb	r2, [r3, #0]
							     if(dimmer_level < 1)
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <Touch_Read+0x4c8>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <Touch_Read+0x46e>
							     {
							    	 dimmer_level = 1;
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <Touch_Read+0x4c8>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
							     }
							     dimmer_operation(SW_ON,dimmer_level);
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <Touch_Read+0x4c8>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	2001      	movs	r0, #1
 8002152:	f000 f9e5 	bl	8002520 <dimmer_operation>
							     HAL_Delay(10);
 8002156:	200a      	movs	r0, #10
 8002158:	f001 fdfa 	bl	8003d50 <HAL_Delay>
							 }
					 }

					break;
 800215c:	e010      	b.n	8002180 <Touch_Read+0x4a4>
					case GPIO_PIN_RESET:
						if(Touch_Flag[8]==1)
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <Touch_Read+0x4b4>)
 8002160:	7a1b      	ldrb	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d10e      	bne.n	8002184 <Touch_Read+0x4a8>
						{
							Touch_Flag[8]=0;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <Touch_Read+0x4b4>)
 8002168:	2200      	movs	r2, #0
 800216a:	721a      	strb	r2, [r3, #8]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <Touch_Read+0x4cc>)
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <Touch_Read+0x4d0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
						}
						break;
 8002176:	e005      	b.n	8002184 <Touch_Read+0x4a8>
					default:
						break;

				}
			}
 8002178:	bf00      	nop
 800217a:	e004      	b.n	8002186 <Touch_Read+0x4aa>
						break;
 800217c:	bf00      	nop
 800217e:	e002      	b.n	8002186 <Touch_Read+0x4aa>
					break;
 8002180:	bf00      	nop
 8002182:	e000      	b.n	8002186 <Touch_Read+0x4aa>
						break;
 8002184:	bf00      	nop
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000114 	.word	0x20000114
 8002194:	40011400 	.word	0x40011400
 8002198:	20000111 	.word	0x20000111
 800219c:	20000002 	.word	0x20000002
 80021a0:	20000324 	.word	0x20000324
 80021a4:	20000110 	.word	0x20000110
 80021a8:	20000001 	.word	0x20000001
 80021ac:	200003fc 	.word	0x200003fc

080021b0 <switch_operation>:



void switch_operation(uint8_t SW_NO,uint8_t SW_STS)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af04      	add	r7, sp, #16
 80021b6:	4603      	mov	r3, r0
 80021b8:	460a      	mov	r2, r1
 80021ba:	71fb      	strb	r3, [r7, #7]
 80021bc:	4613      	mov	r3, r2
 80021be:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, SW_NO,I2C_MEMADD_SIZE_16BIT, &SW_STS, 1, 100)==HAL_OK)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	2364      	movs	r3, #100	; 0x64
 80021c6:	9302      	str	r3, [sp, #8]
 80021c8:	2301      	movs	r3, #1
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	1dbb      	adds	r3, r7, #6
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2310      	movs	r3, #16
 80021d2:	21a0      	movs	r1, #160	; 0xa0
 80021d4:	48b1      	ldr	r0, [pc, #708]	; (800249c <switch_operation+0x2ec>)
 80021d6:	f002 ff05 	bl	8004fe4 <HAL_I2C_Mem_Write>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <switch_operation+0x36>
	{
		HAL_Delay(20);
 80021e0:	2014      	movs	r0, #20
 80021e2:	f001 fdb5 	bl	8003d50 <HAL_Delay>
	}
	/*********************************** SWITCH 1 ****************************/
 switch(SW_NO)
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	f200 817e 	bhi.w	80024ec <switch_operation+0x33c>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <switch_operation+0x48>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002215 	.word	0x08002215
 80021fc:	08002277 	.word	0x08002277
 8002200:	080022d9 	.word	0x080022d9
 8002204:	0800233b 	.word	0x0800233b
 8002208:	080023b1 	.word	0x080023b1
 800220c:	08002413 	.word	0x08002413
 8002210:	08002473 	.word	0x08002473
		{
	 case Switch_1:
						if(SW_STS==0x01)
 8002214:	79bb      	ldrb	r3, [r7, #6]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d114      	bne.n	8002244 <switch_operation+0x94>
						{
							Touch_Flag[0]=1;
 800221a:	4ba1      	ldr	r3, [pc, #644]	; (80024a0 <switch_operation+0x2f0>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MAX_PWM);      //LED0
 8002220:	4ba0      	ldr	r3, [pc, #640]	; (80024a4 <switch_operation+0x2f4>)
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <switch_operation+0x2f8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_SET); //RELAY0 SET PB1
 800222a:	2201      	movs	r2, #1
 800222c:	2102      	movs	r1, #2
 800222e:	489f      	ldr	r0, [pc, #636]	; (80024ac <switch_operation+0x2fc>)
 8002230:	f002 fd63 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_1,SW_ON);
 8002234:	2101      	movs	r1, #1
 8002236:	2001      	movs	r0, #1
 8002238:	f000 faaa 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800223c:	2032      	movs	r0, #50	; 0x32
 800223e:	f001 fd87 	bl	8003d50 <HAL_Delay>
							HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_RESET);//RELAY OFF
							Tx_Switch_Satus(1,SW_OFF);
							HAL_Delay(Delay);
						}

	 break;
 8002242:	e155      	b.n	80024f0 <switch_operation+0x340>
						else if(SW_STS==0x00)
 8002244:	79bb      	ldrb	r3, [r7, #6]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8152 	bne.w	80024f0 <switch_operation+0x340>
							 Touch_Flag[0]=3;
 800224c:	4b94      	ldr	r3, [pc, #592]	; (80024a0 <switch_operation+0x2f0>)
 800224e:	2203      	movs	r2, #3
 8002250:	701a      	strb	r2, [r3, #0]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);         //LED0RESET
 8002252:	4b97      	ldr	r3, [pc, #604]	; (80024b0 <switch_operation+0x300>)
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	4b94      	ldr	r3, [pc, #592]	; (80024a8 <switch_operation+0x2f8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_RESET);//RELAY OFF
 800225c:	2200      	movs	r2, #0
 800225e:	2102      	movs	r1, #2
 8002260:	4892      	ldr	r0, [pc, #584]	; (80024ac <switch_operation+0x2fc>)
 8002262:	f002 fd4a 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(1,SW_OFF);
 8002266:	2100      	movs	r1, #0
 8002268:	2001      	movs	r0, #1
 800226a:	f000 fa91 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800226e:	2032      	movs	r0, #50	; 0x32
 8002270:	f001 fd6e 	bl	8003d50 <HAL_Delay>
	 break;
 8002274:	e13c      	b.n	80024f0 <switch_operation+0x340>
	/*********************************** SWITCH 2 ****************************/
	case Switch_2:
						if(SW_STS==0x01)
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d114      	bne.n	80022a6 <switch_operation+0xf6>
			        	{
							Touch_Flag[1]=1;
 800227c:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <switch_operation+0x2f0>)
 800227e:	2201      	movs	r2, #1
 8002280:	705a      	strb	r2, [r3, #1]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MAX_PWM);       //LED1
 8002282:	4b88      	ldr	r3, [pc, #544]	; (80024a4 <switch_operation+0x2f4>)
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <switch_operation+0x2f8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
							HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_SET); //RELAY2
 800228c:	2201      	movs	r2, #1
 800228e:	2101      	movs	r1, #1
 8002290:	4886      	ldr	r0, [pc, #536]	; (80024ac <switch_operation+0x2fc>)
 8002292:	f002 fd32 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_2,SW_ON);
 8002296:	2101      	movs	r1, #1
 8002298:	2002      	movs	r0, #2
 800229a:	f000 fa79 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800229e:	2032      	movs	r0, #50	; 0x32
 80022a0:	f001 fd56 	bl	8003d50 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);         //LED_RESET
							HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_2,SW_OFF);
							HAL_Delay(Delay);
						}
						break;
 80022a4:	e126      	b.n	80024f4 <switch_operation+0x344>
						else if(SW_STS==0x00)
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 8123 	bne.w	80024f4 <switch_operation+0x344>
							 Touch_Flag[1]=3;
 80022ae:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <switch_operation+0x2f0>)
 80022b0:	2203      	movs	r2, #3
 80022b2:	705a      	strb	r2, [r3, #1]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);         //LED_RESET
 80022b4:	4b7e      	ldr	r3, [pc, #504]	; (80024b0 <switch_operation+0x300>)
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	4b7b      	ldr	r3, [pc, #492]	; (80024a8 <switch_operation+0x2f8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
							HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_RESET);//RELAY_OFF
 80022be:	2200      	movs	r2, #0
 80022c0:	2101      	movs	r1, #1
 80022c2:	487a      	ldr	r0, [pc, #488]	; (80024ac <switch_operation+0x2fc>)
 80022c4:	f002 fd19 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_2,SW_OFF);
 80022c8:	2100      	movs	r1, #0
 80022ca:	2002      	movs	r0, #2
 80022cc:	f000 fa60 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80022d0:	2032      	movs	r0, #50	; 0x32
 80022d2:	f001 fd3d 	bl	8003d50 <HAL_Delay>
						break;
 80022d6:	e10d      	b.n	80024f4 <switch_operation+0x344>
		/*********************************** SWITCH 3 ****************************/
	case Switch_3:
		                if(SW_STS==0x01)
 80022d8:	79bb      	ldrb	r3, [r7, #6]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d114      	bne.n	8002308 <switch_operation+0x158>
						{
							Touch_Flag[2]=1;
 80022de:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <switch_operation+0x2f0>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	709a      	strb	r2, [r3, #2]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MAX_PWM); //LED2
 80022e4:	4b6f      	ldr	r3, [pc, #444]	; (80024a4 <switch_operation+0x2f4>)
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	4b6f      	ldr	r3, [pc, #444]	; (80024a8 <switch_operation+0x2f8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_SET);  //RELAY3
 80022ee:	2201      	movs	r2, #1
 80022f0:	2110      	movs	r1, #16
 80022f2:	4870      	ldr	r0, [pc, #448]	; (80024b4 <switch_operation+0x304>)
 80022f4:	f002 fd01 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_3,SW_ON);
 80022f8:	2101      	movs	r1, #1
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 fa48 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8002300:	2032      	movs	r0, #50	; 0x32
 8002302:	f001 fd25 	bl	8003d50 <HAL_Delay>
						    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);       //LED_RESET
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_3,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8002306:	e0f7      	b.n	80024f8 <switch_operation+0x348>
						else if(SW_STS==0x00)
 8002308:	79bb      	ldrb	r3, [r7, #6]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 80f4 	bne.w	80024f8 <switch_operation+0x348>
							 Touch_Flag[2]=3;
 8002310:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <switch_operation+0x2f0>)
 8002312:	2203      	movs	r2, #3
 8002314:	709a      	strb	r2, [r3, #2]
						    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);       //LED_RESET
 8002316:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <switch_operation+0x300>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <switch_operation+0x2f8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_RESET);//RELAY_OFF
 8002320:	2200      	movs	r2, #0
 8002322:	2110      	movs	r1, #16
 8002324:	4863      	ldr	r0, [pc, #396]	; (80024b4 <switch_operation+0x304>)
 8002326:	f002 fce8 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_3,SW_OFF);
 800232a:	2100      	movs	r1, #0
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fa2f 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8002332:	2032      	movs	r0, #50	; 0x32
 8002334:	f001 fd0c 	bl	8003d50 <HAL_Delay>
				break;
 8002338:	e0de      	b.n	80024f8 <switch_operation+0x348>
		/*********************************** SWITCH 4 ****************************/
	case Switch_4:
		                if(SW_STS==0x01)
 800233a:	79bb      	ldrb	r3, [r7, #6]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d119      	bne.n	8002374 <switch_operation+0x1c4>
						{
							Touch_Flag[3]=1;
 8002340:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <switch_operation+0x2f0>)
 8002342:	2201      	movs	r2, #1
 8002344:	70da      	strb	r2, [r3, #3]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MAX_PWM);  //LED3
 8002346:	4b57      	ldr	r3, [pc, #348]	; (80024a4 <switch_operation+0x2f4>)
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	4b5b      	ldr	r3, [pc, #364]	; (80024b8 <switch_operation+0x308>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY3_GPIO_Port,RELAY3_Pin,GPIO_PIN_SET); //RELAY4
 8002350:	2201      	movs	r2, #1
 8002352:	2120      	movs	r1, #32
 8002354:	4857      	ldr	r0, [pc, #348]	; (80024b4 <switch_operation+0x304>)
 8002356:	f002 fcd0 	bl	8004cfa <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(RELAY4_GPIO_Port,RELAY4_Pin,GPIO_PIN_SET); //RELAY 5
 800235a:	2201      	movs	r2, #1
 800235c:	2140      	movs	r1, #64	; 0x40
 800235e:	4855      	ldr	r0, [pc, #340]	; (80024b4 <switch_operation+0x304>)
 8002360:	f002 fccb 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_4,SW_ON);
 8002364:	2101      	movs	r1, #1
 8002366:	2004      	movs	r0, #4
 8002368:	f000 fa12 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800236c:	2032      	movs	r0, #50	; 0x32
 800236e:	f001 fcef 	bl	8003d50 <HAL_Delay>
							HAL_GPIO_WritePin(RELAY3_GPIO_Port,RELAY3_Pin,GPIO_PIN_RESET); //RELAY4

							Tx_Switch_Satus(Switch_4,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8002372:	e0c3      	b.n	80024fc <switch_operation+0x34c>
						else if(SW_STS==0x00)
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 80c0 	bne.w	80024fc <switch_operation+0x34c>
							 Touch_Flag[3]=3;
 800237c:	4b48      	ldr	r3, [pc, #288]	; (80024a0 <switch_operation+0x2f0>)
 800237e:	2203      	movs	r2, #3
 8002380:	70da      	strb	r2, [r3, #3]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);   //LED_RESET
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <switch_operation+0x300>)
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <switch_operation+0x308>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY4_GPIO_Port,RELAY4_Pin,GPIO_PIN_RESET); //RELAY OFF
 800238c:	2200      	movs	r2, #0
 800238e:	2140      	movs	r1, #64	; 0x40
 8002390:	4848      	ldr	r0, [pc, #288]	; (80024b4 <switch_operation+0x304>)
 8002392:	f002 fcb2 	bl	8004cfa <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(RELAY3_GPIO_Port,RELAY3_Pin,GPIO_PIN_RESET); //RELAY4
 8002396:	2200      	movs	r2, #0
 8002398:	2120      	movs	r1, #32
 800239a:	4846      	ldr	r0, [pc, #280]	; (80024b4 <switch_operation+0x304>)
 800239c:	f002 fcad 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_4,SW_OFF);
 80023a0:	2100      	movs	r1, #0
 80023a2:	2004      	movs	r0, #4
 80023a4:	f000 f9f4 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80023a8:	2032      	movs	r0, #50	; 0x32
 80023aa:	f001 fcd1 	bl	8003d50 <HAL_Delay>
				break;
 80023ae:	e0a5      	b.n	80024fc <switch_operation+0x34c>
	/*********************************** SWITCH 5 ****************************/
	case Switch_5:
		               if(SW_STS==0x01)
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d114      	bne.n	80023e0 <switch_operation+0x230>
						{
							Touch_Flag[4]=1;
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <switch_operation+0x2f0>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	711a      	strb	r2, [r3, #4]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MAX_PWM);      //LED4
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <switch_operation+0x2f4>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <switch_operation+0x2f8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_SET); //RELAY5
 80023c6:	2201      	movs	r2, #1
 80023c8:	2120      	movs	r1, #32
 80023ca:	483c      	ldr	r0, [pc, #240]	; (80024bc <switch_operation+0x30c>)
 80023cc:	f002 fc95 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_5,SW_ON);
 80023d0:	2101      	movs	r1, #1
 80023d2:	2005      	movs	r0, #5
 80023d4:	f000 f9dc 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80023d8:	2032      	movs	r0, #50	; 0x32
 80023da:	f001 fcb9 	bl	8003d50 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);  //LED_RESET
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_5,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 80023de:	e08f      	b.n	8002500 <switch_operation+0x350>
						else if(SW_STS==0x00)
 80023e0:	79bb      	ldrb	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 808c 	bne.w	8002500 <switch_operation+0x350>
							 Touch_Flag[4]=3;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <switch_operation+0x2f0>)
 80023ea:	2203      	movs	r2, #3
 80023ec:	711a      	strb	r2, [r3, #4]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);  //LED_RESET
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <switch_operation+0x300>)
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <switch_operation+0x2f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_RESET);//RELAY_OFF
 80023f8:	2200      	movs	r2, #0
 80023fa:	2120      	movs	r1, #32
 80023fc:	482f      	ldr	r0, [pc, #188]	; (80024bc <switch_operation+0x30c>)
 80023fe:	f002 fc7c 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_5,SW_OFF);
 8002402:	2100      	movs	r1, #0
 8002404:	2005      	movs	r0, #5
 8002406:	f000 f9c3 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800240a:	2032      	movs	r0, #50	; 0x32
 800240c:	f001 fca0 	bl	8003d50 <HAL_Delay>
				break;
 8002410:	e076      	b.n	8002500 <switch_operation+0x350>
				/*********************************** SWITCH 6 ****************************/
	case Switch_6:
					   if(SW_STS==0x01)
 8002412:	79bb      	ldrb	r3, [r7, #6]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d114      	bne.n	8002442 <switch_operation+0x292>
						{
							Touch_Flag[5]=1;
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <switch_operation+0x2f0>)
 800241a:	2201      	movs	r2, #1
 800241c:	715a      	strb	r2, [r3, #5]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM); //LED5
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <switch_operation+0x2f4>)
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <switch_operation+0x308>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_SET); //RELAY6
 8002428:	2201      	movs	r2, #1
 800242a:	2110      	movs	r1, #16
 800242c:	4823      	ldr	r0, [pc, #140]	; (80024bc <switch_operation+0x30c>)
 800242e:	f002 fc64 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_6,SW_ON);
 8002432:	2101      	movs	r1, #1
 8002434:	2006      	movs	r0, #6
 8002436:	f000 f9ab 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800243a:	2032      	movs	r0, #50	; 0x32
 800243c:	f001 fc88 	bl	8003d50 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);          //LED_RESET
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_RESET); //RELAY6
							Tx_Switch_Satus(Switch_6,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8002440:	e060      	b.n	8002504 <switch_operation+0x354>
						else if(SW_STS==0x00)
 8002442:	79bb      	ldrb	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d15d      	bne.n	8002504 <switch_operation+0x354>
							 Touch_Flag[5]=3;
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <switch_operation+0x2f0>)
 800244a:	2203      	movs	r2, #3
 800244c:	715a      	strb	r2, [r3, #5]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);          //LED_RESET
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <switch_operation+0x300>)
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <switch_operation+0x308>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_RESET); //RELAY6
 8002458:	2200      	movs	r2, #0
 800245a:	2110      	movs	r1, #16
 800245c:	4817      	ldr	r0, [pc, #92]	; (80024bc <switch_operation+0x30c>)
 800245e:	f002 fc4c 	bl	8004cfa <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_6,SW_OFF);
 8002462:	2100      	movs	r1, #0
 8002464:	2006      	movs	r0, #6
 8002466:	f000 f993 	bl	8002790 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800246a:	2032      	movs	r0, #50	; 0x32
 800246c:	f001 fc70 	bl	8003d50 <HAL_Delay>
				break;
 8002470:	e048      	b.n	8002504 <switch_operation+0x354>
	case Switch_7:
				               if(SW_STS==0x01)
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d125      	bne.n	80024c4 <switch_operation+0x314>
								{

							     	Touch_Flag[6]=1;
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <switch_operation+0x2f0>)
 800247a:	2201      	movs	r2, #1
 800247c:	719a      	strb	r2, [r3, #6]
									Tx_Switch_Satus(Switch_7,SW_ON);
 800247e:	2101      	movs	r1, #1
 8002480:	2007      	movs	r0, #7
 8002482:	f000 f985 	bl	8002790 <Tx_Switch_Satus>
									dimmer_operation(SW_ON, dimmer_level);
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <switch_operation+0x310>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4619      	mov	r1, r3
 800248c:	2001      	movs	r0, #1
 800248e:	f000 f847 	bl	8002520 <dimmer_operation>
									HAL_Delay(Delay);
 8002492:	2032      	movs	r0, #50	; 0x32
 8002494:	f001 fc5c 	bl	8003d50 <HAL_Delay>
									Touch_Flag[6]=3;
									Tx_Switch_Satus(Switch_7,SW_OFF);
									dimmer_operation(SW_OFF, dimmer_level);
									HAL_Delay(Delay);
								}
						break;
 8002498:	e036      	b.n	8002508 <switch_operation+0x358>
 800249a:	bf00      	nop
 800249c:	200000bc 	.word	0x200000bc
 80024a0:	20000114 	.word	0x20000114
 80024a4:	20000002 	.word	0x20000002
 80024a8:	200003b4 	.word	0x200003b4
 80024ac:	40010c00 	.word	0x40010c00
 80024b0:	20000001 	.word	0x20000001
 80024b4:	40011800 	.word	0x40011800
 80024b8:	200003fc 	.word	0x200003fc
 80024bc:	40011000 	.word	0x40011000
 80024c0:	20000110 	.word	0x20000110
								else if(SW_STS==0x00)
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d11e      	bne.n	8002508 <switch_operation+0x358>
									Touch_Flag[6]=3;
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <switch_operation+0x364>)
 80024cc:	2203      	movs	r2, #3
 80024ce:	719a      	strb	r2, [r3, #6]
									Tx_Switch_Satus(Switch_7,SW_OFF);
 80024d0:	2100      	movs	r1, #0
 80024d2:	2007      	movs	r0, #7
 80024d4:	f000 f95c 	bl	8002790 <Tx_Switch_Satus>
									dimmer_operation(SW_OFF, dimmer_level);
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <switch_operation+0x368>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 f81e 	bl	8002520 <dimmer_operation>
									HAL_Delay(Delay);
 80024e4:	2032      	movs	r0, #50	; 0x32
 80024e6:	f001 fc33 	bl	8003d50 <HAL_Delay>
						break;
 80024ea:	e00d      	b.n	8002508 <switch_operation+0x358>

	default:
		break;
 80024ec:	bf00      	nop
 80024ee:	e00c      	b.n	800250a <switch_operation+0x35a>
	 break;
 80024f0:	bf00      	nop
 80024f2:	e00a      	b.n	800250a <switch_operation+0x35a>
						break;
 80024f4:	bf00      	nop
 80024f6:	e008      	b.n	800250a <switch_operation+0x35a>
				break;
 80024f8:	bf00      	nop
 80024fa:	e006      	b.n	800250a <switch_operation+0x35a>
				break;
 80024fc:	bf00      	nop
 80024fe:	e004      	b.n	800250a <switch_operation+0x35a>
				break;
 8002500:	bf00      	nop
 8002502:	e002      	b.n	800250a <switch_operation+0x35a>
				break;
 8002504:	bf00      	nop
 8002506:	e000      	b.n	800250a <switch_operation+0x35a>
						break;
 8002508:	bf00      	nop

		}
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000114 	.word	0x20000114
 8002518:	20000110 	.word	0x20000110
 800251c:	00000000 	.word	0x00000000

08002520 <dimmer_operation>:

void dimmer_operation(uint8_t Status,uint8_t level)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af04      	add	r7, sp, #16
 8002526:	4603      	mov	r3, r0
 8002528:	460a      	mov	r2, r1
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	4613      	mov	r3, r2
 800252e:	71bb      	strb	r3, [r7, #6]
	       static uint8_t temp_flag = 0;
	       dimmer_level = level;
 8002530:	4a57      	ldr	r2, [pc, #348]	; (8002690 <dimmer_operation+0x170>)
 8002532:	79bb      	ldrb	r3, [r7, #6]
 8002534:	7013      	strb	r3, [r2, #0]
	       timer2_period = (uint8_t)(75 - ((level - 1) * 0.7));
 8002536:	79bb      	ldrb	r3, [r7, #6]
 8002538:	3b01      	subs	r3, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f884 	bl	8000648 <__aeabi_i2d>
 8002540:	a34f      	add	r3, pc, #316	; (adr r3, 8002680 <dimmer_operation+0x160>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fd fe03 	bl	8000150 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	a14e      	add	r1, pc, #312	; (adr r1, 8002688 <dimmer_operation+0x168>)
 8002550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002554:	f7fd ff2a 	bl	80003ac <__aeabi_dsub>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f7fe f8dc 	bl	800071c <__aeabi_d2uiz>
 8002564:	4603      	mov	r3, r0
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <dimmer_operation+0x174>)
 800256a:	701a      	strb	r2, [r3, #0]
	       uint8_t temp_value[2] = {Status,level};
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	733b      	strb	r3, [r7, #12]
 8002570:	79bb      	ldrb	r3, [r7, #6]
 8002572:	737b      	strb	r3, [r7, #13]
	       if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD,23,I2C_MEMADD_SIZE_16BIT ,temp_value,2, 10)==HAL_OK)
 8002574:	230a      	movs	r3, #10
 8002576:	9302      	str	r3, [sp, #8]
 8002578:	2302      	movs	r3, #2
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2310      	movs	r3, #16
 8002584:	2217      	movs	r2, #23
 8002586:	21a0      	movs	r1, #160	; 0xa0
 8002588:	4843      	ldr	r0, [pc, #268]	; (8002698 <dimmer_operation+0x178>)
 800258a:	f002 fd2b 	bl	8004fe4 <HAL_I2C_Mem_Write>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <dimmer_operation+0x7a>
			{
				HAL_Delay(20);
 8002594:	2014      	movs	r0, #20
 8002596:	f001 fbdb 	bl	8003d50 <HAL_Delay>
			}

		  if(Status==0x01)
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d13e      	bne.n	800261e <dimmer_operation+0xfe>
		  {
			  if(temp_flag == 0)
 80025a0:	4b3e      	ldr	r3, [pc, #248]	; (800269c <dimmer_operation+0x17c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d111      	bne.n	80025cc <dimmer_operation+0xac>
			  {
				  temp_flag = 1;
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <dimmer_operation+0x17c>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 80025ae:	4b3c      	ldr	r3, [pc, #240]	; (80026a0 <dimmer_operation+0x180>)
 80025b0:	781a      	ldrb	r2, [r3, #0]
 80025b2:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <dimmer_operation+0x184>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 80025b8:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <dimmer_operation+0x180>)
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <dimmer_operation+0x188>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MAX_PWM);
 80025c2:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <dimmer_operation+0x18c>)
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <dimmer_operation+0x188>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
			  }
			  if(level == 100)
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d112      	bne.n	80025f8 <dimmer_operation+0xd8>
			  {
				dimmer_flag = 1;
 80025d2:	4b37      	ldr	r3, [pc, #220]	; (80026b0 <dimmer_operation+0x190>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
				dimmer_enable_flag = 0;
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <dimmer_operation+0x194>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
				dimmer_value_change_flag = 0;
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <dimmer_operation+0x198>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
				HAL_Delay(1);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f001 fbb3 	bl	8003d50 <HAL_Delay>
				 HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f0:	4832      	ldr	r0, [pc, #200]	; (80026bc <dimmer_operation+0x19c>)
 80025f2:	f002 fb82 	bl	8004cfa <HAL_GPIO_WritePin>
 80025f6:	e03a      	b.n	800266e <dimmer_operation+0x14e>

			  }
			  else if(level<100)
 80025f8:	79bb      	ldrb	r3, [r7, #6]
 80025fa:	2b63      	cmp	r3, #99	; 0x63
 80025fc:	d837      	bhi.n	800266e <dimmer_operation+0x14e>
			  {
				HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_RESET);
 80025fe:	2200      	movs	r2, #0
 8002600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002604:	482d      	ldr	r0, [pc, #180]	; (80026bc <dimmer_operation+0x19c>)
 8002606:	f002 fb78 	bl	8004cfa <HAL_GPIO_WritePin>
				dimmer_flag = 1;
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <dimmer_operation+0x190>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
				dimmer_enable_flag = 1;
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <dimmer_operation+0x194>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
				dimmer_value_change_flag = 1;
 8002616:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <dimmer_operation+0x198>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e027      	b.n	800266e <dimmer_operation+0x14e>
			  }

		  }
		  else if(Status==0x00)
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d124      	bne.n	800266e <dimmer_operation+0x14e>
		  {
			  if(temp_flag == 1)
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <dimmer_operation+0x17c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d111      	bne.n	8002650 <dimmer_operation+0x130>
			  {
				  temp_flag = 0;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <dimmer_operation+0x17c>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
			    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MIN_PWM);
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <dimmer_operation+0x180>)
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <dimmer_operation+0x188>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,ZERO_PWM);
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <dimmer_operation+0x1a0>)
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <dimmer_operation+0x184>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,ZERO_PWM);
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <dimmer_operation+0x1a0>)
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <dimmer_operation+0x188>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	635a      	str	r2, [r3, #52]	; 0x34
			  }
			  dimmer_enable_flag = 0;
 8002650:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <dimmer_operation+0x194>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265c:	4817      	ldr	r0, [pc, #92]	; (80026bc <dimmer_operation+0x19c>)
 800265e:	f002 fb4c 	bl	8004cfa <HAL_GPIO_WritePin>
			  dimmer_flag = 0;
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <dimmer_operation+0x190>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
			  dimmer_value_change_flag=0;
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <dimmer_operation+0x198>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
		  }

	   DIMMER_TX(level);
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f8cf 	bl	8002814 <DIMMER_TX>

}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	66666666 	.word	0x66666666
 8002684:	3fe66666 	.word	0x3fe66666
 8002688:	00000000 	.word	0x00000000
 800268c:	4052c000 	.word	0x4052c000
 8002690:	20000110 	.word	0x20000110
 8002694:	20000000 	.word	0x20000000
 8002698:	200000bc 	.word	0x200000bc
 800269c:	20000318 	.word	0x20000318
 80026a0:	20000001 	.word	0x20000001
 80026a4:	20000324 	.word	0x20000324
 80026a8:	200003fc 	.word	0x200003fc
 80026ac:	20000002 	.word	0x20000002
 80026b0:	20000111 	.word	0x20000111
 80026b4:	20000113 	.word	0x20000113
 80026b8:	20000112 	.word	0x20000112
 80026bc:	40010800 	.word	0x40010800
 80026c0:	2000029f 	.word	0x2000029f

080026c4 <HAL_GPIO_EXTI_Callback>:
/*****************DIMMER_INTERRUPT CALL_BACK*********************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //FALLING_EDGE DETECTION INTTERUPT
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INTERRUPT_Pin) // If The INT Source Is EXTI Line9 (PA0 Pin)
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d11f      	bne.n	8002714 <HAL_GPIO_EXTI_Callback+0x50>
    {
    	if(dimmer_value_change_flag == 1 )
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_GPIO_EXTI_Callback+0x58>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d114      	bne.n	8002706 <HAL_GPIO_EXTI_Callback+0x42>
    	{
    		dimmer_value_change_flag =0;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_GPIO_EXTI_Callback+0x58>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
    		if((timer2_period >= 5) && (timer2_period <= 75) )
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <HAL_GPIO_EXTI_Callback+0x5c>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d90d      	bls.n	8002706 <HAL_GPIO_EXTI_Callback+0x42>
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_GPIO_EXTI_Callback+0x5c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b4b      	cmp	r3, #75	; 0x4b
 80026f0:	d809      	bhi.n	8002706 <HAL_GPIO_EXTI_Callback+0x42>
    		{
    		__HAL_TIM_SET_AUTORELOAD(&htim2,timer2_period);
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_GPIO_EXTI_Callback+0x5c>)
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_GPIO_EXTI_Callback+0x60>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_GPIO_EXTI_Callback+0x5c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_GPIO_EXTI_Callback+0x60>)
 8002704:	60da      	str	r2, [r3, #12]
    		}
    	}
      if(dimmer_enable_flag == 1)
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_GPIO_EXTI_Callback+0x64>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d102      	bne.n	8002714 <HAL_GPIO_EXTI_Callback+0x50>
	   {
     	   HAL_TIM_Base_Start_IT(&htim2);
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <HAL_GPIO_EXTI_Callback+0x60>)
 8002710:	f004 f904 	bl	800691c <HAL_TIM_Base_Start_IT>
	   }

    }
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000112 	.word	0x20000112
 8002720:	20000000 	.word	0x20000000
 8002724:	2000036c 	.word	0x2000036c
 8002728:	20000113 	.word	0x20000113

0800272c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //DIMMMER
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d111      	bne.n	8002762 <HAL_TIM_PeriodElapsedCallback+0x36>
	{

	 HAL_TIM_Base_Stop_IT(&htim2);
 800273e:	480b      	ldr	r0, [pc, #44]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002740:	f004 f93e 	bl	80069c0 <HAL_TIM_Base_Stop_IT>
	 HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_SET);
 8002744:	2201      	movs	r2, #1
 8002746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800274a:	4809      	ldr	r0, [pc, #36]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800274c:	f002 fad5 	bl	8004cfa <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 8002750:	2001      	movs	r0, #1
 8002752:	f001 fafd 	bl	8003d50 <HAL_Delay>
     HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800275e:	f002 facc 	bl	8004cfa <HAL_GPIO_WritePin>

	}

}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	2000036c 	.word	0x2000036c
 8002770:	40010800 	.word	0x40010800

08002774 <switch_long_press>:
void switch_long_press(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
       HAL_UART_Transmit(&huart2,Longpress_Tx_Buff,sizeof(Longpress_Tx_Buff),100);
 8002778:	2364      	movs	r3, #100	; 0x64
 800277a:	220a      	movs	r2, #10
 800277c:	4902      	ldr	r1, [pc, #8]	; (8002788 <switch_long_press+0x14>)
 800277e:	4803      	ldr	r0, [pc, #12]	; (800278c <switch_long_press+0x18>)
 8002780:	f005 f8a6 	bl	80078d0 <HAL_UART_Transmit>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000048 	.word	0x20000048
 800278c:	20000444 	.word	0x20000444

08002790 <Tx_Switch_Satus>:
void Tx_Switch_Satus(uint8_t SW_NO, uint8_t SW_STS)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	460a      	mov	r2, r1
 800279a:	71fb      	strb	r3, [r7, #7]
 800279c:	4613      	mov	r3, r2
 800279e:	71bb      	strb	r3, [r7, #6]
		    *  Switch_Touch_Tx_Buff[8] and Switch_Touch_Tx_Buff[9] Data Length
		    *  Switch_Touch_Tx_Buff[10] Switch Status
		    *  Switch_Touch_Tx_Buff[11] CRC {CRC is remainder  sum of all byte divided by 256 }
			*/

			uint8_t Switch_Touch_Tx_Buff[12] = {0x55,0xAA,0x03,0x07,0x00,0x05,0x01,0x01,0x00,0x01,0x00,0x00};  //Data frame for sending Switch Status
 80027a0:	4a1a      	ldr	r2, [pc, #104]	; (800280c <Tx_Switch_Satus+0x7c>)
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80027a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			uint8_t Check_Sum = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	76bb      	strb	r3, [r7, #26]

			if(SW_NO == Switch_7)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	d102      	bne.n	80027bc <Tx_Switch_Satus+0x2c>
			{

				Switch_Touch_Tx_Buff[6] = 0x65;
 80027b6:	2365      	movs	r3, #101	; 0x65
 80027b8:	74bb      	strb	r3, [r7, #18]
 80027ba:	e001      	b.n	80027c0 <Tx_Switch_Satus+0x30>

			}
			else
			{
			    Switch_Touch_Tx_Buff[6] = SW_NO; //SWITCH_NUMBE
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	74bb      	strb	r3, [r7, #18]
			}

			Switch_Touch_Tx_Buff[10] = SW_STS; //SWITCH ON AND OFF
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	75bb      	strb	r3, [r7, #22]

			uint32_t Tx_Data_Sum = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]

		    for(uint8_t i =0;i < sizeof(Switch_Touch_Tx_Buff); i++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	76fb      	strb	r3, [r7, #27]
 80027cc:	e00b      	b.n	80027e6 <Tx_Switch_Satus+0x56>
		    {
		       Tx_Data_Sum += Switch_Touch_Tx_Buff[i];
 80027ce:	7efb      	ldrb	r3, [r7, #27]
 80027d0:	3320      	adds	r3, #32
 80027d2:	443b      	add	r3, r7
 80027d4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80027d8:	461a      	mov	r2, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	61fb      	str	r3, [r7, #28]
		    for(uint8_t i =0;i < sizeof(Switch_Touch_Tx_Buff); i++)
 80027e0:	7efb      	ldrb	r3, [r7, #27]
 80027e2:	3301      	adds	r3, #1
 80027e4:	76fb      	strb	r3, [r7, #27]
 80027e6:	7efb      	ldrb	r3, [r7, #27]
 80027e8:	2b0b      	cmp	r3, #11
 80027ea:	d9f0      	bls.n	80027ce <Tx_Switch_Satus+0x3e>
		    }

		    Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	76bb      	strb	r3, [r7, #26]

		    Switch_Touch_Tx_Buff[11] = Check_Sum ;
 80027f0:	7ebb      	ldrb	r3, [r7, #26]
 80027f2:	75fb      	strb	r3, [r7, #23]

		    HAL_UART_Transmit(&huart2,Switch_Touch_Tx_Buff,sizeof(Switch_Touch_Tx_Buff),100);
 80027f4:	f107 010c 	add.w	r1, r7, #12
 80027f8:	2364      	movs	r3, #100	; 0x64
 80027fa:	220c      	movs	r2, #12
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <Tx_Switch_Satus+0x80>)
 80027fe:	f005 f867 	bl	80078d0 <HAL_UART_Transmit>


}
 8002802:	bf00      	nop
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	08008314 	.word	0x08008314
 8002810:	20000444 	.word	0x20000444

08002814 <DIMMER_TX>:
void DIMMER_TX(uint8_t DIMMER_COUNTER)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b08b      	sub	sp, #44	; 0x2c
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
 uint8_t DIMMER_Tx_Buff[15] = {0x55,0xAA,0x03,0x07,0x00,0x08,0x6a,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00};//Data frame for sending DIMMER Status
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <DIMMER_TX+0x98>)
 8002820:	f107 040c 	add.w	r4, r7, #12
 8002824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002826:	c407      	stmia	r4!, {r0, r1, r2}
 8002828:	8023      	strh	r3, [r4, #0]
 800282a:	3402      	adds	r4, #2
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	7023      	strb	r3, [r4, #0]
 uint8_t Check_Sum = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 uint32_t DIMMER_COUNTED=DIMMER_COUNTER;
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	61fb      	str	r3, [r7, #28]
				DIMMER_Tx_Buff[10]= DIMMER_COUNTED>>24 & 0xFF;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	0e1b      	lsrs	r3, r3, #24
 800283e:	b2db      	uxtb	r3, r3
 8002840:	75bb      	strb	r3, [r7, #22]
				DIMMER_Tx_Buff[11]= DIMMER_COUNTED>>16 & 0xFF;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	b2db      	uxtb	r3, r3
 8002848:	75fb      	strb	r3, [r7, #23]
				DIMMER_Tx_Buff[12]= DIMMER_COUNTED>>8 & 0xFF;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b2db      	uxtb	r3, r3
 8002850:	763b      	strb	r3, [r7, #24]
				DIMMER_Tx_Buff[13]= DIMMER_COUNTED>>0 & 0xFF;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	767b      	strb	r3, [r7, #25]

			uint32_t Tx_Data_Sum = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	; 0x24

			  for(uint8_t i =0;i < sizeof(DIMMER_Tx_Buff); i++)
 800285c:	2300      	movs	r3, #0
 800285e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002862:	e00e      	b.n	8002882 <DIMMER_TX+0x6e>
				    {
				       Tx_Data_Sum += DIMMER_Tx_Buff[i];
 8002864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002868:	3328      	adds	r3, #40	; 0x28
 800286a:	443b      	add	r3, r7
 800286c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002870:	461a      	mov	r2, r3
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	4413      	add	r3, r2
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
			  for(uint8_t i =0;i < sizeof(DIMMER_Tx_Buff); i++)
 8002878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800287c:	3301      	adds	r3, #1
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002886:	2b0e      	cmp	r3, #14
 8002888:	d9ec      	bls.n	8002864 <DIMMER_TX+0x50>
				    }

			  Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

			  DIMMER_Tx_Buff[14] = Check_Sum ;
 8002890:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002894:	76bb      	strb	r3, [r7, #26]

			  HAL_UART_Transmit(&huart2,DIMMER_Tx_Buff,sizeof(DIMMER_Tx_Buff),100);
 8002896:	f107 010c 	add.w	r1, r7, #12
 800289a:	2364      	movs	r3, #100	; 0x64
 800289c:	220f      	movs	r2, #15
 800289e:	4804      	ldr	r0, [pc, #16]	; (80028b0 <DIMMER_TX+0x9c>)
 80028a0:	f005 f816 	bl	80078d0 <HAL_UART_Transmit>
}
 80028a4:	bf00      	nop
 80028a6:	372c      	adds	r7, #44	; 0x2c
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}
 80028ac:	08008320 	.word	0x08008320
 80028b0:	20000444 	.word	0x20000444

080028b4 <HAL_UART_RxCpltCallback>:

/**********************UART callback routine*************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
     Cyclic_Buffer[wrI]=RX_Buffer;
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_UART_RxCpltCallback+0x4c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_UART_RxCpltCallback+0x50>)
 80028c4:	7819      	ldrb	r1, [r3, #0]
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_UART_RxCpltCallback+0x54>)
 80028c8:	5499      	strb	r1, [r3, r2]
	 wrI=( wrI + 1 )%256;
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_UART_RxCpltCallback+0x4c>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	425a      	negs	r2, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	bf58      	it	pl
 80028d8:	4253      	negpl	r3, r2
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_UART_RxCpltCallback+0x4c>)
 80028de:	701a      	strb	r2, [r3, #0]
	 Count++;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_UART_RxCpltCallback+0x58>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_UART_RxCpltCallback+0x58>)
 80028ea:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 80028ec:	2201      	movs	r2, #1
 80028ee:	4905      	ldr	r1, [pc, #20]	; (8002904 <HAL_UART_RxCpltCallback+0x50>)
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <HAL_UART_RxCpltCallback+0x5c>)
 80028f2:	f005 f87f 	bl	80079f4 <HAL_UART_Receive_IT>

}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000011d 	.word	0x2000011d
 8002904:	20000289 	.word	0x20000289
 8002908:	20000120 	.word	0x20000120
 800290c:	2000011f 	.word	0x2000011f
 8002910:	20000444 	.word	0x20000444

08002914 <Uart_Read_data>:
/****************USART_READ****************/
void Uart_Read_data()
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  if(Count !=0)
 8002918:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <Uart_Read_data+0xf0>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d06c      	beq.n	80029fa <Uart_Read_data+0xe6>
		 {
	        RX_Buffer =  Cyclic_Buffer[rdI];
 8002920:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <Uart_Read_data+0xf4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <Uart_Read_data+0xf8>)
 8002928:	5c9a      	ldrb	r2, [r3, r2]
 800292a:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <Uart_Read_data+0xfc>)
 800292c:	701a      	strb	r2, [r3, #0]
	        rdI=( rdI + 1 )%256;
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <Uart_Read_data+0xf4>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	425a      	negs	r2, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	bf58      	it	pl
 800293c:	4253      	negpl	r3, r2
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <Uart_Read_data+0xf4>)
 8002942:	701a      	strb	r2, [r3, #0]
	 		 Count--;
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <Uart_Read_data+0xf0>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <Uart_Read_data+0xf0>)
 800294e:	701a      	strb	r2, [r3, #0]
	 		 if(Count == 0)
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <Uart_Read_data+0xf0>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <Uart_Read_data+0x4c>
	 			       {
	 				       rdI = wrI;
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <Uart_Read_data+0x100>)
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <Uart_Read_data+0xf4>)
 800295e:	701a      	strb	r2, [r3, #0]
	 			       }

	 		         Rx_Second_byte	 =RX_Buffer;
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <Uart_Read_data+0xfc>)
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <Uart_Read_data+0x104>)
 8002966:	701a      	strb	r2, [r3, #0]
	 		      if((Rx_Second_byte == 0xAA) && (Rx_First_byte == 0x55))
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <Uart_Read_data+0x104>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2baa      	cmp	r3, #170	; 0xaa
 800296e:	d116      	bne.n	800299e <Uart_Read_data+0x8a>
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <Uart_Read_data+0x108>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b55      	cmp	r3, #85	; 0x55
 8002976:	d112      	bne.n	800299e <Uart_Read_data+0x8a>
	 			       {
	 			           RX_data_Count = 0;
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <Uart_Read_data+0x10c>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
	 			           RX_Data_Start_Flag = 1;
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <Uart_Read_data+0x110>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
	 			           RX_Data[RX_data_Count] = Rx_First_byte;
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <Uart_Read_data+0x10c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <Uart_Read_data+0x108>)
 800298c:	7819      	ldrb	r1, [r3, #0]
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <Uart_Read_data+0x114>)
 8002990:	5499      	strb	r1, [r3, r2]
	 			           RX_data_Count++;
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <Uart_Read_data+0x10c>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <Uart_Read_data+0x10c>)
 800299c:	701a      	strb	r2, [r3, #0]
	 			       }
	 			   if(RX_Data_Start_Flag == 1)
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <Uart_Read_data+0x110>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d125      	bne.n	80029f2 <Uart_Read_data+0xde>
	 			       {
	 			           RX_Data[RX_data_Count] = RX_Buffer;
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <Uart_Read_data+0x10c>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <Uart_Read_data+0xfc>)
 80029ae:	7819      	ldrb	r1, [r3, #0]
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <Uart_Read_data+0x114>)
 80029b2:	5499      	strb	r1, [r3, r2]
	 			           if(RX_data_Count == 5)
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <Uart_Read_data+0x10c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d106      	bne.n	80029ca <Uart_Read_data+0xb6>
	 			           {
	 			        	  RX_data_length = RX_Data[RX_data_Count];
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <Uart_Read_data+0x10c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <Uart_Read_data+0x114>)
 80029c4:	5c9a      	ldrb	r2, [r3, r2]
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <Uart_Read_data+0x118>)
 80029c8:	701a      	strb	r2, [r3, #0]

	 			           }
	 			           if(RX_data_Count == (6 + RX_data_length))
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <Uart_Read_data+0x10c>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <Uart_Read_data+0x118>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	3306      	adds	r3, #6
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d105      	bne.n	80029e6 <Uart_Read_data+0xd2>
	 			           {

	 			               RX_Data_Start_Flag = 0;
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <Uart_Read_data+0x110>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
	 			               RX_Complete_flag = 1;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <Uart_Read_data+0x11c>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
	 			           }
	 			          RX_data_Count++;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <Uart_Read_data+0x10c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <Uart_Read_data+0x10c>)
 80029f0:	701a      	strb	r2, [r3, #0]
	 			       }
	 			       Rx_First_byte  = Rx_Second_byte;
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <Uart_Read_data+0x104>)
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <Uart_Read_data+0x108>)
 80029f8:	701a      	strb	r2, [r3, #0]
		 }
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000011f 	.word	0x2000011f
 8002a08:	2000011e 	.word	0x2000011e
 8002a0c:	20000120 	.word	0x20000120
 8002a10:	20000289 	.word	0x20000289
 8002a14:	2000011d 	.word	0x2000011d
 8002a18:	20000221 	.word	0x20000221
 8002a1c:	20000220 	.word	0x20000220
 8002a20:	20000288 	.word	0x20000288
 8002a24:	2000028b 	.word	0x2000028b
 8002a28:	20000224 	.word	0x20000224
 8002a2c:	2000028a 	.word	0x2000028a
 8002a30:	2000028c 	.word	0x2000028c

08002a34 <Rx_Data_evaluation>:
void Rx_Data_evaluation(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
	if(RX_Complete_flag==1)
 8002a3a:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <Rx_Data_evaluation+0x20c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	f040 80fa 	bne.w	8002c38 <Rx_Data_evaluation+0x204>
	{

		uint32_t Rx_Data_Sum = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]

		uint8_t Check_Sum = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	72bb      	strb	r3, [r7, #10]

		RX_Complete_flag = 0;
 8002a4c:	4b7c      	ldr	r3, [pc, #496]	; (8002c40 <Rx_Data_evaluation+0x20c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]

		for(uint8_t i=0 ; i< (RX_data_Count - 1);i++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	72fb      	strb	r3, [r7, #11]
 8002a56:	e009      	b.n	8002a6c <Rx_Data_evaluation+0x38>
		{
			Rx_Data_Sum +=	RX_Data[i];
 8002a58:	7afb      	ldrb	r3, [r7, #11]
 8002a5a:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
		for(uint8_t i=0 ; i< (RX_data_Count - 1);i++)
 8002a66:	7afb      	ldrb	r3, [r7, #11]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	72fb      	strb	r3, [r7, #11]
 8002a6c:	7afa      	ldrb	r2, [r7, #11]
 8002a6e:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <Rx_Data_evaluation+0x214>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dbef      	blt.n	8002a58 <Rx_Data_evaluation+0x24>
		}

		 Check_Sum = (uint8_t)((Rx_Data_Sum)%(256));
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	72bb      	strb	r3, [r7, #10]

		if( Check_Sum == RX_Data[(RX_data_Count - 1)])
 8002a7c:	4b72      	ldr	r3, [pc, #456]	; (8002c48 <Rx_Data_evaluation+0x214>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	4a70      	ldr	r2, [pc, #448]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	7aba      	ldrb	r2, [r7, #10]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	f040 80d2 	bne.w	8002c32 <Rx_Data_evaluation+0x1fe>
		{
		   if(RX_data_Count >= 5)
 8002a8e:	4b6e      	ldr	r3, [pc, #440]	; (8002c48 <Rx_Data_evaluation+0x214>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	f240 80cd 	bls.w	8002c32 <Rx_Data_evaluation+0x1fe>
		   {
/*******************HEART_BEAT_sending**************/
			 if(RX_Data[3]==0x00)
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002a9a:	78db      	ldrb	r3, [r3, #3]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d13f      	bne.n	8002b20 <Rx_Data_evaluation+0xec>
			 {
					if(Rx_CNT == 0)
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <Rx_Data_evaluation+0x218>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10e      	bne.n	8002ac6 <Rx_Data_evaluation+0x92>
					{
					   HAL_UART_Transmit(&huart2, Hbt, sizeof(Hbt), 100);
 8002aa8:	2364      	movs	r3, #100	; 0x64
 8002aaa:	2208      	movs	r2, #8
 8002aac:	4968      	ldr	r1, [pc, #416]	; (8002c50 <Rx_Data_evaluation+0x21c>)
 8002aae:	4869      	ldr	r0, [pc, #420]	; (8002c54 <Rx_Data_evaluation+0x220>)
 8002ab0:	f004 ff0e 	bl	80078d0 <HAL_UART_Transmit>
					   Rx_CNT = 1;
 8002ab4:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <Rx_Data_evaluation+0x218>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
					   timer_val = HAL_GetTick();
 8002aba:	f001 f93f 	bl	8003d3c <HAL_GetTick>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <Rx_Data_evaluation+0x224>)
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e023      	b.n	8002b0e <Rx_Data_evaluation+0xda>
					}
			        else
			        {
					   uint32_t  Now = HAL_GetTick();
 8002ac6:	f001 f939 	bl	8003d3c <HAL_GetTick>
 8002aca:	6078      	str	r0, [r7, #4]
					   if(Now - timer_val < 2000)
 8002acc:	4b62      	ldr	r3, [pc, #392]	; (8002c58 <Rx_Data_evaluation+0x224>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ad8:	d20c      	bcs.n	8002af4 <Rx_Data_evaluation+0xc0>
					   {
							 Rx_CNT = 0;
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <Rx_Data_evaluation+0x218>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
							 HAL_UART_Transmit(&huart2, Hbt, sizeof(Hbt), 100);
 8002ae0:	2364      	movs	r3, #100	; 0x64
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	495a      	ldr	r1, [pc, #360]	; (8002c50 <Rx_Data_evaluation+0x21c>)
 8002ae6:	485b      	ldr	r0, [pc, #364]	; (8002c54 <Rx_Data_evaluation+0x220>)
 8002ae8:	f004 fef2 	bl	80078d0 <HAL_UART_Transmit>
							 Now=timer_val;
 8002aec:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <Rx_Data_evaluation+0x224>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	e00c      	b.n	8002b0e <Rx_Data_evaluation+0xda>
						}
						else if(Rx_CNT==1)
 8002af4:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <Rx_Data_evaluation+0x218>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d108      	bne.n	8002b0e <Rx_Data_evaluation+0xda>
						{
							 HAL_UART_Transmit(&huart2, Hbt1, sizeof(Hbt1), 100);
 8002afc:	2364      	movs	r3, #100	; 0x64
 8002afe:	2208      	movs	r2, #8
 8002b00:	4956      	ldr	r1, [pc, #344]	; (8002c5c <Rx_Data_evaluation+0x228>)
 8002b02:	4854      	ldr	r0, [pc, #336]	; (8002c54 <Rx_Data_evaluation+0x220>)
 8002b04:	f004 fee4 	bl	80078d0 <HAL_UART_Transmit>
							 Now=timer_val;
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <Rx_Data_evaluation+0x224>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	607b      	str	r3, [r7, #4]
						}
			         }
			    		   Tuya_Heart_Flag = 1;
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <Rx_Data_evaluation+0x22c>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
			    		   Tuya_Start_Time = HAL_GetTick();
 8002b14:	f001 f912 	bl	8003d3c <HAL_GetTick>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <Rx_Data_evaluation+0x230>)
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e088      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
			 }
/******************PID_SENDING*********************/
			else if(RX_Data[3]==0x01)
 8002b20:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002b22:	78db      	ldrb	r3, [r3, #3]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d109      	bne.n	8002b3c <Rx_Data_evaluation+0x108>
			{
				HAL_UART_Transmit(&huart2, PID, sizeof(PID), 100);
 8002b28:	2364      	movs	r3, #100	; 0x64
 8002b2a:	2232      	movs	r2, #50	; 0x32
 8002b2c:	494e      	ldr	r1, [pc, #312]	; (8002c68 <Rx_Data_evaluation+0x234>)
 8002b2e:	4849      	ldr	r0, [pc, #292]	; (8002c54 <Rx_Data_evaluation+0x220>)
 8002b30:	f004 fece 	bl	80078d0 <HAL_UART_Transmit>
				Tuya_flag = 1;
 8002b34:	4b4d      	ldr	r3, [pc, #308]	; (8002c6c <Rx_Data_evaluation+0x238>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e07a      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
			}
/*************WORKING_MODE********************/
			else if(RX_Data[3] == 0x02)
 8002b3c:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d106      	bne.n	8002b52 <Rx_Data_evaluation+0x11e>
			{
				HAL_UART_Transmit(&huart2, Work_Mode, sizeof(Work_Mode), 100);
 8002b44:	2364      	movs	r3, #100	; 0x64
 8002b46:	2207      	movs	r2, #7
 8002b48:	4949      	ldr	r1, [pc, #292]	; (8002c70 <Rx_Data_evaluation+0x23c>)
 8002b4a:	4842      	ldr	r0, [pc, #264]	; (8002c54 <Rx_Data_evaluation+0x220>)
 8002b4c:	f004 fec0 	bl	80078d0 <HAL_UART_Transmit>
 8002b50:	e06f      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
			}
/*****************WI_FI_CONNECTION*********************/
			else if(RX_Data[3] == 0x03)
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002b54:	78db      	ldrb	r3, [r3, #3]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d126      	bne.n	8002ba8 <Rx_Data_evaluation+0x174>
			{
/*******AUTO-CONFIGURATION*********/
				 if(RX_Data[6] == 0x00)
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002b5c:	799b      	ldrb	r3, [r3, #6]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <Rx_Data_evaluation+0x134>
				 {
					 Idication_Flag = 2;
 8002b62:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <Rx_Data_evaluation+0x240>)
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
				 }
/***************AP-MODE-INDICATION********************/
				 if(RX_Data[6] == 0x01)
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002b6a:	799b      	ldrb	r3, [r3, #6]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d103      	bne.n	8002b78 <Rx_Data_evaluation+0x144>
				 {
					 Idication_Flag = 3;
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <Rx_Data_evaluation+0x240>)
 8002b72:	2203      	movs	r2, #3
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e010      	b.n	8002b9a <Rx_Data_evaluation+0x166>
				 }
				else if (RX_Data[6] == 0x02)
 8002b78:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002b7a:	799b      	ldrb	r3, [r3, #6]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d103      	bne.n	8002b88 <Rx_Data_evaluation+0x154>
				{
					Idication_Flag = 1;
 8002b80:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <Rx_Data_evaluation+0x240>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e008      	b.n	8002b9a <Rx_Data_evaluation+0x166>
				}
				else if (RX_Data[6] == 0x04)
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002b8a:	799b      	ldrb	r3, [r3, #6]
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d104      	bne.n	8002b9a <Rx_Data_evaluation+0x166>
				{
					Stop_Indication();
 8002b90:	f000 f918 	bl	8002dc4 <Stop_Indication>
					Idication_Flag = 0;
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <Rx_Data_evaluation+0x240>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
				}
				 HAL_UART_Transmit(&huart2,WiFi_Status, sizeof(WiFi_Status), 100);
 8002b9a:	2364      	movs	r3, #100	; 0x64
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	4936      	ldr	r1, [pc, #216]	; (8002c78 <Rx_Data_evaluation+0x244>)
 8002ba0:	482c      	ldr	r0, [pc, #176]	; (8002c54 <Rx_Data_evaluation+0x220>)
 8002ba2:	f004 fe95 	bl	80078d0 <HAL_UART_Transmit>
 8002ba6:	e044      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
			}
/****************SWITCH_OPERATIONS**************************/
			else if (RX_Data[3] == 0x06)
 8002ba8:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002baa:	78db      	ldrb	r3, [r3, #3]
 8002bac:	2b06      	cmp	r3, #6
 8002bae:	d13a      	bne.n	8002c26 <Rx_Data_evaluation+0x1f2>
			{

				if (RX_Data[6] == 0x0D)
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002bb2:	799b      	ldrb	r3, [r3, #6]
 8002bb4:	2b0d      	cmp	r3, #13
 8002bb6:	d105      	bne.n	8002bc4 <Rx_Data_evaluation+0x190>
				{
					Master_Switch(RX_Data[10]);
 8002bb8:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002bba:	7a9b      	ldrb	r3, [r3, #10]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f90d 	bl	8002ddc <Master_Switch>
 8002bc2:	e036      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
				}
				 else if (RX_Data[6] == 0x6F)
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002bc6:	799b      	ldrb	r3, [r3, #6]
 8002bc8:	2b6f      	cmp	r3, #111	; 0x6f
 8002bca:	d105      	bne.n	8002bd8 <Rx_Data_evaluation+0x1a4>
				{
					set_max_pwm(RX_Data[13]);
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002bce:	7b5b      	ldrb	r3, [r3, #13]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f975 	bl	8002ec0 <set_max_pwm>
 8002bd6:	e02c      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
				}
				else if (RX_Data[6] == 0x70)
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002bda:	799b      	ldrb	r3, [r3, #6]
 8002bdc:	2b70      	cmp	r3, #112	; 0x70
 8002bde:	d105      	bne.n	8002bec <Rx_Data_evaluation+0x1b8>
				{
					set_min_pwm(RX_Data[13]);
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002be2:	7b5b      	ldrb	r3, [r3, #13]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f9e7 	bl	8002fb8 <set_min_pwm>
 8002bea:	e022      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
				}
				else if(RX_Data[6]==0x6A )
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002bee:	799b      	ldrb	r3, [r3, #6]
 8002bf0:	2b6a      	cmp	r3, #106	; 0x6a
 8002bf2:	d108      	bne.n	8002c06 <Rx_Data_evaluation+0x1d2>
				{
					dimmer_operation(dimmer_flag, RX_Data[13]);
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <Rx_Data_evaluation+0x248>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002bfa:	7b52      	ldrb	r2, [r2, #13]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fc8e 	bl	8002520 <dimmer_operation>
 8002c04:	e015      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
				}
				else
				{
					if(RX_Data[6] == 0x65)
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002c08:	799b      	ldrb	r3, [r3, #6]
 8002c0a:	2b65      	cmp	r3, #101	; 0x65
 8002c0c:	d102      	bne.n	8002c14 <Rx_Data_evaluation+0x1e0>
					{
						 RX_Data[6] = 0x07;
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	719a      	strb	r2, [r3, #6]
					}
				     switch_operation (RX_Data[6],RX_Data[10]);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002c16:	799b      	ldrb	r3, [r3, #6]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002c1a:	7a92      	ldrb	r2, [r2, #10]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fac6 	bl	80021b0 <switch_operation>
 8002c24:	e005      	b.n	8002c32 <Rx_Data_evaluation+0x1fe>
				}
			}
		    else if(RX_Data[3] == 0x08)
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <Rx_Data_evaluation+0x210>)
 8002c28:	78db      	ldrb	r3, [r3, #3]
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d101      	bne.n	8002c32 <Rx_Data_evaluation+0x1fe>
		    {
				 Status_ReadData();
 8002c2e:	f000 fa3f 	bl	80030b0 <Status_ReadData>
		    }
	    }
     }
			    RX_data_Count = 0;
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <Rx_Data_evaluation+0x214>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
   }
 }
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	2000028c 	.word	0x2000028c
 8002c44:	20000224 	.word	0x20000224
 8002c48:	20000288 	.word	0x20000288
 8002c4c:	2000028d 	.word	0x2000028d
 8002c50:	20000054 	.word	0x20000054
 8002c54:	20000444 	.word	0x20000444
 8002c58:	20000290 	.word	0x20000290
 8002c5c:	2000005c 	.word	0x2000005c
 8002c60:	20000294 	.word	0x20000294
 8002c64:	20000298 	.word	0x20000298
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	2000029c 	.word	0x2000029c
 8002c70:	20000038 	.word	0x20000038
 8002c74:	2000029d 	.word	0x2000029d
 8002c78:	20000040 	.word	0x20000040
 8002c7c:	20000111 	.word	0x20000111

08002c80 <Indication>:

void Indication(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
	      static uint32_t Indication_Start_Time = 0;
		  static uint8_t Breath = 0;
		  static uint8_t Breath_Flag = 0;
		  uint32_t Now = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
		  if(Idication_Flag == 1)
 8002c8a:	4b48      	ldr	r3, [pc, #288]	; (8002dac <Indication+0x12c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d136      	bne.n	8002d00 <Indication+0x80>
		  {
			  Now = HAL_GetTick();
 8002c92:	f001 f853 	bl	8003d3c <HAL_GetTick>
 8002c96:	6078      	str	r0, [r7, #4]

			  if( Now - Indication_Start_Time > 50 )
 8002c98:	4b45      	ldr	r3, [pc, #276]	; (8002db0 <Indication+0x130>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b32      	cmp	r3, #50	; 0x32
 8002ca2:	d97e      	bls.n	8002da2 <Indication+0x122>
			  {
				  Indication_Start_Time = Now;
 8002ca4:	4a42      	ldr	r2, [pc, #264]	; (8002db0 <Indication+0x130>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,(Breath*2));      //LED7
 8002caa:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <Indication+0x134>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	005a      	lsls	r2, r3, #1
 8002cb0:	4b41      	ldr	r3, [pc, #260]	; (8002db8 <Indication+0x138>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38

				  	  if(Breath == 50)
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <Indication+0x134>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b32      	cmp	r3, #50	; 0x32
 8002cbc:	d103      	bne.n	8002cc6 <Indication+0x46>
					 {
						 Breath_Flag = 1;
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <Indication+0x13c>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e006      	b.n	8002cd4 <Indication+0x54>
					 }
					 else if (Breath == 1)
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <Indication+0x134>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <Indication+0x54>
					 {
						 Breath_Flag = 0;
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <Indication+0x13c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
					 }

					 if (Breath_Flag == 0)
 8002cd4:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <Indication+0x13c>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <Indication+0x6a>
					 {
						 Breath++;
 8002cdc:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <Indication+0x134>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <Indication+0x134>)
 8002ce6:	701a      	strb	r2, [r3, #0]
					   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
				 }
		     }

	       }
 }
 8002ce8:	e05b      	b.n	8002da2 <Indication+0x122>
					 else if (Breath_Flag == 1)
 8002cea:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <Indication+0x13c>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d157      	bne.n	8002da2 <Indication+0x122>
						 Breath--;
 8002cf2:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <Indication+0x134>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <Indication+0x134>)
 8002cfc:	701a      	strb	r2, [r3, #0]
 }
 8002cfe:	e050      	b.n	8002da2 <Indication+0x122>
		  else if(Idication_Flag == 2)                 /****************AUTO****************/
 8002d00:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <Indication+0x12c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d123      	bne.n	8002d50 <Indication+0xd0>
			 Now = HAL_GetTick();
 8002d08:	f001 f818 	bl	8003d3c <HAL_GetTick>
 8002d0c:	6078      	str	r0, [r7, #4]
			 if( Now - Indication_Start_Time > 250 )
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <Indication+0x130>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2bfa      	cmp	r3, #250	; 0xfa
 8002d18:	d943      	bls.n	8002da2 <Indication+0x122>
				Indication_Start_Time =  Now ;
 8002d1a:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <Indication+0x130>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6013      	str	r3, [r2, #0]
				if(Idication_Control_Flag  == 0)
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <Indication+0x140>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <Indication+0xb8>
					Idication_Control_Flag = 1;
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <Indication+0x140>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,H_PWM);      //LED7    /*************TOGGLE-LED*************/
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <Indication+0x138>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2264      	movs	r2, #100	; 0x64
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
 }
 8002d36:	e034      	b.n	8002da2 <Indication+0x122>
				else if(Idication_Control_Flag  == 1)
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <Indication+0x140>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d130      	bne.n	8002da2 <Indication+0x122>
					Idication_Control_Flag = 0;
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <Indication+0x140>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <Indication+0x138>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2214      	movs	r2, #20
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
 }
 8002d4e:	e028      	b.n	8002da2 <Indication+0x122>
		  else if(Idication_Flag == 3)
 8002d50:	4b16      	ldr	r3, [pc, #88]	; (8002dac <Indication+0x12c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d124      	bne.n	8002da2 <Indication+0x122>
			Now = HAL_GetTick();
 8002d58:	f000 fff0 	bl	8003d3c <HAL_GetTick>
 8002d5c:	6078      	str	r0, [r7, #4]
			if( Now - Indication_Start_Time > 1500 )
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <Indication+0x130>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d919      	bls.n	8002da2 <Indication+0x122>
			  Indication_Start_Time =  Now ;
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <Indication+0x130>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6013      	str	r3, [r2, #0]
			  if(Idication_Control_Flag  == 0)
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <Indication+0x140>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <Indication+0x10c>
				  Idication_Control_Flag = 1;
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <Indication+0x140>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,H_PWM);      //LED7
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <Indication+0x138>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2264      	movs	r2, #100	; 0x64
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
 }
 8002d8a:	e00a      	b.n	8002da2 <Indication+0x122>
				else if(Idication_Control_Flag  == 1)
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <Indication+0x140>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <Indication+0x122>
					   Idication_Control_Flag = 0;
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <Indication+0x140>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
					   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <Indication+0x138>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2214      	movs	r2, #20
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
 }
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	2000029d 	.word	0x2000029d
 8002db0:	2000031c 	.word	0x2000031c
 8002db4:	20000320 	.word	0x20000320
 8002db8:	20000324 	.word	0x20000324
 8002dbc:	20000321 	.word	0x20000321
 8002dc0:	2000029e 	.word	0x2000029e

08002dc4 <Stop_Indication>:
void Stop_Indication(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Z_PWM);      //LED7
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <Stop_Indication+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
		Status_ReadData();
 8002dd0:	f000 f96e 	bl	80030b0 <Status_ReadData>
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000324 	.word	0x20000324

08002ddc <Master_Switch>:
/***************MASTER_SWITCH_APP_SIDE***********************/
void Master_Switch(uint8_t SW_STS)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
	 uint8_t Master_Switch[12] = {0x55,0xAA,0x03,0x07,0x00,0x05,0x0D,0x01,0x00,0x01,0x00,0x00};
 8002de6:	4a34      	ldr	r2, [pc, #208]	; (8002eb8 <Master_Switch+0xdc>)
 8002de8:	f107 0308 	add.w	r3, r7, #8
 8002dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t Check_Sum = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]

	Master_Switch[10] = SW_STS;
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	74bb      	strb	r3, [r7, #18]

	if(Master_Switch[10]==0x01)
 8002dfa:	7cbb      	ldrb	r3, [r7, #18]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d11c      	bne.n	8002e3a <Master_Switch+0x5e>
	{
		switch_operation(Switch_1, SW_ON);
 8002e00:	2101      	movs	r1, #1
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7ff f9d4 	bl	80021b0 <switch_operation>
		switch_operation(Switch_2, SW_ON);
 8002e08:	2101      	movs	r1, #1
 8002e0a:	2002      	movs	r0, #2
 8002e0c:	f7ff f9d0 	bl	80021b0 <switch_operation>
		switch_operation(Switch_3, SW_ON);
 8002e10:	2101      	movs	r1, #1
 8002e12:	2003      	movs	r0, #3
 8002e14:	f7ff f9cc 	bl	80021b0 <switch_operation>
		switch_operation(Switch_4, SW_ON);
 8002e18:	2101      	movs	r1, #1
 8002e1a:	2004      	movs	r0, #4
 8002e1c:	f7ff f9c8 	bl	80021b0 <switch_operation>
		switch_operation(Switch_5, SW_ON);
 8002e20:	2101      	movs	r1, #1
 8002e22:	2005      	movs	r0, #5
 8002e24:	f7ff f9c4 	bl	80021b0 <switch_operation>
		switch_operation(Switch_6, SW_ON);
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2006      	movs	r0, #6
 8002e2c:	f7ff f9c0 	bl	80021b0 <switch_operation>
		switch_operation(Switch_7, SW_ON);
 8002e30:	2101      	movs	r1, #1
 8002e32:	2007      	movs	r0, #7
 8002e34:	f7ff f9bc 	bl	80021b0 <switch_operation>
 8002e38:	e01b      	b.n	8002e72 <Master_Switch+0x96>
	}
	else
	{
		switch_operation(Switch_1, SW_OFF);
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	f7ff f9b7 	bl	80021b0 <switch_operation>
		switch_operation(Switch_2, SW_OFF);
 8002e42:	2100      	movs	r1, #0
 8002e44:	2002      	movs	r0, #2
 8002e46:	f7ff f9b3 	bl	80021b0 <switch_operation>
		switch_operation(Switch_3, SW_OFF);
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	f7ff f9af 	bl	80021b0 <switch_operation>
		switch_operation(Switch_4, SW_OFF);
 8002e52:	2100      	movs	r1, #0
 8002e54:	2004      	movs	r0, #4
 8002e56:	f7ff f9ab 	bl	80021b0 <switch_operation>
		switch_operation(Switch_5, SW_OFF);
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2005      	movs	r0, #5
 8002e5e:	f7ff f9a7 	bl	80021b0 <switch_operation>
		switch_operation(Switch_6, SW_OFF);
 8002e62:	2100      	movs	r1, #0
 8002e64:	2006      	movs	r0, #6
 8002e66:	f7ff f9a3 	bl	80021b0 <switch_operation>
		switch_operation(Switch_7, SW_OFF);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2007      	movs	r0, #7
 8002e6e:	f7ff f99f 	bl	80021b0 <switch_operation>
	}
	 uint32_t Tx_Data_Sum = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]

		for(int i=0;i <= sizeof(Master_Switch) ;i++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e00b      	b.n	8002e94 <Master_Switch+0xb8>
		{

			Tx_Data_Sum+=Master_Switch[i];
 8002e7c:	f107 0208 	add.w	r2, r7, #8
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	61fb      	str	r3, [r7, #28]
		for(int i=0;i <= sizeof(Master_Switch) ;i++)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d9f0      	bls.n	8002e7c <Master_Switch+0xa0>
		}
		Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	75fb      	strb	r3, [r7, #23]

		Master_Switch[11] = Check_Sum ;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	74fb      	strb	r3, [r7, #19]

		HAL_UART_Transmit(&huart2, Master_Switch, sizeof(Master_Switch), 100);
 8002ea2:	f107 0108 	add.w	r1, r7, #8
 8002ea6:	2364      	movs	r3, #100	; 0x64
 8002ea8:	220c      	movs	r2, #12
 8002eaa:	4804      	ldr	r0, [pc, #16]	; (8002ebc <Master_Switch+0xe0>)
 8002eac:	f004 fd10 	bl	80078d0 <HAL_UART_Transmit>
}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	08008330 	.word	0x08008330
 8002ebc:	20000444 	.word	0x20000444

08002ec0 <set_max_pwm>:

void set_max_pwm(uint8_t max_val)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af04      	add	r7, sp, #16
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
	MAX_PWM=max_val;
 8002eca:	4a35      	ldr	r2, [pc, #212]	; (8002fa0 <set_max_pwm+0xe0>)
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	7013      	strb	r3, [r2, #0]
	 if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 100) == HAL_OK)
 8002ed0:	2364      	movs	r3, #100	; 0x64
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <set_max_pwm+0xe0>)
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2310      	movs	r3, #16
 8002ede:	2215      	movs	r2, #21
 8002ee0:	21a0      	movs	r1, #160	; 0xa0
 8002ee2:	4830      	ldr	r0, [pc, #192]	; (8002fa4 <set_max_pwm+0xe4>)
 8002ee4:	f002 f87e 	bl	8004fe4 <HAL_I2C_Mem_Write>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <set_max_pwm+0x34>
	        {
	            HAL_Delay(20);
 8002eee:	2014      	movs	r0, #20
 8002ef0:	f000 ff2e 	bl	8003d50 <HAL_Delay>
	        }
	        if(Touch_Flag[0] == 2)                   //SWITCH_ON CASE
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <set_max_pwm+0xe8>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d104      	bne.n	8002f06 <set_max_pwm+0x46>
	        {
	             __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MAX_PWM);
 8002efc:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <set_max_pwm+0xe0>)
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <set_max_pwm+0xec>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
	        }
	        if(Touch_Flag[1] == 2)
 8002f06:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <set_max_pwm+0xe8>)
 8002f08:	785b      	ldrb	r3, [r3, #1]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d104      	bne.n	8002f18 <set_max_pwm+0x58>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MAX_PWM);
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <set_max_pwm+0xe0>)
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	4b26      	ldr	r3, [pc, #152]	; (8002fac <set_max_pwm+0xec>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
	        }
	        if(Touch_Flag[2] == 2)
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <set_max_pwm+0xe8>)
 8002f1a:	789b      	ldrb	r3, [r3, #2]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d104      	bne.n	8002f2a <set_max_pwm+0x6a>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MAX_PWM);
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <set_max_pwm+0xe0>)
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <set_max_pwm+0xf0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
	        }
	        if(Touch_Flag[3] == 2)
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <set_max_pwm+0xe8>)
 8002f2c:	78db      	ldrb	r3, [r3, #3]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d104      	bne.n	8002f3c <set_max_pwm+0x7c>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MAX_PWM);
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <set_max_pwm+0xe0>)
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <set_max_pwm+0xec>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	63da      	str	r2, [r3, #60]	; 0x3c
	        }
	        if(Touch_Flag[4] == 2)
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <set_max_pwm+0xe8>)
 8002f3e:	791b      	ldrb	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d104      	bne.n	8002f4e <set_max_pwm+0x8e>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM);
 8002f44:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <set_max_pwm+0xe0>)
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <set_max_pwm+0xf0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	63da      	str	r2, [r3, #60]	; 0x3c
	        }
	        if(Touch_Flag[5] == 2)
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <set_max_pwm+0xe8>)
 8002f50:	795b      	ldrb	r3, [r3, #5]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d104      	bne.n	8002f60 <set_max_pwm+0xa0>
	        {
	            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MAX_PWM);
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <set_max_pwm+0xe0>)
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <set_max_pwm+0xec>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
	        }
	        if(Touch_Flag[6] == 2)
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <set_max_pwm+0xe8>)
 8002f62:	799b      	ldrb	r3, [r3, #6]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d104      	bne.n	8002f72 <set_max_pwm+0xb2>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MAX_PWM);
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <set_max_pwm+0xe0>)
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <set_max_pwm+0xf0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
	        }
	        if(Touch_Flag[7] == 2)
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <set_max_pwm+0xe8>)
 8002f74:	79db      	ldrb	r3, [r3, #7]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d104      	bne.n	8002f84 <set_max_pwm+0xc4>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <set_max_pwm+0xe0>)
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <set_max_pwm+0xf0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	635a      	str	r2, [r3, #52]	; 0x34
	        }
	        if(Touch_Flag[8] == 2)
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <set_max_pwm+0xe8>)
 8002f86:	7a1b      	ldrb	r3, [r3, #8]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d104      	bne.n	8002f96 <set_max_pwm+0xd6>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MAX_PWM);
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <set_max_pwm+0xe0>)
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <set_max_pwm+0xf4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	635a      	str	r2, [r3, #52]	; 0x34
			}

}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000002 	.word	0x20000002
 8002fa4:	200000bc 	.word	0x200000bc
 8002fa8:	20000114 	.word	0x20000114
 8002fac:	200003b4 	.word	0x200003b4
 8002fb0:	200003fc 	.word	0x200003fc
 8002fb4:	20000324 	.word	0x20000324

08002fb8 <set_min_pwm>:
void set_min_pwm(uint8_t min_val)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af04      	add	r7, sp, #16
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
	MIN_PWM=min_val;
 8002fc2:	4a35      	ldr	r2, [pc, #212]	; (8003098 <set_min_pwm+0xe0>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	7013      	strb	r3, [r2, #0]
	 if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 100) == HAL_OK)
 8002fc8:	2364      	movs	r3, #100	; 0x64
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	2301      	movs	r3, #1
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <set_min_pwm+0xe0>)
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	2214      	movs	r2, #20
 8002fd8:	21a0      	movs	r1, #160	; 0xa0
 8002fda:	4830      	ldr	r0, [pc, #192]	; (800309c <set_min_pwm+0xe4>)
 8002fdc:	f002 f802 	bl	8004fe4 <HAL_I2C_Mem_Write>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <set_min_pwm+0x34>
	        {
	            HAL_Delay(20);
 8002fe6:	2014      	movs	r0, #20
 8002fe8:	f000 feb2 	bl	8003d50 <HAL_Delay>
	        }
	            if(Touch_Flag[0] == 0)                   //SWITCH_ON CASE
 8002fec:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <set_min_pwm+0xe8>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <set_min_pwm+0x46>
		        {
		             __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <set_min_pwm+0xe0>)
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <set_min_pwm+0xec>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
		        }
		        if(Touch_Flag[1] == 0)
 8002ffe:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <set_min_pwm+0xe8>)
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d104      	bne.n	8003010 <set_min_pwm+0x58>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <set_min_pwm+0xe0>)
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <set_min_pwm+0xec>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40
		        }
		        if(Touch_Flag[2] == 0)
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <set_min_pwm+0xe8>)
 8003012:	789b      	ldrb	r3, [r3, #2]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <set_min_pwm+0x6a>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <set_min_pwm+0xe0>)
 800301a:	781a      	ldrb	r2, [r3, #0]
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <set_min_pwm+0xf0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
		        }
		        if(Touch_Flag[3] == 0)
 8003022:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <set_min_pwm+0xe8>)
 8003024:	78db      	ldrb	r3, [r3, #3]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <set_min_pwm+0x7c>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <set_min_pwm+0xe0>)
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <set_min_pwm+0xec>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c
		        }
		        if(Touch_Flag[4] == 0)
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <set_min_pwm+0xe8>)
 8003036:	791b      	ldrb	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <set_min_pwm+0x8e>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <set_min_pwm+0xe0>)
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <set_min_pwm+0xf0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c
		        }
		        if(Touch_Flag[5] == 0)
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <set_min_pwm+0xe8>)
 8003048:	795b      	ldrb	r3, [r3, #5]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d104      	bne.n	8003058 <set_min_pwm+0xa0>
		        {
		            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <set_min_pwm+0xe0>)
 8003050:	781a      	ldrb	r2, [r3, #0]
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <set_min_pwm+0xec>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	639a      	str	r2, [r3, #56]	; 0x38
		        }
		        if(Touch_Flag[6] == 0)
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <set_min_pwm+0xe8>)
 800305a:	799b      	ldrb	r3, [r3, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <set_min_pwm+0xb2>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MIN_PWM);
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <set_min_pwm+0xe0>)
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <set_min_pwm+0xf0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
		        }
		        if(Touch_Flag[7] == 0)
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <set_min_pwm+0xe8>)
 800306c:	79db      	ldrb	r3, [r3, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <set_min_pwm+0xc4>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <set_min_pwm+0xe0>)
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <set_min_pwm+0xf0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	635a      	str	r2, [r3, #52]	; 0x34
		        }
		        if(Touch_Flag[8] == 0)
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <set_min_pwm+0xe8>)
 800307e:	7a1b      	ldrb	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <set_min_pwm+0xd6>
				{
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <set_min_pwm+0xe0>)
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <set_min_pwm+0xf4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	635a      	str	r2, [r3, #52]	; 0x34
				}

}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000001 	.word	0x20000001
 800309c:	200000bc 	.word	0x200000bc
 80030a0:	20000114 	.word	0x20000114
 80030a4:	200003b4 	.word	0x200003b4
 80030a8:	200003fc 	.word	0x200003fc
 80030ac:	20000324 	.word	0x20000324

080030b0 <Status_ReadData>:
void Status_ReadData()
{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b096      	sub	sp, #88	; 0x58
 80030b4:	af04      	add	r7, sp, #16
	uint8_t  Status_Tx_Buff[50]={0x55,0xAA,0x03,0x07,0x00,0x28,0x01,0x01,0x00,0x01,0x00,0x02,0x01,0x00,0x01,0x00,0x03,0x01,0x00,0x01,0x00,0x04,0x01,0x00,0x01,0x00,0x05,0x01,0x00,0x01,0x00,0x06,0x01,0x00,0x01,0x00,0x65,0x01,0x00,0x01,0x00};
 80030b6:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <Status_ReadData+0x148>)
 80030b8:	f107 040c 	add.w	r4, r7, #12
 80030bc:	461d      	mov	r5, r3
 80030be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030ca:	c403      	stmia	r4!, {r0, r1}
 80030cc:	8022      	strh	r2, [r4, #0]
 80030ce:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
	uint8_t  Switch_StatusNew[8];
	uint8_t  Check_Sum = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	uint32_t Tx_Data_Sum = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t  SW_State=0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	70fb      	strb	r3, [r7, #3]
	uint8_t  k =0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43


	for(uint8_t j=1;j<=NUMBER_OF_SWITCHES;j++)
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80030f2:	e024      	b.n	800313e <Status_ReadData+0x8e>
	{
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, j, I2C_MEMADD_SIZE_16BIT, &SW_State, 1, 10) == HAL_OK)
 80030f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	230a      	movs	r3, #10
 80030fc:	9302      	str	r3, [sp, #8]
 80030fe:	2301      	movs	r3, #1
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	1cfb      	adds	r3, r7, #3
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2310      	movs	r3, #16
 8003108:	21a0      	movs	r1, #160	; 0xa0
 800310a:	483c      	ldr	r0, [pc, #240]	; (80031fc <Status_ReadData+0x14c>)
 800310c:	f002 f864 	bl	80051d8 <HAL_I2C_Mem_Read>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <Status_ReadData+0x84>
		{
			  HAL_Delay(20);
 8003116:	2014      	movs	r0, #20
 8003118:	f000 fe1a 	bl	8003d50 <HAL_Delay>
			  Switch_StatusNew[k]= SW_State;
 800311c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	3348      	adds	r3, #72	; 0x48
 8003124:	443b      	add	r3, r7
 8003126:	f803 2c44 	strb.w	r2, [r3, #-68]
			  k++;
 800312a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800312e:	3301      	adds	r3, #1
 8003130:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for(uint8_t j=1;j<=NUMBER_OF_SWITCHES;j++)
 8003134:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003138:	3301      	adds	r3, #1
 800313a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800313e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003142:	2b07      	cmp	r3, #7
 8003144:	d9d6      	bls.n	80030f4 <Status_ReadData+0x44>
		}
	}
	uint8_t temp[2]={0};
 8003146:	2300      	movs	r3, #0
 8003148:	803b      	strh	r3, [r7, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 23, I2C_MEMADD_SIZE_16BIT, temp, 2, 10) == HAL_OK)
 800314a:	230a      	movs	r3, #10
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	2302      	movs	r3, #2
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	463b      	mov	r3, r7
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	2310      	movs	r3, #16
 8003158:	2217      	movs	r2, #23
 800315a:	21a0      	movs	r1, #160	; 0xa0
 800315c:	4827      	ldr	r0, [pc, #156]	; (80031fc <Status_ReadData+0x14c>)
 800315e:	f002 f83b 	bl	80051d8 <HAL_I2C_Mem_Read>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <Status_ReadData+0xbe>
	{
		HAL_Delay(20);
 8003168:	2014      	movs	r0, #20
 800316a:	f000 fdf1 	bl	8003d50 <HAL_Delay>
	}
	Status_Tx_Buff[10] =   Switch_StatusNew[0];
 800316e:	793b      	ldrb	r3, [r7, #4]
 8003170:	75bb      	strb	r3, [r7, #22]
	Status_Tx_Buff[15] =   Switch_StatusNew[1];
 8003172:	797b      	ldrb	r3, [r7, #5]
 8003174:	76fb      	strb	r3, [r7, #27]
	Status_Tx_Buff[20] =   Switch_StatusNew[2];
 8003176:	79bb      	ldrb	r3, [r7, #6]
 8003178:	f887 3020 	strb.w	r3, [r7, #32]
	Status_Tx_Buff[25] =   Switch_StatusNew[3];
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Status_Tx_Buff[30] =   Switch_StatusNew[4];
 8003182:	7a3b      	ldrb	r3, [r7, #8]
 8003184:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Status_Tx_Buff[35] =   Switch_StatusNew[5];
 8003188:	7a7b      	ldrb	r3, [r7, #9]
 800318a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Status_Tx_Buff[40] =   Switch_StatusNew[6];
 800318e:	7abb      	ldrb	r3, [r7, #10]
 8003190:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	Status_Tx_Buff[49] =   temp[2];
 8003194:	78bb      	ldrb	r3, [r7, #2]
 8003196:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	for(uint8_t i = 0; i <= 50; i++)
 800319a:	2300      	movs	r3, #0
 800319c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80031a0:	e00e      	b.n	80031c0 <Status_ReadData+0x110>
	{
	   Tx_Data_Sum += Status_Tx_Buff[i];
 80031a2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80031a6:	3348      	adds	r3, #72	; 0x48
 80031a8:	443b      	add	r3, r7
 80031aa:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80031ae:	461a      	mov	r2, r3
 80031b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b2:	4413      	add	r3, r2
 80031b4:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t i = 0; i <= 50; i++)
 80031b6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80031ba:	3301      	adds	r3, #1
 80031bc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80031c0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80031c4:	2b32      	cmp	r3, #50	; 0x32
 80031c6:	d9ec      	bls.n	80031a2 <Status_ReadData+0xf2>
	}

	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 80031c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ca:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	Status_Tx_Buff[50] = Check_Sum ;
 80031ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80031d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	HAL_UART_Transmit(&huart2,  Status_Tx_Buff, sizeof(Status_Tx_Buff),100);
 80031d6:	f107 010c 	add.w	r1, r7, #12
 80031da:	2364      	movs	r3, #100	; 0x64
 80031dc:	2232      	movs	r2, #50	; 0x32
 80031de:	4808      	ldr	r0, [pc, #32]	; (8003200 <Status_ReadData+0x150>)
 80031e0:	f004 fb76 	bl	80078d0 <HAL_UART_Transmit>
	Check_Sum = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	Tx_Data_Sum = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44

}
 80031ee:	bf00      	nop
 80031f0:	3748      	adds	r7, #72	; 0x48
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bdb0      	pop	{r4, r5, r7, pc}
 80031f6:	bf00      	nop
 80031f8:	0800833c 	.word	0x0800833c
 80031fc:	200000bc 	.word	0x200000bc
 8003200:	20000444 	.word	0x20000444

08003204 <EEPROM_initial>:
//*****************************EEPROM*********************************//
void EEPROM_initial()
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af04      	add	r7, sp, #16
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 22,I2C_MEMADD_SIZE_16BIT, &Temp_var, 1, 100)==HAL_OK)
 800320a:	2364      	movs	r3, #100	; 0x64
 800320c:	9302      	str	r3, [sp, #8]
 800320e:	2301      	movs	r3, #1
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <EEPROM_initial+0x180>)
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2310      	movs	r3, #16
 8003218:	2216      	movs	r2, #22
 800321a:	21a0      	movs	r1, #160	; 0xa0
 800321c:	485a      	ldr	r0, [pc, #360]	; (8003388 <EEPROM_initial+0x184>)
 800321e:	f001 ffdb 	bl	80051d8 <HAL_I2C_Mem_Read>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <EEPROM_initial+0x2a>
	{
		HAL_Delay(Delay);
 8003228:	2032      	movs	r0, #50	; 0x32
 800322a:	f000 fd91 	bl	8003d50 <HAL_Delay>
	}
	 if(Temp_var!=1)
 800322e:	4b55      	ldr	r3, [pc, #340]	; (8003384 <EEPROM_initial+0x180>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d038      	beq.n	80032a8 <EEPROM_initial+0xa4>
		    {
			    Temp_var=1;
 8003236:	4b53      	ldr	r3, [pc, #332]	; (8003384 <EEPROM_initial+0x180>)
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
			    if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 10) == HAL_OK)
 800323c:	230a      	movs	r3, #10
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	2301      	movs	r3, #1
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	4b51      	ldr	r3, [pc, #324]	; (800338c <EEPROM_initial+0x188>)
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2310      	movs	r3, #16
 800324a:	2214      	movs	r2, #20
 800324c:	21a0      	movs	r1, #160	; 0xa0
 800324e:	484e      	ldr	r0, [pc, #312]	; (8003388 <EEPROM_initial+0x184>)
 8003250:	f001 fec8 	bl	8004fe4 <HAL_I2C_Mem_Write>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <EEPROM_initial+0x5c>
			    {
			        HAL_Delay(20);
 800325a:	2014      	movs	r0, #20
 800325c:	f000 fd78 	bl	8003d50 <HAL_Delay>
			    }

			    if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 10) == HAL_OK)
 8003260:	230a      	movs	r3, #10
 8003262:	9302      	str	r3, [sp, #8]
 8003264:	2301      	movs	r3, #1
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	4b49      	ldr	r3, [pc, #292]	; (8003390 <EEPROM_initial+0x18c>)
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2310      	movs	r3, #16
 800326e:	2215      	movs	r2, #21
 8003270:	21a0      	movs	r1, #160	; 0xa0
 8003272:	4845      	ldr	r0, [pc, #276]	; (8003388 <EEPROM_initial+0x184>)
 8003274:	f001 feb6 	bl	8004fe4 <HAL_I2C_Mem_Write>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <EEPROM_initial+0x80>
			    {
			        HAL_Delay(20);
 800327e:	2014      	movs	r0, #20
 8003280:	f000 fd66 	bl	8003d50 <HAL_Delay>
			    }


			    if(HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADD,22,I2C_MEMADD_SIZE_16BIT,&Temp_var,1,100)==HAL_OK)
 8003284:	2364      	movs	r3, #100	; 0x64
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	2301      	movs	r3, #1
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <EEPROM_initial+0x180>)
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2310      	movs	r3, #16
 8003292:	2216      	movs	r2, #22
 8003294:	21a0      	movs	r1, #160	; 0xa0
 8003296:	483c      	ldr	r0, [pc, #240]	; (8003388 <EEPROM_initial+0x184>)
 8003298:	f001 fea4 	bl	8004fe4 <HAL_I2C_Mem_Write>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <EEPROM_initial+0xa4>
			    {
			        HAL_Delay(20);
 80032a2:	2014      	movs	r0, #20
 80032a4:	f000 fd54 	bl	8003d50 <HAL_Delay>
			    }
		    }

		    if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 10) == HAL_OK)
 80032a8:	230a      	movs	r3, #10
 80032aa:	9302      	str	r3, [sp, #8]
 80032ac:	2301      	movs	r3, #1
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <EEPROM_initial+0x188>)
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2310      	movs	r3, #16
 80032b6:	2214      	movs	r2, #20
 80032b8:	21a0      	movs	r1, #160	; 0xa0
 80032ba:	4833      	ldr	r0, [pc, #204]	; (8003388 <EEPROM_initial+0x184>)
 80032bc:	f001 ff8c 	bl	80051d8 <HAL_I2C_Mem_Read>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <EEPROM_initial+0xc8>
		    {
		        HAL_Delay(20);
 80032c6:	2014      	movs	r0, #20
 80032c8:	f000 fd42 	bl	8003d50 <HAL_Delay>
		    }

		    if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 10) == HAL_OK)
 80032cc:	230a      	movs	r3, #10
 80032ce:	9302      	str	r3, [sp, #8]
 80032d0:	2301      	movs	r3, #1
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <EEPROM_initial+0x18c>)
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2310      	movs	r3, #16
 80032da:	2215      	movs	r2, #21
 80032dc:	21a0      	movs	r1, #160	; 0xa0
 80032de:	482a      	ldr	r0, [pc, #168]	; (8003388 <EEPROM_initial+0x184>)
 80032e0:	f001 ff7a 	bl	80051d8 <HAL_I2C_Mem_Read>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <EEPROM_initial+0xec>
		    {
		        HAL_Delay(20);
 80032ea:	2014      	movs	r0, #20
 80032ec:	f000 fd30 	bl	8003d50 <HAL_Delay>
		    }
	        for(uint8_t i=1;i<=NUMBER_OF_SWITCHES;i++)
 80032f0:	2301      	movs	r3, #1
 80032f2:	71fb      	strb	r3, [r7, #7]
 80032f4:	e03d      	b.n	8003372 <EEPROM_initial+0x16e>
	        {
	              HAL_Delay(10);
 80032f6:	200a      	movs	r0, #10
 80032f8:	f000 fd2a 	bl	8003d50 <HAL_Delay>
	              uint8_t  SW_State=0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	71bb      	strb	r3, [r7, #6]

	              if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, i, I2C_MEMADD_SIZE_16BIT, &SW_State, 1, 10) == HAL_OK)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	b29a      	uxth	r2, r3
 8003304:	230a      	movs	r3, #10
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	2301      	movs	r3, #1
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	1dbb      	adds	r3, r7, #6
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2310      	movs	r3, #16
 8003312:	21a0      	movs	r1, #160	; 0xa0
 8003314:	481c      	ldr	r0, [pc, #112]	; (8003388 <EEPROM_initial+0x184>)
 8003316:	f001 ff5f 	bl	80051d8 <HAL_I2C_Mem_Read>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d11f      	bne.n	8003360 <EEPROM_initial+0x15c>
	              {

	                   HAL_Delay(20);
 8003320:	2014      	movs	r0, #20
 8003322:	f000 fd15 	bl	8003d50 <HAL_Delay>

	                   if(i==7)
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	2b07      	cmp	r3, #7
 800332a:	d119      	bne.n	8003360 <EEPROM_initial+0x15c>
	                   {
	                	   uint8_t temp_value[2] ={0};
 800332c:	2300      	movs	r3, #0
 800332e:	80bb      	strh	r3, [r7, #4]
	                	   if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD,23,I2C_MEMADD_SIZE_16BIT ,temp_value,2, 10)==HAL_OK)
 8003330:	230a      	movs	r3, #10
 8003332:	9302      	str	r3, [sp, #8]
 8003334:	2302      	movs	r3, #2
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2310      	movs	r3, #16
 800333e:	2217      	movs	r2, #23
 8003340:	21a0      	movs	r1, #160	; 0xa0
 8003342:	4811      	ldr	r0, [pc, #68]	; (8003388 <EEPROM_initial+0x184>)
 8003344:	f001 ff48 	bl	80051d8 <HAL_I2C_Mem_Read>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <EEPROM_initial+0x15c>
	                	  	  {
	                	  	        		HAL_Delay(20);
 800334e:	2014      	movs	r0, #20
 8003350:	f000 fcfe 	bl	8003d50 <HAL_Delay>
	                	  	        		dimmer_operation(SW_State, temp_value[1]);
 8003354:	79bb      	ldrb	r3, [r7, #6]
 8003356:	797a      	ldrb	r2, [r7, #5]
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f8e0 	bl	8002520 <dimmer_operation>
	                	  	   }
	                   }

	              }
	              switch_operation(i, SW_State);
 8003360:	79ba      	ldrb	r2, [r7, #6]
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe ff22 	bl	80021b0 <switch_operation>
	        for(uint8_t i=1;i<=NUMBER_OF_SWITCHES;i++)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	3301      	adds	r3, #1
 8003370:	71fb      	strb	r3, [r7, #7]
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b07      	cmp	r3, #7
 8003376:	d9be      	bls.n	80032f6 <EEPROM_initial+0xf2>
	        }

}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200002a0 	.word	0x200002a0
 8003388:	200000bc 	.word	0x200000bc
 800338c:	20000001 	.word	0x20000001
 8003390:	20000002 	.word	0x20000002

08003394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003398:	b672      	cpsid	i
}
 800339a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800339c:	e7fe      	b.n	800339c <Error_Handler+0x8>
	...

080033a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_MspInit+0x5c>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_MspInit+0x5c>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6193      	str	r3, [r2, #24]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_MspInit+0x5c>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_MspInit+0x5c>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <HAL_MspInit+0x5c>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	61d3      	str	r3, [r2, #28]
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_MspInit+0x5c>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_MspInit+0x60>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	4a04      	ldr	r2, [pc, #16]	; (8003400 <HAL_MspInit+0x60>)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40021000 	.word	0x40021000
 8003400:	40010000 	.word	0x40010000

08003404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <NMI_Handler+0x4>

0800340a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <HardFault_Handler+0x4>

08003410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <MemManage_Handler+0x4>

08003416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800341a:	e7fe      	b.n	800341a <BusFault_Handler+0x4>

0800341c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <UsageFault_Handler+0x4>

08003422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800344a:	f000 fc65 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}

08003452 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_Pin);
 8003456:	2001      	movs	r0, #1
 8003458:	f001 fc68 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}

08003460 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <TIM2_IRQHandler+0x10>)
 8003466:	f003 fbd3 	bl	8006c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	2000036c 	.word	0x2000036c

08003474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <USART2_IRQHandler+0x10>)
 800347a:	f004 faeb 	bl	8007a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000444 	.word	0x20000444

08003488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b096      	sub	sp, #88	; 0x58
 8003498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800349a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	611a      	str	r2, [r3, #16]
 80034c2:	615a      	str	r2, [r3, #20]
 80034c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	2220      	movs	r2, #32
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 ff0d 	bl	80082ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034d2:	4b50      	ldr	r3, [pc, #320]	; (8003614 <MX_TIM1_Init+0x180>)
 80034d4:	4a50      	ldr	r2, [pc, #320]	; (8003618 <MX_TIM1_Init+0x184>)
 80034d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80034d8:	4b4e      	ldr	r3, [pc, #312]	; (8003614 <MX_TIM1_Init+0x180>)
 80034da:	2214      	movs	r2, #20
 80034dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034de:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <MX_TIM1_Init+0x180>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <MX_TIM1_Init+0x180>)
 80034e6:	2264      	movs	r2, #100	; 0x64
 80034e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <MX_TIM1_Init+0x180>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034f0:	4b48      	ldr	r3, [pc, #288]	; (8003614 <MX_TIM1_Init+0x180>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <MX_TIM1_Init+0x180>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034fc:	4845      	ldr	r0, [pc, #276]	; (8003614 <MX_TIM1_Init+0x180>)
 80034fe:	f003 f9bd 	bl	800687c <HAL_TIM_Base_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003508:	f7ff ff44 	bl	8003394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800350c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003512:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003516:	4619      	mov	r1, r3
 8003518:	483e      	ldr	r0, [pc, #248]	; (8003614 <MX_TIM1_Init+0x180>)
 800351a:	f003 fd3f 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003524:	f7ff ff36 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003528:	483a      	ldr	r0, [pc, #232]	; (8003614 <MX_TIM1_Init+0x180>)
 800352a:	f003 fa77 	bl	8006a1c <HAL_TIM_PWM_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003534:	f7ff ff2e 	bl	8003394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003538:	2300      	movs	r3, #0
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003544:	4619      	mov	r1, r3
 8003546:	4833      	ldr	r0, [pc, #204]	; (8003614 <MX_TIM1_Init+0x180>)
 8003548:	f004 f8b4 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003552:	f7ff ff1f 	bl	8003394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003556:	2360      	movs	r3, #96	; 0x60
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800355e:	2300      	movs	r3, #0
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003562:	2300      	movs	r3, #0
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003566:	2300      	movs	r3, #0
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003576:	2200      	movs	r2, #0
 8003578:	4619      	mov	r1, r3
 800357a:	4826      	ldr	r0, [pc, #152]	; (8003614 <MX_TIM1_Init+0x180>)
 800357c:	f003 fc50 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003586:	f7ff ff05 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800358a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800358e:	2204      	movs	r2, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4820      	ldr	r0, [pc, #128]	; (8003614 <MX_TIM1_Init+0x180>)
 8003594:	f003 fc44 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800359e:	f7ff fef9 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a6:	2208      	movs	r2, #8
 80035a8:	4619      	mov	r1, r3
 80035aa:	481a      	ldr	r0, [pc, #104]	; (8003614 <MX_TIM1_Init+0x180>)
 80035ac:	f003 fc38 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80035b6:	f7ff feed 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035be:	220c      	movs	r2, #12
 80035c0:	4619      	mov	r1, r3
 80035c2:	4814      	ldr	r0, [pc, #80]	; (8003614 <MX_TIM1_Init+0x180>)
 80035c4:	f003 fc2c 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80035ce:	f7ff fee1 	bl	8003394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4807      	ldr	r0, [pc, #28]	; (8003614 <MX_TIM1_Init+0x180>)
 80035f6:	f004 f8bb 	bl	8007770 <HAL_TIMEx_ConfigBreakDeadTime>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003600:	f7ff fec8 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003604:	4803      	ldr	r0, [pc, #12]	; (8003614 <MX_TIM1_Init+0x180>)
 8003606:	f000 f9e1 	bl	80039cc <HAL_TIM_MspPostInit>

}
 800360a:	bf00      	nop
 800360c:	3758      	adds	r7, #88	; 0x58
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000324 	.word	0x20000324
 8003618:	40012c00 	.word	0x40012c00

0800361c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	609a      	str	r2, [r3, #8]
 800362e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003630:	463b      	mov	r3, r7
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <MX_TIM2_Init+0x94>)
 800363a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800363e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <MX_TIM2_Init+0x94>)
 8003642:	f240 321f 	movw	r2, #799	; 0x31f
 8003646:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <MX_TIM2_Init+0x94>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <MX_TIM2_Init+0x94>)
 8003650:	2263      	movs	r2, #99	; 0x63
 8003652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <MX_TIM2_Init+0x94>)
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <MX_TIM2_Init+0x94>)
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003660:	4813      	ldr	r0, [pc, #76]	; (80036b0 <MX_TIM2_Init+0x94>)
 8003662:	f003 f90b 	bl	800687c <HAL_TIM_Base_Init>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800366c:	f7ff fe92 	bl	8003394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003674:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003676:	f107 0308 	add.w	r3, r7, #8
 800367a:	4619      	mov	r1, r3
 800367c:	480c      	ldr	r0, [pc, #48]	; (80036b0 <MX_TIM2_Init+0x94>)
 800367e:	f003 fc8d 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003688:	f7ff fe84 	bl	8003394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003694:	463b      	mov	r3, r7
 8003696:	4619      	mov	r1, r3
 8003698:	4805      	ldr	r0, [pc, #20]	; (80036b0 <MX_TIM2_Init+0x94>)
 800369a:	f004 f80b 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80036a4:	f7ff fe76 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	2000036c 	.word	0x2000036c

080036b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08e      	sub	sp, #56	; 0x38
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c8:	f107 0320 	add.w	r3, r7, #32
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	611a      	str	r2, [r3, #16]
 80036e0:	615a      	str	r2, [r3, #20]
 80036e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036e4:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <MX_TIM3_Init+0x124>)
 80036e6:	4a3d      	ldr	r2, [pc, #244]	; (80037dc <MX_TIM3_Init+0x128>)
 80036e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <MX_TIM3_Init+0x124>)
 80036ec:	2214      	movs	r2, #20
 80036ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f0:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <MX_TIM3_Init+0x124>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80036f6:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <MX_TIM3_Init+0x124>)
 80036f8:	2264      	movs	r2, #100	; 0x64
 80036fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <MX_TIM3_Init+0x124>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003702:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <MX_TIM3_Init+0x124>)
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003708:	4833      	ldr	r0, [pc, #204]	; (80037d8 <MX_TIM3_Init+0x124>)
 800370a:	f003 f8b7 	bl	800687c <HAL_TIM_Base_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003714:	f7ff fe3e 	bl	8003394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800371e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003722:	4619      	mov	r1, r3
 8003724:	482c      	ldr	r0, [pc, #176]	; (80037d8 <MX_TIM3_Init+0x124>)
 8003726:	f003 fc39 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003730:	f7ff fe30 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003734:	4828      	ldr	r0, [pc, #160]	; (80037d8 <MX_TIM3_Init+0x124>)
 8003736:	f003 f971 	bl	8006a1c <HAL_TIM_PWM_Init>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003740:	f7ff fe28 	bl	8003394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003744:	2300      	movs	r3, #0
 8003746:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800374c:	f107 0320 	add.w	r3, r7, #32
 8003750:	4619      	mov	r1, r3
 8003752:	4821      	ldr	r0, [pc, #132]	; (80037d8 <MX_TIM3_Init+0x124>)
 8003754:	f003 ffae 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800375e:	f7ff fe19 	bl	8003394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003762:	2360      	movs	r3, #96	; 0x60
 8003764:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	2200      	movs	r2, #0
 8003776:	4619      	mov	r1, r3
 8003778:	4817      	ldr	r0, [pc, #92]	; (80037d8 <MX_TIM3_Init+0x124>)
 800377a:	f003 fb51 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003784:	f7ff fe06 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	2204      	movs	r2, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4812      	ldr	r0, [pc, #72]	; (80037d8 <MX_TIM3_Init+0x124>)
 8003790:	f003 fb46 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800379a:	f7ff fdfb 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	2208      	movs	r2, #8
 80037a2:	4619      	mov	r1, r3
 80037a4:	480c      	ldr	r0, [pc, #48]	; (80037d8 <MX_TIM3_Init+0x124>)
 80037a6:	f003 fb3b 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 80037b0:	f7ff fdf0 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	220c      	movs	r2, #12
 80037b8:	4619      	mov	r1, r3
 80037ba:	4807      	ldr	r0, [pc, #28]	; (80037d8 <MX_TIM3_Init+0x124>)
 80037bc:	f003 fb30 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80037c6:	f7ff fde5 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80037ca:	4803      	ldr	r0, [pc, #12]	; (80037d8 <MX_TIM3_Init+0x124>)
 80037cc:	f000 f8fe 	bl	80039cc <HAL_TIM_MspPostInit>

}
 80037d0:	bf00      	nop
 80037d2:	3738      	adds	r7, #56	; 0x38
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	200003b4 	.word	0x200003b4
 80037dc:	40000400 	.word	0x40000400

080037e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08e      	sub	sp, #56	; 0x38
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f4:	f107 0320 	add.w	r3, r7, #32
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
 800380c:	615a      	str	r2, [r3, #20]
 800380e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003810:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <MX_TIM4_Init+0x124>)
 8003812:	4a3d      	ldr	r2, [pc, #244]	; (8003908 <MX_TIM4_Init+0x128>)
 8003814:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20;
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <MX_TIM4_Init+0x124>)
 8003818:	2214      	movs	r2, #20
 800381a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381c:	4b39      	ldr	r3, [pc, #228]	; (8003904 <MX_TIM4_Init+0x124>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <MX_TIM4_Init+0x124>)
 8003824:	2264      	movs	r2, #100	; 0x64
 8003826:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003828:	4b36      	ldr	r3, [pc, #216]	; (8003904 <MX_TIM4_Init+0x124>)
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800382e:	4b35      	ldr	r3, [pc, #212]	; (8003904 <MX_TIM4_Init+0x124>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003834:	4833      	ldr	r0, [pc, #204]	; (8003904 <MX_TIM4_Init+0x124>)
 8003836:	f003 f821 	bl	800687c <HAL_TIM_Base_Init>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8003840:	f7ff fda8 	bl	8003394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800384a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800384e:	4619      	mov	r1, r3
 8003850:	482c      	ldr	r0, [pc, #176]	; (8003904 <MX_TIM4_Init+0x124>)
 8003852:	f003 fba3 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800385c:	f7ff fd9a 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003860:	4828      	ldr	r0, [pc, #160]	; (8003904 <MX_TIM4_Init+0x124>)
 8003862:	f003 f8db 	bl	8006a1c <HAL_TIM_PWM_Init>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800386c:	f7ff fd92 	bl	8003394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003878:	f107 0320 	add.w	r3, r7, #32
 800387c:	4619      	mov	r1, r3
 800387e:	4821      	ldr	r0, [pc, #132]	; (8003904 <MX_TIM4_Init+0x124>)
 8003880:	f003 ff18 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800388a:	f7ff fd83 	bl	8003394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800388e:	2360      	movs	r3, #96	; 0x60
 8003890:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	2200      	movs	r2, #0
 80038a2:	4619      	mov	r1, r3
 80038a4:	4817      	ldr	r0, [pc, #92]	; (8003904 <MX_TIM4_Init+0x124>)
 80038a6:	f003 fabb 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80038b0:	f7ff fd70 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	2204      	movs	r2, #4
 80038b8:	4619      	mov	r1, r3
 80038ba:	4812      	ldr	r0, [pc, #72]	; (8003904 <MX_TIM4_Init+0x124>)
 80038bc:	f003 fab0 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80038c6:	f7ff fd65 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038ca:	1d3b      	adds	r3, r7, #4
 80038cc:	2208      	movs	r2, #8
 80038ce:	4619      	mov	r1, r3
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <MX_TIM4_Init+0x124>)
 80038d2:	f003 faa5 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80038dc:	f7ff fd5a 	bl	8003394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	220c      	movs	r2, #12
 80038e4:	4619      	mov	r1, r3
 80038e6:	4807      	ldr	r0, [pc, #28]	; (8003904 <MX_TIM4_Init+0x124>)
 80038e8:	f003 fa9a 	bl	8006e20 <HAL_TIM_PWM_ConfigChannel>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 80038f2:	f7ff fd4f 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80038f6:	4803      	ldr	r0, [pc, #12]	; (8003904 <MX_TIM4_Init+0x124>)
 80038f8:	f000 f868 	bl	80039cc <HAL_TIM_MspPostInit>

}
 80038fc:	bf00      	nop
 80038fe:	3738      	adds	r7, #56	; 0x38
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200003fc 	.word	0x200003fc
 8003908:	40000800 	.word	0x40000800

0800390c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a28      	ldr	r2, [pc, #160]	; (80039bc <HAL_TIM_Base_MspInit+0xb0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10c      	bne.n	8003938 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003928:	6193      	str	r3, [r2, #24]
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003936:	e03c      	b.n	80039b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d114      	bne.n	800396c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	61d3      	str	r3, [r2, #28]
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800395a:	2200      	movs	r2, #0
 800395c:	210f      	movs	r1, #15
 800395e:	201c      	movs	r0, #28
 8003960:	f000 ff49 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003964:	201c      	movs	r0, #28
 8003966:	f000 ff62 	bl	800482e <HAL_NVIC_EnableIRQ>
}
 800396a:	e022      	b.n	80039b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <HAL_TIM_Base_MspInit+0xb8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10c      	bne.n	8003990 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	61d3      	str	r3, [r2, #28]
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
}
 800398e:	e010      	b.n	80039b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <HAL_TIM_Base_MspInit+0xbc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10b      	bne.n	80039b2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	61d3      	str	r3, [r2, #28]
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_TIM_Base_MspInit+0xb4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800

080039cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	; 0x30
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a48      	ldr	r2, [pc, #288]	; (8003b08 <HAL_TIM_MspPostInit+0x13c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d12b      	bne.n	8003a44 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039ec:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	4a46      	ldr	r2, [pc, #280]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 80039f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f6:	6193      	str	r3, [r2, #24]
 80039f8:	4b44      	ldr	r3, [pc, #272]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED8_Pin|indication_led_Pin|LED9_Pin|LED10_Pin;
 8003a04:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4619      	mov	r1, r3
 8003a18:	483d      	ldr	r0, [pc, #244]	; (8003b10 <HAL_TIM_MspPostInit+0x144>)
 8003a1a:	f000 ffd3 	bl	80049c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_TIM_MspPostInit+0x148>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <HAL_TIM_MspPostInit+0x148>)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003a42:	e05c      	b.n	8003afe <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a33      	ldr	r2, [pc, #204]	; (8003b18 <HAL_TIM_MspPostInit+0x14c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d12b      	bne.n	8003aa6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	4a2e      	ldr	r2, [pc, #184]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 8003a54:	f043 0310 	orr.w	r3, r3, #16
 8003a58:	6193      	str	r3, [r2, #24]
 8003a5a:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED0_Pin|LED5_Pin|LED3_Pin|LED1_Pin;
 8003a66:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a70:	2302      	movs	r3, #2
 8003a72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4828      	ldr	r0, [pc, #160]	; (8003b1c <HAL_TIM_MspPostInit+0x150>)
 8003a7c:	f000 ffa2 	bl	80049c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003a80:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <HAL_TIM_MspPostInit+0x148>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_TIM_MspPostInit+0x148>)
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	6053      	str	r3, [r2, #4]
}
 8003aa4:	e02b      	b.n	8003afe <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <HAL_TIM_MspPostInit+0x154>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d126      	bne.n	8003afe <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 8003ab6:	f043 0320 	orr.w	r3, r3, #32
 8003aba:	6193      	str	r3, [r2, #24]
 8003abc:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_TIM_MspPostInit+0x140>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED7_Pin|LED6_Pin|LED4_Pin|LED2_Pin;
 8003ac8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4619      	mov	r1, r3
 8003adc:	4811      	ldr	r0, [pc, #68]	; (8003b24 <HAL_TIM_MspPostInit+0x158>)
 8003ade:	f000 ff71 	bl	80049c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_TIM_MspPostInit+0x148>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af8:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <HAL_TIM_MspPostInit+0x148>)
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	6053      	str	r3, [r2, #4]
}
 8003afe:	bf00      	nop
 8003b00:	3730      	adds	r7, #48	; 0x30
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40011800 	.word	0x40011800
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40011000 	.word	0x40011000
 8003b20:	40000800 	.word	0x40000800
 8003b24:	40011400 	.word	0x40011400

08003b28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <MX_USART2_UART_Init+0x50>)
 8003b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b4e:	220c      	movs	r2, #12
 8003b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b5e:	4805      	ldr	r0, [pc, #20]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b60:	f003 fe69 	bl	8007836 <HAL_UART_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b6a:	f7ff fc13 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000444 	.word	0x20000444
 8003b78:	40004400 	.word	0x40004400

08003b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_UART_MspInit+0xb4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d145      	bne.n	8003c28 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_UART_MspInit+0xb8>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <HAL_UART_MspInit+0xb8>)
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba6:	61d3      	str	r3, [r2, #28]
 8003ba8:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_UART_MspInit+0xb8>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <HAL_UART_MspInit+0xb8>)
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	4a1e      	ldr	r2, [pc, #120]	; (8003c34 <HAL_UART_MspInit+0xb8>)
 8003bba:	f043 0320 	orr.w	r3, r3, #32
 8003bbe:	6193      	str	r3, [r2, #24]
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <HAL_UART_MspInit+0xb8>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STM_TX_Pin;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(STM_TX_GPIO_Port, &GPIO_InitStruct);
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4816      	ldr	r0, [pc, #88]	; (8003c38 <HAL_UART_MspInit+0xbc>)
 8003be0:	f000 fef0 	bl	80049c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_RX_Pin;
 8003be4:	2340      	movs	r3, #64	; 0x40
 8003be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STM_RX_GPIO_Port, &GPIO_InitStruct);
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4810      	ldr	r0, [pc, #64]	; (8003c38 <HAL_UART_MspInit+0xbc>)
 8003bf8:	f000 fee4 	bl	80049c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <HAL_UART_MspInit+0xc0>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	f043 0308 	orr.w	r3, r3, #8
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <HAL_UART_MspInit+0xc0>)
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	6053      	str	r3, [r2, #4]

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	2026      	movs	r0, #38	; 0x26
 8003c1e:	f000 fdea 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c22:	2026      	movs	r0, #38	; 0x26
 8003c24:	f000 fe03 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3728      	adds	r7, #40	; 0x28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40004400 	.word	0x40004400
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40011400 	.word	0x40011400
 8003c3c:	40010000 	.word	0x40010000

08003c40 <Reset_Handler>:
 8003c40:	480c      	ldr	r0, [pc, #48]	; (8003c74 <LoopFillZerobss+0x12>)
 8003c42:	490d      	ldr	r1, [pc, #52]	; (8003c78 <LoopFillZerobss+0x16>)
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <LoopFillZerobss+0x1a>)
 8003c46:	2300      	movs	r3, #0
 8003c48:	e002      	b.n	8003c50 <LoopCopyDataInit>

08003c4a <CopyDataInit>:
 8003c4a:	58d4      	ldr	r4, [r2, r3]
 8003c4c:	50c4      	str	r4, [r0, r3]
 8003c4e:	3304      	adds	r3, #4

08003c50 <LoopCopyDataInit>:
 8003c50:	18c4      	adds	r4, r0, r3
 8003c52:	428c      	cmp	r4, r1
 8003c54:	d3f9      	bcc.n	8003c4a <CopyDataInit>
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <LoopFillZerobss+0x1e>)
 8003c58:	4c0a      	ldr	r4, [pc, #40]	; (8003c84 <LoopFillZerobss+0x22>)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e001      	b.n	8003c62 <LoopFillZerobss>

08003c5e <FillZerobss>:
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	3204      	adds	r2, #4

08003c62 <LoopFillZerobss>:
 8003c62:	42a2      	cmp	r2, r4
 8003c64:	d3fb      	bcc.n	8003c5e <FillZerobss>
 8003c66:	f7ff fc0f 	bl	8003488 <SystemInit>
 8003c6a:	f004 fb1b 	bl	80082a4 <__libc_init_array>
 8003c6e:	f7fd f883 	bl	8000d78 <main>
 8003c72:	4770      	bx	lr
 8003c74:	20000000 	.word	0x20000000
 8003c78:	20000070 	.word	0x20000070
 8003c7c:	080083b0 	.word	0x080083b0
 8003c80:	20000070 	.word	0x20000070
 8003c84:	2000048c 	.word	0x2000048c

08003c88 <ADC1_2_IRQHandler>:
 8003c88:	e7fe      	b.n	8003c88 <ADC1_2_IRQHandler>
	...

08003c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_Init+0x28>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <HAL_Init+0x28>)
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f000 fd9f 	bl	80047e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ca2:	200d      	movs	r0, #13
 8003ca4:	f000 f808 	bl	8003cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca8:	f7ff fb7a 	bl	80033a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40022000 	.word	0x40022000

08003cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_InitTick+0x54>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_InitTick+0x58>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fdb7 	bl	800484a <HAL_SYSTICK_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00e      	b.n	8003d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d80a      	bhi.n	8003d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cec:	2200      	movs	r2, #0
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f000 fd7f 	bl	80047f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cf8:	4a06      	ldr	r2, [pc, #24]	; (8003d14 <HAL_InitTick+0x5c>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000064 	.word	0x20000064
 8003d10:	2000006c 	.word	0x2000006c
 8003d14:	20000068 	.word	0x20000068

08003d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_IncTick+0x1c>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_IncTick+0x20>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a03      	ldr	r2, [pc, #12]	; (8003d38 <HAL_IncTick+0x20>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	2000006c 	.word	0x2000006c
 8003d38:	20000488 	.word	0x20000488

08003d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d40:	4b02      	ldr	r3, [pc, #8]	; (8003d4c <HAL_GetTick+0x10>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	20000488 	.word	0x20000488

08003d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_GetTick>
 8003d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d005      	beq.n	8003d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_Delay+0x44>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d76:	bf00      	nop
 8003d78:	f7ff ffe0 	bl	8003d3c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d8f7      	bhi.n	8003d78 <HAL_Delay+0x28>
  {
  }
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	2000006c 	.word	0x2000006c

08003d98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0be      	b.n	8003f38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fc fe0c 	bl	80009f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fbf1 	bl	80045c4 <ADC_ConversionStop_Disable>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 8099 	bne.w	8003f26 <HAL_ADC_Init+0x18e>
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f040 8095 	bne.w	8003f26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e04:	f023 0302 	bic.w	r3, r3, #2
 8003e08:	f043 0202 	orr.w	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7b1b      	ldrb	r3, [r3, #12]
 8003e1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e30:	d003      	beq.n	8003e3a <HAL_ADC_Init+0xa2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d102      	bne.n	8003e40 <HAL_ADC_Init+0xa8>
 8003e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e3e:	e000      	b.n	8003e42 <HAL_ADC_Init+0xaa>
 8003e40:	2300      	movs	r3, #0
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7d1b      	ldrb	r3, [r3, #20]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d119      	bne.n	8003e84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7b1b      	ldrb	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	035a      	lsls	r2, r3, #13
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	e00b      	b.n	8003e84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <HAL_ADC_Init+0x1a8>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb4:	d003      	beq.n	8003ebe <HAL_ADC_Init+0x126>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d104      	bne.n	8003ec8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	051b      	lsls	r3, r3, #20
 8003ec6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <HAL_ADC_Init+0x1ac>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d10b      	bne.n	8003f04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f02:	e018      	b.n	8003f36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f023 0312 	bic.w	r3, r3, #18
 8003f0c:	f043 0210 	orr.w	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	f043 0201 	orr.w	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f24:	e007      	b.n	8003f36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f043 0210 	orr.w	r2, r3, #16
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	ffe1f7fd 	.word	0xffe1f7fd
 8003f44:	ff1f0efe 	.word	0xff1f0efe

08003f48 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_Start+0x1a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e098      	b.n	8004094 <HAL_ADC_Start+0x14c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fad0 	bl	8004510 <ADC_Enable>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 8087 	bne.w	800408a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a41      	ldr	r2, [pc, #260]	; (800409c <HAL_ADC_Start+0x154>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d105      	bne.n	8003fa6 <HAL_ADC_Start+0x5e>
 8003f9a:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <HAL_ADC_Start+0x158>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d115      	bne.n	8003fd2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d026      	beq.n	800400e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fd0:	e01d      	b.n	800400e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2f      	ldr	r2, [pc, #188]	; (80040a0 <HAL_ADC_Start+0x158>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_ADC_Start+0xaa>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2b      	ldr	r2, [pc, #172]	; (800409c <HAL_ADC_Start+0x154>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10d      	bne.n	800400e <HAL_ADC_Start+0xc6>
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <HAL_ADC_Start+0x158>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	f023 0206 	bic.w	r2, r3, #6
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c
 8004026:	e002      	b.n	800402e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f06f 0202 	mvn.w	r2, #2
 800403e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800404a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800404e:	d113      	bne.n	8004078 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004054:	4a11      	ldr	r2, [pc, #68]	; (800409c <HAL_ADC_Start+0x154>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d105      	bne.n	8004066 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_ADC_Start+0x158>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004062:	2b00      	cmp	r3, #0
 8004064:	d108      	bne.n	8004078 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	e00c      	b.n	8004092 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	e003      	b.n	8004092 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40012800 	.word	0x40012800
 80040a0:	40012400 	.word	0x40012400

080040a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_ADC_Stop+0x1a>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e01a      	b.n	80040f4 <HAL_ADC_Stop+0x50>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa7c 	bl	80045c4 <ADC_ConversionStop_Disable>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	f043 0201 	orr.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040fc:	b590      	push	{r4, r7, lr}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004112:	f7ff fe13 	bl	8003d3c <HAL_GetTick>
 8004116:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0d3      	b.n	80042e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d131      	bne.n	80041b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004156:	2b00      	cmp	r3, #0
 8004158:	d12a      	bne.n	80041b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800415a:	e021      	b.n	80041a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d01d      	beq.n	80041a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_ADC_PollForConversion+0x7e>
 800416a:	f7ff fde7 	bl	8003d3c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d212      	bcs.n	80041a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0a2      	b.n	80042e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0d6      	beq.n	800415c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80041ae:	e070      	b.n	8004292 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80041b0:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <HAL_ADC_PollForConversion+0x1f4>)
 80041b2:	681c      	ldr	r4, [r3, #0]
 80041b4:	2002      	movs	r0, #2
 80041b6:	f002 faa1 	bl	80066fc <HAL_RCCEx_GetPeriphCLKFreq>
 80041ba:	4603      	mov	r3, r0
 80041bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6919      	ldr	r1, [r3, #16]
 80041c6:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <HAL_ADC_PollForConversion+0x1f8>)
 80041c8:	400b      	ands	r3, r1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d118      	bne.n	8004200 <HAL_ADC_PollForConversion+0x104>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68d9      	ldr	r1, [r3, #12]
 80041d4:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <HAL_ADC_PollForConversion+0x1fc>)
 80041d6:	400b      	ands	r3, r1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d111      	bne.n	8004200 <HAL_ADC_PollForConversion+0x104>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6919      	ldr	r1, [r3, #16]
 80041e2:	4b46      	ldr	r3, [pc, #280]	; (80042fc <HAL_ADC_PollForConversion+0x200>)
 80041e4:	400b      	ands	r3, r1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <HAL_ADC_PollForConversion+0x100>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68d9      	ldr	r1, [r3, #12]
 80041f0:	4b43      	ldr	r3, [pc, #268]	; (8004300 <HAL_ADC_PollForConversion+0x204>)
 80041f2:	400b      	ands	r3, r1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_PollForConversion+0x100>
 80041f8:	2314      	movs	r3, #20
 80041fa:	e020      	b.n	800423e <HAL_ADC_PollForConversion+0x142>
 80041fc:	2329      	movs	r3, #41	; 0x29
 80041fe:	e01e      	b.n	800423e <HAL_ADC_PollForConversion+0x142>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6919      	ldr	r1, [r3, #16]
 8004206:	4b3d      	ldr	r3, [pc, #244]	; (80042fc <HAL_ADC_PollForConversion+0x200>)
 8004208:	400b      	ands	r3, r1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_ADC_PollForConversion+0x120>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68d9      	ldr	r1, [r3, #12]
 8004214:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <HAL_ADC_PollForConversion+0x204>)
 8004216:	400b      	ands	r3, r1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <HAL_ADC_PollForConversion+0x13c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6919      	ldr	r1, [r3, #16]
 8004222:	4b38      	ldr	r3, [pc, #224]	; (8004304 <HAL_ADC_PollForConversion+0x208>)
 8004224:	400b      	ands	r3, r1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <HAL_ADC_PollForConversion+0x140>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68d9      	ldr	r1, [r3, #12]
 8004230:	4b34      	ldr	r3, [pc, #208]	; (8004304 <HAL_ADC_PollForConversion+0x208>)
 8004232:	400b      	ands	r3, r1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_ADC_PollForConversion+0x140>
 8004238:	2354      	movs	r3, #84	; 0x54
 800423a:	e000      	b.n	800423e <HAL_ADC_PollForConversion+0x142>
 800423c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004244:	e021      	b.n	800428a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d01a      	beq.n	8004284 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_ADC_PollForConversion+0x168>
 8004254:	f7ff fd72 	bl	8003d3c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d20f      	bcs.n	8004284 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d90b      	bls.n	8004284 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	f043 0204 	orr.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e030      	b.n	80042e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3301      	adds	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	d8d9      	bhi.n	8004246 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f06f 0212 	mvn.w	r2, #18
 800429a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80042b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80042b6:	d115      	bne.n	80042e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	f043 0201 	orr.w	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd90      	pop	{r4, r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000064 	.word	0x20000064
 80042f4:	24924924 	.word	0x24924924
 80042f8:	00924924 	.word	0x00924924
 80042fc:	12492492 	.word	0x12492492
 8004300:	00492492 	.word	0x00492492
 8004304:	00249249 	.word	0x00249249

08004308 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x20>
 800433c:	2302      	movs	r3, #2
 800433e:	e0dc      	b.n	80044fa <HAL_ADC_ConfigChannel+0x1da>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d81c      	bhi.n	800438a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	3b05      	subs	r3, #5
 8004362:	221f      	movs	r2, #31
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	4019      	ands	r1, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	3b05      	subs	r3, #5
 800437c:	fa00 f203 	lsl.w	r2, r0, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	635a      	str	r2, [r3, #52]	; 0x34
 8004388:	e03c      	b.n	8004404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d81c      	bhi.n	80043cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	3b23      	subs	r3, #35	; 0x23
 80043a4:	221f      	movs	r2, #31
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	4019      	ands	r1, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	3b23      	subs	r3, #35	; 0x23
 80043be:	fa00 f203 	lsl.w	r2, r0, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ca:	e01b      	b.n	8004404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	3b41      	subs	r3, #65	; 0x41
 80043de:	221f      	movs	r2, #31
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	4019      	ands	r1, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	3b41      	subs	r3, #65	; 0x41
 80043f8:	fa00 f203 	lsl.w	r2, r0, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b09      	cmp	r3, #9
 800440a:	d91c      	bls.n	8004446 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68d9      	ldr	r1, [r3, #12]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	3b1e      	subs	r3, #30
 800441e:	2207      	movs	r2, #7
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	4019      	ands	r1, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6898      	ldr	r0, [r3, #8]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	3b1e      	subs	r3, #30
 8004438:	fa00 f203 	lsl.w	r2, r0, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	60da      	str	r2, [r3, #12]
 8004444:	e019      	b.n	800447a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6919      	ldr	r1, [r3, #16]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4413      	add	r3, r2
 8004456:	2207      	movs	r2, #7
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	4019      	ands	r1, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6898      	ldr	r0, [r3, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	fa00 f203 	lsl.w	r2, r0, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b10      	cmp	r3, #16
 8004480:	d003      	beq.n	800448a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004486:	2b11      	cmp	r3, #17
 8004488:	d132      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <HAL_ADC_ConfigChannel+0x1e4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d125      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d126      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d11a      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <HAL_ADC_ConfigChannel+0x1e8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a13      	ldr	r2, [pc, #76]	; (800450c <HAL_ADC_ConfigChannel+0x1ec>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	0c9a      	lsrs	r2, r3, #18
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044d0:	e002      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f9      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x1b2>
 80044de:	e007      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	40012400 	.word	0x40012400
 8004508:	20000064 	.word	0x20000064
 800450c:	431bde83 	.word	0x431bde83

08004510 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d040      	beq.n	80045b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800453e:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <ADC_Enable+0xac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <ADC_Enable+0xb0>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	0c9b      	lsrs	r3, r3, #18
 800454a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800454c:	e002      	b.n	8004554 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3b01      	subs	r3, #1
 8004552:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f9      	bne.n	800454e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800455a:	f7ff fbef 	bl	8003d3c <HAL_GetTick>
 800455e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004560:	e01f      	b.n	80045a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004562:	f7ff fbeb 	bl	8003d3c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d918      	bls.n	80045a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d011      	beq.n	80045a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e007      	b.n	80045b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d1d8      	bne.n	8004562 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000064 	.word	0x20000064
 80045c0:	431bde83 	.word	0x431bde83

080045c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d12e      	bne.n	800463c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045ee:	f7ff fba5 	bl	8003d3c <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045f4:	e01b      	b.n	800462e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045f6:	f7ff fba1 	bl	8003d3c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d914      	bls.n	800462e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d10d      	bne.n	800462e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f043 0210 	orr.w	r2, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e007      	b.n	800463e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d0dc      	beq.n	80045f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467a:	4a04      	ldr	r2, [pc, #16]	; (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	60d3      	str	r3, [r2, #12]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 0307 	and.w	r3, r3, #7
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db0b      	blt.n	80046d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	4906      	ldr	r1, [pc, #24]	; (80046e0 <__NVIC_EnableIRQ+0x34>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2001      	movs	r0, #1
 80046ce:	fa00 f202 	lsl.w	r2, r0, r2
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	e000e100 	.word	0xe000e100

080046e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	6039      	str	r1, [r7, #0]
 80046ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	db0a      	blt.n	800470e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	490c      	ldr	r1, [pc, #48]	; (8004730 <__NVIC_SetPriority+0x4c>)
 80046fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004702:	0112      	lsls	r2, r2, #4
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	440b      	add	r3, r1
 8004708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800470c:	e00a      	b.n	8004724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4908      	ldr	r1, [pc, #32]	; (8004734 <__NVIC_SetPriority+0x50>)
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	3b04      	subs	r3, #4
 800471c:	0112      	lsls	r2, r2, #4
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	440b      	add	r3, r1
 8004722:	761a      	strb	r2, [r3, #24]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000e100 	.word	0xe000e100
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f1c3 0307 	rsb	r3, r3, #7
 8004752:	2b04      	cmp	r3, #4
 8004754:	bf28      	it	cs
 8004756:	2304      	movcs	r3, #4
 8004758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3304      	adds	r3, #4
 800475e:	2b06      	cmp	r3, #6
 8004760:	d902      	bls.n	8004768 <NVIC_EncodePriority+0x30>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3b03      	subs	r3, #3
 8004766:	e000      	b.n	800476a <NVIC_EncodePriority+0x32>
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800476c:	f04f 32ff 	mov.w	r2, #4294967295
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	401a      	ands	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004780:	f04f 31ff 	mov.w	r1, #4294967295
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	43d9      	mvns	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	4313      	orrs	r3, r2
         );
}
 8004792:	4618      	mov	r0, r3
 8004794:	3724      	adds	r7, #36	; 0x24
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ac:	d301      	bcc.n	80047b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ae:	2301      	movs	r3, #1
 80047b0:	e00f      	b.n	80047d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047b2:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <SysTick_Config+0x40>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ba:	210f      	movs	r1, #15
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	f7ff ff90 	bl	80046e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <SysTick_Config+0x40>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <SysTick_Config+0x40>)
 80047cc:	2207      	movs	r2, #7
 80047ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	e000e010 	.word	0xe000e010

080047e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff2d 	bl	8004648 <__NVIC_SetPriorityGrouping>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	4603      	mov	r3, r0
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004808:	f7ff ff42 	bl	8004690 <__NVIC_GetPriorityGrouping>
 800480c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	6978      	ldr	r0, [r7, #20]
 8004814:	f7ff ff90 	bl	8004738 <NVIC_EncodePriority>
 8004818:	4602      	mov	r2, r0
 800481a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff5f 	bl	80046e4 <__NVIC_SetPriority>
}
 8004826:	bf00      	nop
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff35 	bl	80046ac <__NVIC_EnableIRQ>
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ffa2 	bl	800479c <SysTick_Config>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004874:	2b02      	cmp	r3, #2
 8004876:	d008      	beq.n	800488a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2204      	movs	r2, #4
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e020      	b.n	80048cc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 020e 	bic.w	r2, r2, #14
 8004898:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f202 	lsl.w	r2, r1, r2
 80048b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d005      	beq.n	80048fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
 80048f8:	e051      	b.n	800499e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 020e 	bic.w	r2, r2, #14
 8004908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <HAL_DMA_Abort_IT+0xd0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d029      	beq.n	8004978 <HAL_DMA_Abort_IT+0xa0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_DMA_Abort_IT+0xd4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d022      	beq.n	8004974 <HAL_DMA_Abort_IT+0x9c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_DMA_Abort_IT+0xd8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d01a      	beq.n	800496e <HAL_DMA_Abort_IT+0x96>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_DMA_Abort_IT+0xdc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d012      	beq.n	8004968 <HAL_DMA_Abort_IT+0x90>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_DMA_Abort_IT+0xe0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00a      	beq.n	8004962 <HAL_DMA_Abort_IT+0x8a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_DMA_Abort_IT+0xe4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d102      	bne.n	800495c <HAL_DMA_Abort_IT+0x84>
 8004956:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800495a:	e00e      	b.n	800497a <HAL_DMA_Abort_IT+0xa2>
 800495c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004960:	e00b      	b.n	800497a <HAL_DMA_Abort_IT+0xa2>
 8004962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004966:	e008      	b.n	800497a <HAL_DMA_Abort_IT+0xa2>
 8004968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800496c:	e005      	b.n	800497a <HAL_DMA_Abort_IT+0xa2>
 800496e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004972:	e002      	b.n	800497a <HAL_DMA_Abort_IT+0xa2>
 8004974:	2310      	movs	r3, #16
 8004976:	e000      	b.n	800497a <HAL_DMA_Abort_IT+0xa2>
 8004978:	2301      	movs	r3, #1
 800497a:	4a11      	ldr	r2, [pc, #68]	; (80049c0 <HAL_DMA_Abort_IT+0xe8>)
 800497c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
    } 
  }
  return status;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40020008 	.word	0x40020008
 80049ac:	4002001c 	.word	0x4002001c
 80049b0:	40020030 	.word	0x40020030
 80049b4:	40020044 	.word	0x40020044
 80049b8:	40020058 	.word	0x40020058
 80049bc:	4002006c 	.word	0x4002006c
 80049c0:	40020000 	.word	0x40020000

080049c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b08b      	sub	sp, #44	; 0x2c
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d6:	e169      	b.n	8004cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049d8:	2201      	movs	r2, #1
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	f040 8158 	bne.w	8004ca6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4a9a      	ldr	r2, [pc, #616]	; (8004c64 <HAL_GPIO_Init+0x2a0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d05e      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a00:	4a98      	ldr	r2, [pc, #608]	; (8004c64 <HAL_GPIO_Init+0x2a0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d875      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a06:	4a98      	ldr	r2, [pc, #608]	; (8004c68 <HAL_GPIO_Init+0x2a4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d058      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a0c:	4a96      	ldr	r2, [pc, #600]	; (8004c68 <HAL_GPIO_Init+0x2a4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d86f      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a12:	4a96      	ldr	r2, [pc, #600]	; (8004c6c <HAL_GPIO_Init+0x2a8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d052      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a18:	4a94      	ldr	r2, [pc, #592]	; (8004c6c <HAL_GPIO_Init+0x2a8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d869      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a1e:	4a94      	ldr	r2, [pc, #592]	; (8004c70 <HAL_GPIO_Init+0x2ac>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d04c      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a24:	4a92      	ldr	r2, [pc, #584]	; (8004c70 <HAL_GPIO_Init+0x2ac>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d863      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a2a:	4a92      	ldr	r2, [pc, #584]	; (8004c74 <HAL_GPIO_Init+0x2b0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d046      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
 8004a30:	4a90      	ldr	r2, [pc, #576]	; (8004c74 <HAL_GPIO_Init+0x2b0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d85d      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a36:	2b12      	cmp	r3, #18
 8004a38:	d82a      	bhi.n	8004a90 <HAL_GPIO_Init+0xcc>
 8004a3a:	2b12      	cmp	r3, #18
 8004a3c:	d859      	bhi.n	8004af2 <HAL_GPIO_Init+0x12e>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <HAL_GPIO_Init+0x80>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004abf 	.word	0x08004abf
 8004a48:	08004a99 	.word	0x08004a99
 8004a4c:	08004aab 	.word	0x08004aab
 8004a50:	08004aed 	.word	0x08004aed
 8004a54:	08004af3 	.word	0x08004af3
 8004a58:	08004af3 	.word	0x08004af3
 8004a5c:	08004af3 	.word	0x08004af3
 8004a60:	08004af3 	.word	0x08004af3
 8004a64:	08004af3 	.word	0x08004af3
 8004a68:	08004af3 	.word	0x08004af3
 8004a6c:	08004af3 	.word	0x08004af3
 8004a70:	08004af3 	.word	0x08004af3
 8004a74:	08004af3 	.word	0x08004af3
 8004a78:	08004af3 	.word	0x08004af3
 8004a7c:	08004af3 	.word	0x08004af3
 8004a80:	08004af3 	.word	0x08004af3
 8004a84:	08004af3 	.word	0x08004af3
 8004a88:	08004aa1 	.word	0x08004aa1
 8004a8c:	08004ab5 	.word	0x08004ab5
 8004a90:	4a79      	ldr	r2, [pc, #484]	; (8004c78 <HAL_GPIO_Init+0x2b4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a96:	e02c      	b.n	8004af2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	623b      	str	r3, [r7, #32]
          break;
 8004a9e:	e029      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	623b      	str	r3, [r7, #32]
          break;
 8004aa8:	e024      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	3308      	adds	r3, #8
 8004ab0:	623b      	str	r3, [r7, #32]
          break;
 8004ab2:	e01f      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	623b      	str	r3, [r7, #32]
          break;
 8004abc:	e01a      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	623b      	str	r3, [r7, #32]
          break;
 8004aca:	e013      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	611a      	str	r2, [r3, #16]
          break;
 8004ade:	e009      	b.n	8004af4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	615a      	str	r2, [r3, #20]
          break;
 8004aea:	e003      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004aec:	2300      	movs	r3, #0
 8004aee:	623b      	str	r3, [r7, #32]
          break;
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_Init+0x130>
          break;
 8004af2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2bff      	cmp	r3, #255	; 0xff
 8004af8:	d801      	bhi.n	8004afe <HAL_GPIO_Init+0x13a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	e001      	b.n	8004b02 <HAL_GPIO_Init+0x13e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2bff      	cmp	r3, #255	; 0xff
 8004b08:	d802      	bhi.n	8004b10 <HAL_GPIO_Init+0x14c>
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	e002      	b.n	8004b16 <HAL_GPIO_Init+0x152>
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	3b08      	subs	r3, #8
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	210f      	movs	r1, #15
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	6a39      	ldr	r1, [r7, #32]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80b1 	beq.w	8004ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b44:	4b4d      	ldr	r3, [pc, #308]	; (8004c7c <HAL_GPIO_Init+0x2b8>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	4a4c      	ldr	r2, [pc, #304]	; (8004c7c <HAL_GPIO_Init+0x2b8>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6193      	str	r3, [r2, #24]
 8004b50:	4b4a      	ldr	r3, [pc, #296]	; (8004c7c <HAL_GPIO_Init+0x2b8>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b5c:	4a48      	ldr	r2, [pc, #288]	; (8004c80 <HAL_GPIO_Init+0x2bc>)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	3302      	adds	r3, #2
 8004b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	220f      	movs	r2, #15
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a40      	ldr	r2, [pc, #256]	; (8004c84 <HAL_GPIO_Init+0x2c0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_GPIO_Init+0x1ec>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3f      	ldr	r2, [pc, #252]	; (8004c88 <HAL_GPIO_Init+0x2c4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00d      	beq.n	8004bac <HAL_GPIO_Init+0x1e8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3e      	ldr	r2, [pc, #248]	; (8004c8c <HAL_GPIO_Init+0x2c8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <HAL_GPIO_Init+0x1e4>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3d      	ldr	r2, [pc, #244]	; (8004c90 <HAL_GPIO_Init+0x2cc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_GPIO_Init+0x1e0>
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e006      	b.n	8004bb2 <HAL_GPIO_Init+0x1ee>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	e004      	b.n	8004bb2 <HAL_GPIO_Init+0x1ee>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e002      	b.n	8004bb2 <HAL_GPIO_Init+0x1ee>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <HAL_GPIO_Init+0x1ee>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb4:	f002 0203 	and.w	r2, r2, #3
 8004bb8:	0092      	lsls	r2, r2, #2
 8004bba:	4093      	lsls	r3, r2
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004bc2:	492f      	ldr	r1, [pc, #188]	; (8004c80 <HAL_GPIO_Init+0x2bc>)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	3302      	adds	r3, #2
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d006      	beq.n	8004bea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bdc:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	492c      	ldr	r1, [pc, #176]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
 8004be8:	e006      	b.n	8004bf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bea:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	4928      	ldr	r1, [pc, #160]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c04:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	4922      	ldr	r1, [pc, #136]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	e006      	b.n	8004c20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	491e      	ldr	r1, [pc, #120]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d006      	beq.n	8004c3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	4918      	ldr	r1, [pc, #96]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]
 8004c38:	e006      	b.n	8004c48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c3a:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	4914      	ldr	r1, [pc, #80]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d021      	beq.n	8004c98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	490e      	ldr	r1, [pc, #56]	; (8004c94 <HAL_GPIO_Init+0x2d0>)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60cb      	str	r3, [r1, #12]
 8004c60:	e021      	b.n	8004ca6 <HAL_GPIO_Init+0x2e2>
 8004c62:	bf00      	nop
 8004c64:	10320000 	.word	0x10320000
 8004c68:	10310000 	.word	0x10310000
 8004c6c:	10220000 	.word	0x10220000
 8004c70:	10210000 	.word	0x10210000
 8004c74:	10120000 	.word	0x10120000
 8004c78:	10110000 	.word	0x10110000
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010800 	.word	0x40010800
 8004c88:	40010c00 	.word	0x40010c00
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	40011400 	.word	0x40011400
 8004c94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_GPIO_Init+0x304>)
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	4909      	ldr	r1, [pc, #36]	; (8004cc8 <HAL_GPIO_Init+0x304>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	3301      	adds	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f47f ae8e 	bne.w	80049d8 <HAL_GPIO_Init+0x14>
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	372c      	adds	r7, #44	; 0x2c
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e001      	b.n	8004cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	807b      	strh	r3, [r7, #2]
 8004d06:	4613      	mov	r3, r2
 8004d08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d0a:	787b      	ldrb	r3, [r7, #1]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d10:	887a      	ldrh	r2, [r7, #2]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004d16:	e003      	b.n	8004d20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	041a      	lsls	r2, r3, #16
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	611a      	str	r2, [r3, #16]
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fd fcba 	bl	80026c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40010400 	.word	0x40010400

08004d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e12b      	b.n	8004fc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fb ffba 	bl	8000cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2224      	movs	r2, #36	; 0x24
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f001 fba0 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4a81      	ldr	r2, [pc, #516]	; (8004fd0 <HAL_I2C_Init+0x274>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d807      	bhi.n	8004de0 <HAL_I2C_Init+0x84>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a80      	ldr	r2, [pc, #512]	; (8004fd4 <HAL_I2C_Init+0x278>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bf94      	ite	ls
 8004dd8:	2301      	movls	r3, #1
 8004dda:	2300      	movhi	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e006      	b.n	8004dee <HAL_I2C_Init+0x92>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4a7d      	ldr	r2, [pc, #500]	; (8004fd8 <HAL_I2C_Init+0x27c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bf94      	ite	ls
 8004de8:	2301      	movls	r3, #1
 8004dea:	2300      	movhi	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0e7      	b.n	8004fc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a78      	ldr	r2, [pc, #480]	; (8004fdc <HAL_I2C_Init+0x280>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	0c9b      	lsrs	r3, r3, #18
 8004e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4a6a      	ldr	r2, [pc, #424]	; (8004fd0 <HAL_I2C_Init+0x274>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d802      	bhi.n	8004e30 <HAL_I2C_Init+0xd4>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	e009      	b.n	8004e44 <HAL_I2C_Init+0xe8>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	4a69      	ldr	r2, [pc, #420]	; (8004fe0 <HAL_I2C_Init+0x284>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	099b      	lsrs	r3, r3, #6
 8004e42:	3301      	adds	r3, #1
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	495c      	ldr	r1, [pc, #368]	; (8004fd0 <HAL_I2C_Init+0x274>)
 8004e60:	428b      	cmp	r3, r1
 8004e62:	d819      	bhi.n	8004e98 <HAL_I2C_Init+0x13c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1e59      	subs	r1, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e78:	400b      	ands	r3, r1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_I2C_Init+0x138>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1e59      	subs	r1, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e92:	e051      	b.n	8004f38 <HAL_I2C_Init+0x1dc>
 8004e94:	2304      	movs	r3, #4
 8004e96:	e04f      	b.n	8004f38 <HAL_I2C_Init+0x1dc>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d111      	bne.n	8004ec4 <HAL_I2C_Init+0x168>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1e58      	subs	r0, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	440b      	add	r3, r1
 8004eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	e012      	b.n	8004eea <HAL_I2C_Init+0x18e>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1e58      	subs	r0, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	0099      	lsls	r1, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eda:	3301      	adds	r3, #1
 8004edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Init+0x196>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e022      	b.n	8004f38 <HAL_I2C_Init+0x1dc>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10e      	bne.n	8004f18 <HAL_I2C_Init+0x1bc>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1e58      	subs	r0, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	440b      	add	r3, r1
 8004f08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f16:	e00f      	b.n	8004f38 <HAL_I2C_Init+0x1dc>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1e58      	subs	r0, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	0099      	lsls	r1, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	6809      	ldr	r1, [r1, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6911      	ldr	r1, [r2, #16]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68d2      	ldr	r2, [r2, #12]
 8004f72:	4311      	orrs	r1, r2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	000186a0 	.word	0x000186a0
 8004fd4:	001e847f 	.word	0x001e847f
 8004fd8:	003d08ff 	.word	0x003d08ff
 8004fdc:	431bde83 	.word	0x431bde83
 8004fe0:	10624dd3 	.word	0x10624dd3

08004fe4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	817b      	strh	r3, [r7, #10]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	813b      	strh	r3, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ffe:	f7fe fe9d 	bl	8003d3c <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b20      	cmp	r3, #32
 800500e:	f040 80d9 	bne.w	80051c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2319      	movs	r3, #25
 8005018:	2201      	movs	r2, #1
 800501a:	496d      	ldr	r1, [pc, #436]	; (80051d0 <HAL_I2C_Mem_Write+0x1ec>)
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fcc1 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005028:	2302      	movs	r3, #2
 800502a:	e0cc      	b.n	80051c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_I2C_Mem_Write+0x56>
 8005036:	2302      	movs	r3, #2
 8005038:	e0c5      	b.n	80051c6 <HAL_I2C_Mem_Write+0x1e2>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d007      	beq.n	8005060 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800506e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2221      	movs	r2, #33	; 0x21
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2240      	movs	r2, #64	; 0x40
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a3a      	ldr	r2, [r7, #32]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a4d      	ldr	r2, [pc, #308]	; (80051d4 <HAL_I2C_Mem_Write+0x1f0>)
 80050a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050a2:	88f8      	ldrh	r0, [r7, #6]
 80050a4:	893a      	ldrh	r2, [r7, #8]
 80050a6:	8979      	ldrh	r1, [r7, #10]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4603      	mov	r3, r0
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 faf8 	bl	80056a8 <I2C_RequestMemoryWrite>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d052      	beq.n	8005164 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e081      	b.n	80051c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fd42 	bl	8005b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d107      	bne.n	80050ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e06b      	b.n	80051c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b04      	cmp	r3, #4
 800512a:	d11b      	bne.n	8005164 <HAL_I2C_Mem_Write+0x180>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d017      	beq.n	8005164 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1aa      	bne.n	80050c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fd2e 	bl	8005bd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00d      	beq.n	8005198 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2b04      	cmp	r3, #4
 8005182:	d107      	bne.n	8005194 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005192:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e016      	b.n	80051c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	00100002 	.word	0x00100002
 80051d4:	ffff0000 	.word	0xffff0000

080051d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08c      	sub	sp, #48	; 0x30
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	4608      	mov	r0, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	461a      	mov	r2, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	817b      	strh	r3, [r7, #10]
 80051ea:	460b      	mov	r3, r1
 80051ec:	813b      	strh	r3, [r7, #8]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051f6:	f7fe fda1 	bl	8003d3c <HAL_GetTick>
 80051fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b20      	cmp	r3, #32
 8005206:	f040 8244 	bne.w	8005692 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	2319      	movs	r3, #25
 8005210:	2201      	movs	r2, #1
 8005212:	4982      	ldr	r1, [pc, #520]	; (800541c <HAL_I2C_Mem_Read+0x244>)
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fbc5 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
 8005222:	e237      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_I2C_Mem_Read+0x5a>
 800522e:	2302      	movs	r3, #2
 8005230:	e230      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d007      	beq.n	8005258 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2222      	movs	r2, #34	; 0x22
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2240      	movs	r2, #64	; 0x40
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a62      	ldr	r2, [pc, #392]	; (8005420 <HAL_I2C_Mem_Read+0x248>)
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800529a:	88f8      	ldrh	r0, [r7, #6]
 800529c:	893a      	ldrh	r2, [r7, #8]
 800529e:	8979      	ldrh	r1, [r7, #10]
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	4603      	mov	r3, r0
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fa92 	bl	80057d4 <I2C_RequestMemoryRead>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e1ec      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d113      	bne.n	80052ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e1c0      	b.n	800566c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d11e      	bne.n	8005330 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005300:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005302:	b672      	cpsid	i
}
 8005304:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800532c:	b662      	cpsie	i
}
 800532e:	e035      	b.n	800539c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005334:	2b02      	cmp	r3, #2
 8005336:	d11e      	bne.n	8005376 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005348:	b672      	cpsid	i
}
 800534a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005370:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005372:	b662      	cpsie	i
}
 8005374:	e012      	b.n	800539c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005384:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800539c:	e166      	b.n	800566c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	f200 811f 	bhi.w	80055e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d123      	bne.n	80053f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fc4d 	bl	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e167      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053f6:	e139      	b.n	800566c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d152      	bne.n	80054a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	2200      	movs	r2, #0
 8005408:	4906      	ldr	r1, [pc, #24]	; (8005424 <HAL_I2C_Mem_Read+0x24c>)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 faca 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e13c      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
 800541a:	bf00      	nop
 800541c:	00100002 	.word	0x00100002
 8005420:	ffff0000 	.word	0xffff0000
 8005424:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005428:	b672      	cpsid	i
}
 800542a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800546e:	b662      	cpsie	i
}
 8005470:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054a4:	e0e2      	b.n	800566c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	2200      	movs	r2, #0
 80054ae:	497b      	ldr	r1, [pc, #492]	; (800569c <HAL_I2C_Mem_Read+0x4c4>)
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fa77 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0e9      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054d0:	b672      	cpsid	i
}
 80054d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005506:	4b66      	ldr	r3, [pc, #408]	; (80056a0 <HAL_I2C_Mem_Read+0x4c8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	08db      	lsrs	r3, r3, #3
 800550c:	4a65      	ldr	r2, [pc, #404]	; (80056a4 <HAL_I2C_Mem_Read+0x4cc>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	0a1a      	lsrs	r2, r3, #8
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00da      	lsls	r2, r3, #3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	3b01      	subs	r3, #1
 8005524:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d118      	bne.n	800555e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800554e:	b662      	cpsie	i
}
 8005550:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e09a      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b04      	cmp	r3, #4
 800556a:	d1d9      	bne.n	8005520 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80055ae:	b662      	cpsie	i
}
 80055b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055e4:	e042      	b.n	800566c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fb32 	bl	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e04c      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b04      	cmp	r3, #4
 8005638:	d118      	bne.n	800566c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f ae94 	bne.w	800539e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e000      	b.n	8005694 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005692:	2302      	movs	r3, #2
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3728      	adds	r7, #40	; 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	00010004 	.word	0x00010004
 80056a0:	20000064 	.word	0x20000064
 80056a4:	14f8b589 	.word	0x14f8b589

080056a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	4608      	mov	r0, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	817b      	strh	r3, [r7, #10]
 80056ba:	460b      	mov	r3, r1
 80056bc:	813b      	strh	r3, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	2200      	movs	r2, #0
 80056da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f960 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f8:	d103      	bne.n	8005702 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e05f      	b.n	80057c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005706:	897b      	ldrh	r3, [r7, #10]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005714:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	6a3a      	ldr	r2, [r7, #32]
 800571a:	492d      	ldr	r1, [pc, #180]	; (80057d0 <I2C_RequestMemoryWrite+0x128>)
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f998 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e04c      	b.n	80057c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005744:	6a39      	ldr	r1, [r7, #32]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fa02 	bl	8005b50 <I2C_WaitOnTXEFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b04      	cmp	r3, #4
 8005758:	d107      	bne.n	800576a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005768:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e02b      	b.n	80057c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d105      	bne.n	8005780 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	611a      	str	r2, [r3, #16]
 800577e:	e021      	b.n	80057c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005780:	893b      	ldrh	r3, [r7, #8]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	b29b      	uxth	r3, r3
 8005786:	b2da      	uxtb	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005790:	6a39      	ldr	r1, [r7, #32]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f9dc 	bl	8005b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d107      	bne.n	80057b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e005      	b.n	80057c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ba:	893b      	ldrh	r3, [r7, #8]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	00010002 	.word	0x00010002

080057d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	4608      	mov	r0, r1
 80057de:	4611      	mov	r1, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	817b      	strh	r3, [r7, #10]
 80057e6:	460b      	mov	r3, r1
 80057e8:	813b      	strh	r3, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800580c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	2200      	movs	r2, #0
 8005816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f8c2 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00d      	beq.n	8005842 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005834:	d103      	bne.n	800583e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e0aa      	b.n	8005998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005850:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	6a3a      	ldr	r2, [r7, #32]
 8005856:	4952      	ldr	r1, [pc, #328]	; (80059a0 <I2C_RequestMemoryRead+0x1cc>)
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f8fa 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e097      	b.n	8005998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	6a39      	ldr	r1, [r7, #32]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f964 	bl	8005b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2b04      	cmp	r3, #4
 8005894:	d107      	bne.n	80058a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e076      	b.n	8005998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d105      	bne.n	80058bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058b0:	893b      	ldrh	r3, [r7, #8]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e021      	b.n	8005900 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058bc:	893b      	ldrh	r3, [r7, #8]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	6a39      	ldr	r1, [r7, #32]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f93e 	bl	8005b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00d      	beq.n	80058f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d107      	bne.n	80058f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e050      	b.n	8005998 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058f6:	893b      	ldrh	r3, [r7, #8]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005902:	6a39      	ldr	r1, [r7, #32]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f923 	bl	8005b50 <I2C_WaitOnTXEFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00d      	beq.n	800592c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	2b04      	cmp	r3, #4
 8005916:	d107      	bne.n	8005928 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005926:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e035      	b.n	8005998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800593a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	2200      	movs	r2, #0
 8005944:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f82b 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d103      	bne.n	800596c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e013      	b.n	8005998 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005970:	897b      	ldrh	r3, [r7, #10]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	b2da      	uxtb	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	4906      	ldr	r1, [pc, #24]	; (80059a0 <I2C_RequestMemoryRead+0x1cc>)
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f863 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	00010002 	.word	0x00010002

080059a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b4:	e025      	b.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d021      	beq.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fe f9bd 	bl	8003d3c <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d116      	bne.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f043 0220 	orr.w	r2, r3, #32
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e023      	b.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10d      	bne.n	8005a28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	43da      	mvns	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	e00c      	b.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	43da      	mvns	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4013      	ands	r3, r2
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bf0c      	ite	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d0b6      	beq.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a60:	e051      	b.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a70:	d123      	bne.n	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f043 0204 	orr.w	r2, r3, #4
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e046      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d021      	beq.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fe f93b 	bl	8003d3c <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d116      	bne.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e020      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10c      	bne.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	43da      	mvns	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf14      	ite	ne
 8005b22:	2301      	movne	r3, #1
 8005b24:	2300      	moveq	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	e00b      	b.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	43da      	mvns	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4013      	ands	r3, r2
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d18d      	bne.n	8005a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b5c:	e02d      	b.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f8ce 	bl	8005d00 <I2C_IsAcknowledgeFailed>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e02d      	b.n	8005bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d021      	beq.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fe f8e1 	bl	8003d3c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d302      	bcc.n	8005b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d116      	bne.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e007      	b.n	8005bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d1ca      	bne.n	8005b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bde:	e02d      	b.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f88d 	bl	8005d00 <I2C_IsAcknowledgeFailed>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e02d      	b.n	8005c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d021      	beq.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf8:	f7fe f8a0 	bl	8003d3c <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d302      	bcc.n	8005c0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d116      	bne.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e007      	b.n	8005c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d1ca      	bne.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c60:	e042      	b.n	8005ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d119      	bne.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0210 	mvn.w	r2, #16
 8005c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e029      	b.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fe f84a 	bl	8003d3c <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d116      	bne.n	8005ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e007      	b.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d1b5      	bne.n	8005c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d16:	d11b      	bne.n	8005d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	f043 0204 	orr.w	r2, r3, #4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e272      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8087 	beq.w	8005e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d7c:	4b92      	ldr	r3, [pc, #584]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 030c 	and.w	r3, r3, #12
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d00c      	beq.n	8005da2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d88:	4b8f      	ldr	r3, [pc, #572]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d112      	bne.n	8005dba <HAL_RCC_OscConfig+0x5e>
 8005d94:	4b8c      	ldr	r3, [pc, #560]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da0:	d10b      	bne.n	8005dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da2:	4b89      	ldr	r3, [pc, #548]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d06c      	beq.n	8005e88 <HAL_RCC_OscConfig+0x12c>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d168      	bne.n	8005e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e24c      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc2:	d106      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x76>
 8005dc4:	4b80      	ldr	r3, [pc, #512]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a7f      	ldr	r2, [pc, #508]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e02e      	b.n	8005e30 <HAL_RCC_OscConfig+0xd4>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10c      	bne.n	8005df4 <HAL_RCC_OscConfig+0x98>
 8005dda:	4b7b      	ldr	r3, [pc, #492]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a7a      	ldr	r2, [pc, #488]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	4b78      	ldr	r3, [pc, #480]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a77      	ldr	r2, [pc, #476]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e01d      	b.n	8005e30 <HAL_RCC_OscConfig+0xd4>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCC_OscConfig+0xbc>
 8005dfe:	4b72      	ldr	r3, [pc, #456]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a71      	ldr	r2, [pc, #452]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	4b6f      	ldr	r3, [pc, #444]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6e      	ldr	r2, [pc, #440]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e00b      	b.n	8005e30 <HAL_RCC_OscConfig+0xd4>
 8005e18:	4b6b      	ldr	r3, [pc, #428]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6a      	ldr	r2, [pc, #424]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4b68      	ldr	r3, [pc, #416]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a67      	ldr	r2, [pc, #412]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d013      	beq.n	8005e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e38:	f7fd ff80 	bl	8003d3c <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e40:	f7fd ff7c 	bl	8003d3c <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	; 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e200      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e52:	4b5d      	ldr	r3, [pc, #372]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0xe4>
 8005e5e:	e014      	b.n	8005e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e60:	f7fd ff6c 	bl	8003d3c <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e68:	f7fd ff68 	bl	8003d3c <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b64      	cmp	r3, #100	; 0x64
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e1ec      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7a:	4b53      	ldr	r3, [pc, #332]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x10c>
 8005e86:	e000      	b.n	8005e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d063      	beq.n	8005f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e96:	4b4c      	ldr	r3, [pc, #304]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d11c      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x18c>
 8005eae:	4b46      	ldr	r3, [pc, #280]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d116      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eba:	4b43      	ldr	r3, [pc, #268]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x176>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d001      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e1c0      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed2:	4b3d      	ldr	r3, [pc, #244]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4939      	ldr	r1, [pc, #228]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee6:	e03a      	b.n	8005f5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d020      	beq.n	8005f32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ef0:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <HAL_RCC_OscConfig+0x270>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef6:	f7fd ff21 	bl	8003d3c <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005efe:	f7fd ff1d 	bl	8003d3c <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e1a1      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0f0      	beq.n	8005efe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1c:	4b2a      	ldr	r3, [pc, #168]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4927      	ldr	r1, [pc, #156]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	600b      	str	r3, [r1, #0]
 8005f30:	e015      	b.n	8005f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f32:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <HAL_RCC_OscConfig+0x270>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f38:	f7fd ff00 	bl	8003d3c <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f40:	f7fd fefc 	bl	8003d3c <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e180      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f52:	4b1d      	ldr	r3, [pc, #116]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f0      	bne.n	8005f40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03a      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d019      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f72:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <HAL_RCC_OscConfig+0x274>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f78:	f7fd fee0 	bl	8003d3c <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f80:	f7fd fedc 	bl	8003d3c <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e160      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f92:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <HAL_RCC_OscConfig+0x26c>)
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0f0      	beq.n	8005f80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	f000 fad8 	bl	8006554 <RCC_Delay>
 8005fa4:	e01c      	b.n	8005fe0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fac:	f7fd fec6 	bl	8003d3c <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb2:	e00f      	b.n	8005fd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fd fec2 	bl	8003d3c <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d908      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e146      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
 8005fc6:	bf00      	nop
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	42420000 	.word	0x42420000
 8005fd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd4:	4b92      	ldr	r3, [pc, #584]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e9      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80a6 	beq.w	800613a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff2:	4b8b      	ldr	r3, [pc, #556]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ffe:	4b88      	ldr	r3, [pc, #544]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	4a87      	ldr	r2, [pc, #540]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006008:	61d3      	str	r3, [r2, #28]
 800600a:	4b85      	ldr	r3, [pc, #532]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006016:	2301      	movs	r3, #1
 8006018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601a:	4b82      	ldr	r3, [pc, #520]	; (8006224 <HAL_RCC_OscConfig+0x4c8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d118      	bne.n	8006058 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006026:	4b7f      	ldr	r3, [pc, #508]	; (8006224 <HAL_RCC_OscConfig+0x4c8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a7e      	ldr	r2, [pc, #504]	; (8006224 <HAL_RCC_OscConfig+0x4c8>)
 800602c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006032:	f7fd fe83 	bl	8003d3c <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800603a:	f7fd fe7f 	bl	8003d3c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b64      	cmp	r3, #100	; 0x64
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e103      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604c:	4b75      	ldr	r3, [pc, #468]	; (8006224 <HAL_RCC_OscConfig+0x4c8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f0      	beq.n	800603a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d106      	bne.n	800606e <HAL_RCC_OscConfig+0x312>
 8006060:	4b6f      	ldr	r3, [pc, #444]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	4a6e      	ldr	r2, [pc, #440]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	6213      	str	r3, [r2, #32]
 800606c:	e02d      	b.n	80060ca <HAL_RCC_OscConfig+0x36e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10c      	bne.n	8006090 <HAL_RCC_OscConfig+0x334>
 8006076:	4b6a      	ldr	r3, [pc, #424]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	4a69      	ldr	r2, [pc, #420]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	6213      	str	r3, [r2, #32]
 8006082:	4b67      	ldr	r3, [pc, #412]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4a66      	ldr	r2, [pc, #408]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006088:	f023 0304 	bic.w	r3, r3, #4
 800608c:	6213      	str	r3, [r2, #32]
 800608e:	e01c      	b.n	80060ca <HAL_RCC_OscConfig+0x36e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b05      	cmp	r3, #5
 8006096:	d10c      	bne.n	80060b2 <HAL_RCC_OscConfig+0x356>
 8006098:	4b61      	ldr	r3, [pc, #388]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	4a60      	ldr	r2, [pc, #384]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 800609e:	f043 0304 	orr.w	r3, r3, #4
 80060a2:	6213      	str	r3, [r2, #32]
 80060a4:	4b5e      	ldr	r3, [pc, #376]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	4a5d      	ldr	r2, [pc, #372]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	6213      	str	r3, [r2, #32]
 80060b0:	e00b      	b.n	80060ca <HAL_RCC_OscConfig+0x36e>
 80060b2:	4b5b      	ldr	r3, [pc, #364]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	4a5a      	ldr	r2, [pc, #360]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	6213      	str	r3, [r2, #32]
 80060be:	4b58      	ldr	r3, [pc, #352]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	4a57      	ldr	r2, [pc, #348]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80060c4:	f023 0304 	bic.w	r3, r3, #4
 80060c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d015      	beq.n	80060fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d2:	f7fd fe33 	bl	8003d3c <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d8:	e00a      	b.n	80060f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060da:	f7fd fe2f 	bl	8003d3c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e0b1      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f0:	4b4b      	ldr	r3, [pc, #300]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ee      	beq.n	80060da <HAL_RCC_OscConfig+0x37e>
 80060fc:	e014      	b.n	8006128 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fe:	f7fd fe1d 	bl	8003d3c <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006104:	e00a      	b.n	800611c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fd fe19 	bl	8003d3c <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e09b      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800611c:	4b40      	ldr	r3, [pc, #256]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ee      	bne.n	8006106 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d105      	bne.n	800613a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612e:	4b3c      	ldr	r3, [pc, #240]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	4a3b      	ldr	r2, [pc, #236]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006138:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8087 	beq.w	8006252 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006144:	4b36      	ldr	r3, [pc, #216]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 030c 	and.w	r3, r3, #12
 800614c:	2b08      	cmp	r3, #8
 800614e:	d061      	beq.n	8006214 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d146      	bne.n	80061e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006158:	4b33      	ldr	r3, [pc, #204]	; (8006228 <HAL_RCC_OscConfig+0x4cc>)
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615e:	f7fd fded 	bl	8003d3c <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006166:	f7fd fde9 	bl	8003d3c <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e06d      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006178:	4b29      	ldr	r3, [pc, #164]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f0      	bne.n	8006166 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618c:	d108      	bne.n	80061a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800618e:	4b24      	ldr	r3, [pc, #144]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	4921      	ldr	r1, [pc, #132]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 800619c:	4313      	orrs	r3, r2
 800619e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061a0:	4b1f      	ldr	r3, [pc, #124]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a19      	ldr	r1, [r3, #32]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	430b      	orrs	r3, r1
 80061b2:	491b      	ldr	r1, [pc, #108]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <HAL_RCC_OscConfig+0x4cc>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061be:	f7fd fdbd 	bl	8003d3c <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c6:	f7fd fdb9 	bl	8003d3c <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e03d      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f0      	beq.n	80061c6 <HAL_RCC_OscConfig+0x46a>
 80061e4:	e035      	b.n	8006252 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e6:	4b10      	ldr	r3, [pc, #64]	; (8006228 <HAL_RCC_OscConfig+0x4cc>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ec:	f7fd fda6 	bl	8003d3c <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f4:	f7fd fda2 	bl	8003d3c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e026      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <HAL_RCC_OscConfig+0x4c4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x498>
 8006212:	e01e      	b.n	8006252 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d107      	bne.n	800622c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e019      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
 8006220:	40021000 	.word	0x40021000
 8006224:	40007000 	.word	0x40007000
 8006228:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_RCC_OscConfig+0x500>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	429a      	cmp	r2, r3
 800623e:	d106      	bne.n	800624e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800624a:	429a      	cmp	r2, r3
 800624c:	d001      	beq.n	8006252 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000

08006260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e0d0      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006274:	4b6a      	ldr	r3, [pc, #424]	; (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d910      	bls.n	80062a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b67      	ldr	r3, [pc, #412]	; (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f023 0207 	bic.w	r2, r3, #7
 800628a:	4965      	ldr	r1, [pc, #404]	; (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	4313      	orrs	r3, r2
 8006290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b63      	ldr	r3, [pc, #396]	; (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0b8      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d020      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062bc:	4b59      	ldr	r3, [pc, #356]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	4a58      	ldr	r2, [pc, #352]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062d4:	4b53      	ldr	r3, [pc, #332]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a52      	ldr	r2, [pc, #328]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80062de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e0:	4b50      	ldr	r3, [pc, #320]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	494d      	ldr	r1, [pc, #308]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d040      	beq.n	8006380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d107      	bne.n	8006316 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006306:	4b47      	ldr	r3, [pc, #284]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d115      	bne.n	800633e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e07f      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d107      	bne.n	800632e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631e:	4b41      	ldr	r3, [pc, #260]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e073      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632e:	4b3d      	ldr	r3, [pc, #244]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e06b      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800633e:	4b39      	ldr	r3, [pc, #228]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f023 0203 	bic.w	r2, r3, #3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4936      	ldr	r1, [pc, #216]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 800634c:	4313      	orrs	r3, r2
 800634e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006350:	f7fd fcf4 	bl	8003d3c <HAL_GetTick>
 8006354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006356:	e00a      	b.n	800636e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006358:	f7fd fcf0 	bl	8003d3c <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	; 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e053      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636e:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 020c 	and.w	r2, r3, #12
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	429a      	cmp	r2, r3
 800637e:	d1eb      	bne.n	8006358 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006380:	4b27      	ldr	r3, [pc, #156]	; (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d210      	bcs.n	80063b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638e:	4b24      	ldr	r3, [pc, #144]	; (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f023 0207 	bic.w	r2, r3, #7
 8006396:	4922      	ldr	r1, [pc, #136]	; (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	4313      	orrs	r3, r2
 800639c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800639e:	4b20      	ldr	r3, [pc, #128]	; (8006420 <HAL_RCC_ClockConfig+0x1c0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d001      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e032      	b.n	8006416 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063bc:	4b19      	ldr	r3, [pc, #100]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4916      	ldr	r1, [pc, #88]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063da:	4b12      	ldr	r3, [pc, #72]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	490e      	ldr	r1, [pc, #56]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063ee:	f000 f821 	bl	8006434 <HAL_RCC_GetSysClockFreq>
 80063f2:	4602      	mov	r2, r0
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <HAL_RCC_ClockConfig+0x1c4>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	490a      	ldr	r1, [pc, #40]	; (8006428 <HAL_RCC_ClockConfig+0x1c8>)
 8006400:	5ccb      	ldrb	r3, [r1, r3]
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <HAL_RCC_ClockConfig+0x1cc>)
 8006408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800640a:	4b09      	ldr	r3, [pc, #36]	; (8006430 <HAL_RCC_ClockConfig+0x1d0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7fd fc52 	bl	8003cb8 <HAL_InitTick>

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40022000 	.word	0x40022000
 8006424:	40021000 	.word	0x40021000
 8006428:	08008390 	.word	0x08008390
 800642c:	20000064 	.word	0x20000064
 8006430:	20000068 	.word	0x20000068

08006434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006434:	b490      	push	{r4, r7}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800643a:	4b29      	ldr	r3, [pc, #164]	; (80064e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800643c:	1d3c      	adds	r4, r7, #4
 800643e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006444:	f240 2301 	movw	r3, #513	; 0x201
 8006448:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	2300      	movs	r3, #0
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800645e:	4b21      	ldr	r3, [pc, #132]	; (80064e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	2b04      	cmp	r3, #4
 800646c:	d002      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x40>
 800646e:	2b08      	cmp	r3, #8
 8006470:	d003      	beq.n	800647a <HAL_RCC_GetSysClockFreq+0x46>
 8006472:	e02b      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006474:	4b1c      	ldr	r3, [pc, #112]	; (80064e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006476:	623b      	str	r3, [r7, #32]
      break;
 8006478:	e02b      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	0c9b      	lsrs	r3, r3, #18
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	3328      	adds	r3, #40	; 0x28
 8006484:	443b      	add	r3, r7
 8006486:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800648a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d012      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	0c5b      	lsrs	r3, r3, #17
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	3328      	adds	r3, #40	; 0x28
 80064a2:	443b      	add	r3, r7
 80064a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064ae:	fb03 f202 	mul.w	r2, r3, r2
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	e004      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	4a0b      	ldr	r2, [pc, #44]	; (80064ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80064c0:	fb02 f303 	mul.w	r3, r2, r3
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	623b      	str	r3, [r7, #32]
      break;
 80064ca:	e002      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064ce:	623b      	str	r3, [r7, #32]
      break;
 80064d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3728      	adds	r7, #40	; 0x28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc90      	pop	{r4, r7}
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	08008370 	.word	0x08008370
 80064e4:	40021000 	.word	0x40021000
 80064e8:	007a1200 	.word	0x007a1200
 80064ec:	003d0900 	.word	0x003d0900

080064f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <HAL_RCC_GetHCLKFreq+0x10>)
 80064f6:	681b      	ldr	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr
 8006500:	20000064 	.word	0x20000064

08006504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006508:	f7ff fff2 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 800650c:	4602      	mov	r2, r0
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	4903      	ldr	r1, [pc, #12]	; (8006528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800651a:	5ccb      	ldrb	r3, [r1, r3]
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006520:	4618      	mov	r0, r3
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40021000 	.word	0x40021000
 8006528:	080083a0 	.word	0x080083a0

0800652c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006530:	f7ff ffde 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006534:	4602      	mov	r2, r0
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	0adb      	lsrs	r3, r3, #11
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	4903      	ldr	r1, [pc, #12]	; (8006550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006542:	5ccb      	ldrb	r3, [r1, r3]
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40021000 	.word	0x40021000
 8006550:	080083a0 	.word	0x080083a0

08006554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <RCC_Delay+0x34>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0a      	ldr	r2, [pc, #40]	; (800658c <RCC_Delay+0x38>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	0a5b      	lsrs	r3, r3, #9
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	fb02 f303 	mul.w	r3, r2, r3
 800656e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006570:	bf00      	nop
  }
  while (Delay --);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	1e5a      	subs	r2, r3, #1
 8006576:	60fa      	str	r2, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f9      	bne.n	8006570 <RCC_Delay+0x1c>
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr
 8006588:	20000064 	.word	0x20000064
 800658c:	10624dd3 	.word	0x10624dd3

08006590 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d07d      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065ac:	2300      	movs	r3, #0
 80065ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065b0:	4b4f      	ldr	r3, [pc, #316]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10d      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065bc:	4b4c      	ldr	r3, [pc, #304]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	4a4b      	ldr	r2, [pc, #300]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c6:	61d3      	str	r3, [r2, #28]
 80065c8:	4b49      	ldr	r3, [pc, #292]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d8:	4b46      	ldr	r3, [pc, #280]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d118      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065e4:	4b43      	ldr	r3, [pc, #268]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a42      	ldr	r2, [pc, #264]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065f0:	f7fd fba4 	bl	8003d3c <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f6:	e008      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f8:	f7fd fba0 	bl	8003d3c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	; 0x64
 8006604:	d901      	bls.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e06d      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660a:	4b3a      	ldr	r3, [pc, #232]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f0      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006616:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d02e      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	429a      	cmp	r2, r3
 8006632:	d027      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006634:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800663e:	4b2e      	ldr	r3, [pc, #184]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006644:	4b2c      	ldr	r3, [pc, #176]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800664a:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d014      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665a:	f7fd fb6f 	bl	8003d3c <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006660:	e00a      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006662:	f7fd fb6b 	bl	8003d3c <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006670:	4293      	cmp	r3, r2
 8006672:	d901      	bls.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e036      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006678:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0ee      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006684:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4917      	ldr	r1, [pc, #92]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006692:	4313      	orrs	r3, r2
 8006694:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d105      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669c:	4b14      	ldr	r3, [pc, #80]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066b4:	4b0e      	ldr	r3, [pc, #56]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	490b      	ldr	r1, [pc, #44]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066d2:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	4904      	ldr	r1, [pc, #16]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40007000 	.word	0x40007000
 80066f8:	42420440 	.word	0x42420440

080066fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b08d      	sub	sp, #52	; 0x34
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006704:	4b58      	ldr	r3, [pc, #352]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006706:	f107 040c 	add.w	r4, r7, #12
 800670a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800670c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006710:	f240 2301 	movw	r3, #513	; 0x201
 8006714:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
 800671a:	2300      	movs	r3, #0
 800671c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671e:	2300      	movs	r3, #0
 8006720:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	2300      	movs	r3, #0
 8006728:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b10      	cmp	r3, #16
 800672e:	d00a      	beq.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b10      	cmp	r3, #16
 8006734:	f200 808e 	bhi.w	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d049      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d079      	beq.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006744:	e086      	b.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006746:	4b49      	ldr	r3, [pc, #292]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800674c:	4b47      	ldr	r3, [pc, #284]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d07f      	beq.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	0c9b      	lsrs	r3, r3, #18
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	3330      	adds	r3, #48	; 0x30
 8006762:	443b      	add	r3, r7
 8006764:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006768:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d017      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006774:	4b3d      	ldr	r3, [pc, #244]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	0c5b      	lsrs	r3, r3, #17
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	3330      	adds	r3, #48	; 0x30
 8006780:	443b      	add	r3, r7
 8006782:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00d      	beq.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006792:	4a37      	ldr	r2, [pc, #220]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	fbb2 f2f3 	udiv	r2, r2, r3
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a2:	e004      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	4a33      	ldr	r2, [pc, #204]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80067a8:	fb02 f303 	mul.w	r3, r2, r3
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80067ae:	4b2f      	ldr	r3, [pc, #188]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ba:	d102      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80067c0:	e04a      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	4a2c      	ldr	r2, [pc, #176]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80067d0:	e042      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80067d2:	4b26      	ldr	r3, [pc, #152]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e2:	d108      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80067ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f4:	e01f      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006800:	d109      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006802:	4b1a      	ldr	r3, [pc, #104]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800680e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
 8006814:	e00f      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006820:	d11c      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d016      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800682e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006834:	e012      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006836:	e011      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006838:	f7ff fe78 	bl	800652c <HAL_RCC_GetPCLK2Freq>
 800683c:	4602      	mov	r2, r0
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	0b9b      	lsrs	r3, r3, #14
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	3301      	adds	r3, #1
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006852:	e004      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006854:	bf00      	nop
 8006856:	e002      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006858:	bf00      	nop
 800685a:	e000      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800685c:	bf00      	nop
    }
  }
  return (frequency);
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006860:	4618      	mov	r0, r3
 8006862:	3734      	adds	r7, #52	; 0x34
 8006864:	46bd      	mov	sp, r7
 8006866:	bd90      	pop	{r4, r7, pc}
 8006868:	08008380 	.word	0x08008380
 800686c:	40021000 	.word	0x40021000
 8006870:	007a1200 	.word	0x007a1200
 8006874:	003d0900 	.word	0x003d0900
 8006878:	aaaaaaab 	.word	0xaaaaaaab

0800687c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e041      	b.n	8006912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fd f832 	bl	800390c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f000 fc56 	bl	800716c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d001      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e03a      	b.n	80069aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <HAL_TIM_Base_Start_IT+0x98>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x58>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695e:	d009      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x58>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d004      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x58>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a13      	ldr	r2, [pc, #76]	; (80069bc <HAL_TIM_Base_Start_IT+0xa0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d111      	bne.n	8006998 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b06      	cmp	r3, #6
 8006984:	d010      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006996:	e007      	b.n	80069a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800

080069c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0201 	bic.w	r2, r2, #1
 80069d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	f241 1311 	movw	r3, #4369	; 0x1111
 80069e2:	4013      	ands	r3, r2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10f      	bne.n	8006a08 <HAL_TIM_Base_Stop_IT+0x48>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	f240 4344 	movw	r3, #1092	; 0x444
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d107      	bne.n	8006a08 <HAL_TIM_Base_Stop_IT+0x48>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0201 	bic.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e041      	b.n	8006ab2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f839 	bl	8006aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fb86 	bl	800716c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d109      	bne.n	8006af0 <HAL_TIM_PWM_Start+0x24>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	bf14      	ite	ne
 8006ae8:	2301      	movne	r3, #1
 8006aea:	2300      	moveq	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	e022      	b.n	8006b36 <HAL_TIM_PWM_Start+0x6a>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d109      	bne.n	8006b0a <HAL_TIM_PWM_Start+0x3e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	bf14      	ite	ne
 8006b02:	2301      	movne	r3, #1
 8006b04:	2300      	moveq	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	e015      	b.n	8006b36 <HAL_TIM_PWM_Start+0x6a>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d109      	bne.n	8006b24 <HAL_TIM_PWM_Start+0x58>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	e008      	b.n	8006b36 <HAL_TIM_PWM_Start+0x6a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	bf14      	ite	ne
 8006b30:	2301      	movne	r3, #1
 8006b32:	2300      	moveq	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e05e      	b.n	8006bfc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <HAL_TIM_PWM_Start+0x82>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b4c:	e013      	b.n	8006b76 <HAL_TIM_PWM_Start+0xaa>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d104      	bne.n	8006b5e <HAL_TIM_PWM_Start+0x92>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b5c:	e00b      	b.n	8006b76 <HAL_TIM_PWM_Start+0xaa>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d104      	bne.n	8006b6e <HAL_TIM_PWM_Start+0xa2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b6c:	e003      	b.n	8006b76 <HAL_TIM_PWM_Start+0xaa>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fd74 	bl	800766c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1e      	ldr	r2, [pc, #120]	; (8006c04 <HAL_TIM_PWM_Start+0x138>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d107      	bne.n	8006b9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <HAL_TIM_PWM_Start+0x138>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00e      	beq.n	8006bc6 <HAL_TIM_PWM_Start+0xfa>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb0:	d009      	beq.n	8006bc6 <HAL_TIM_PWM_Start+0xfa>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <HAL_TIM_PWM_Start+0x13c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d004      	beq.n	8006bc6 <HAL_TIM_PWM_Start+0xfa>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a12      	ldr	r2, [pc, #72]	; (8006c0c <HAL_TIM_PWM_Start+0x140>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d111      	bne.n	8006bea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b06      	cmp	r3, #6
 8006bd6:	d010      	beq.n	8006bfa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be8:	e007      	b.n	8006bfa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0201 	orr.w	r2, r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800

08006c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d122      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d11b      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0202 	mvn.w	r2, #2
 8006c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa6f 	bl	8007136 <HAL_TIM_IC_CaptureCallback>
 8006c58:	e005      	b.n	8006c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa62 	bl	8007124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fa71 	bl	8007148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d122      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d11b      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0204 	mvn.w	r2, #4
 8006c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa45 	bl	8007136 <HAL_TIM_IC_CaptureCallback>
 8006cac:	e005      	b.n	8006cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa38 	bl	8007124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fa47 	bl	8007148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d122      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d11b      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0208 	mvn.w	r2, #8
 8006ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa1b 	bl	8007136 <HAL_TIM_IC_CaptureCallback>
 8006d00:	e005      	b.n	8006d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa0e 	bl	8007124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fa1d 	bl	8007148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0310 	and.w	r3, r3, #16
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d122      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d11b      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0210 	mvn.w	r2, #16
 8006d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f9f1 	bl	8007136 <HAL_TIM_IC_CaptureCallback>
 8006d54:	e005      	b.n	8006d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9e4 	bl	8007124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f9f3 	bl	8007148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d10e      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d107      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0201 	mvn.w	r2, #1
 8006d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fb fccc 	bl	800272c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	d10e      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d107      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fd32 	bl	8007824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d10e      	bne.n	8006dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d107      	bne.n	8006dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f9b7 	bl	800715a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d10e      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d107      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0220 	mvn.w	r2, #32
 8006e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fcfd 	bl	8007812 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e0ac      	b.n	8006f94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	f200 809f 	bhi.w	8006f88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e85 	.word	0x08006e85
 8006e54:	08006f89 	.word	0x08006f89
 8006e58:	08006f89 	.word	0x08006f89
 8006e5c:	08006f89 	.word	0x08006f89
 8006e60:	08006ec5 	.word	0x08006ec5
 8006e64:	08006f89 	.word	0x08006f89
 8006e68:	08006f89 	.word	0x08006f89
 8006e6c:	08006f89 	.word	0x08006f89
 8006e70:	08006f07 	.word	0x08006f07
 8006e74:	08006f89 	.word	0x08006f89
 8006e78:	08006f89 	.word	0x08006f89
 8006e7c:	08006f89 	.word	0x08006f89
 8006e80:	08006f47 	.word	0x08006f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f9d0 	bl	8007230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0208 	orr.w	r2, r2, #8
 8006e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0204 	bic.w	r2, r2, #4
 8006eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6999      	ldr	r1, [r3, #24]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	619a      	str	r2, [r3, #24]
      break;
 8006ec2:	e062      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fa16 	bl	80072fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6999      	ldr	r1, [r3, #24]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	619a      	str	r2, [r3, #24]
      break;
 8006f04:	e041      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fa5f 	bl	80073d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0208 	orr.w	r2, r2, #8
 8006f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0204 	bic.w	r2, r2, #4
 8006f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	61da      	str	r2, [r3, #28]
      break;
 8006f44:	e021      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 faa9 	bl	80074a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69d9      	ldr	r1, [r3, #28]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	021a      	lsls	r2, r3, #8
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	61da      	str	r2, [r3, #28]
      break;
 8006f86:	e000      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_TIM_ConfigClockSource+0x18>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e0b3      	b.n	800711c <HAL_TIM_ConfigClockSource+0x180>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fec:	d03e      	beq.n	800706c <HAL_TIM_ConfigClockSource+0xd0>
 8006fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff2:	f200 8087 	bhi.w	8007104 <HAL_TIM_ConfigClockSource+0x168>
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	f000 8085 	beq.w	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007002:	d87f      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x168>
 8007004:	2b70      	cmp	r3, #112	; 0x70
 8007006:	d01a      	beq.n	800703e <HAL_TIM_ConfigClockSource+0xa2>
 8007008:	2b70      	cmp	r3, #112	; 0x70
 800700a:	d87b      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x168>
 800700c:	2b60      	cmp	r3, #96	; 0x60
 800700e:	d050      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x116>
 8007010:	2b60      	cmp	r3, #96	; 0x60
 8007012:	d877      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x168>
 8007014:	2b50      	cmp	r3, #80	; 0x50
 8007016:	d03c      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0xf6>
 8007018:	2b50      	cmp	r3, #80	; 0x50
 800701a:	d873      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x168>
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d058      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x136>
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	d86f      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x168>
 8007024:	2b30      	cmp	r3, #48	; 0x30
 8007026:	d064      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x156>
 8007028:	2b30      	cmp	r3, #48	; 0x30
 800702a:	d86b      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x168>
 800702c:	2b20      	cmp	r3, #32
 800702e:	d060      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x156>
 8007030:	2b20      	cmp	r3, #32
 8007032:	d867      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x168>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05c      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x156>
 8007038:	2b10      	cmp	r3, #16
 800703a:	d05a      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800703c:	e062      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6899      	ldr	r1, [r3, #8]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f000 faee 	bl	800762e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007060:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	609a      	str	r2, [r3, #8]
      break;
 800706a:	e04e      	b.n	800710a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	6899      	ldr	r1, [r3, #8]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f000 fad7 	bl	800762e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800708e:	609a      	str	r2, [r3, #8]
      break;
 8007090:	e03b      	b.n	800710a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6859      	ldr	r1, [r3, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	461a      	mov	r2, r3
 80070a0:	f000 fa4e 	bl	8007540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2150      	movs	r1, #80	; 0x50
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 faa5 	bl	80075fa <TIM_ITRx_SetConfig>
      break;
 80070b0:	e02b      	b.n	800710a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6859      	ldr	r1, [r3, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	461a      	mov	r2, r3
 80070c0:	f000 fa6c 	bl	800759c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2160      	movs	r1, #96	; 0x60
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fa95 	bl	80075fa <TIM_ITRx_SetConfig>
      break;
 80070d0:	e01b      	b.n	800710a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 fa2e 	bl	8007540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2140      	movs	r1, #64	; 0x40
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fa85 	bl	80075fa <TIM_ITRx_SetConfig>
      break;
 80070f0:	e00b      	b.n	800710a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f000 fa7c 	bl	80075fa <TIM_ITRx_SetConfig>
        break;
 8007102:	e002      	b.n	800710a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007104:	bf00      	nop
 8007106:	e000      	b.n	800710a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007108:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr

08007136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr

08007148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr

0800715a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a29      	ldr	r2, [pc, #164]	; (8007224 <TIM_Base_SetConfig+0xb8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00b      	beq.n	800719c <TIM_Base_SetConfig+0x30>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718a:	d007      	beq.n	800719c <TIM_Base_SetConfig+0x30>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a26      	ldr	r2, [pc, #152]	; (8007228 <TIM_Base_SetConfig+0xbc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <TIM_Base_SetConfig+0x30>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a25      	ldr	r2, [pc, #148]	; (800722c <TIM_Base_SetConfig+0xc0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d108      	bne.n	80071ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <TIM_Base_SetConfig+0xb8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00b      	beq.n	80071ce <TIM_Base_SetConfig+0x62>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071bc:	d007      	beq.n	80071ce <TIM_Base_SetConfig+0x62>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a19      	ldr	r2, [pc, #100]	; (8007228 <TIM_Base_SetConfig+0xbc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d003      	beq.n	80071ce <TIM_Base_SetConfig+0x62>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a18      	ldr	r2, [pc, #96]	; (800722c <TIM_Base_SetConfig+0xc0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d108      	bne.n	80071e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a07      	ldr	r2, [pc, #28]	; (8007224 <TIM_Base_SetConfig+0xb8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d103      	bne.n	8007214 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	615a      	str	r2, [r3, #20]
}
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40000400 	.word	0x40000400
 800722c:	40000800 	.word	0x40000800

08007230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0201 	bic.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f023 0302 	bic.w	r3, r3, #2
 8007278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1c      	ldr	r2, [pc, #112]	; (80072f8 <TIM_OC1_SetConfig+0xc8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d10c      	bne.n	80072a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0308 	bic.w	r3, r3, #8
 8007292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 0304 	bic.w	r3, r3, #4
 80072a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <TIM_OC1_SetConfig+0xc8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d111      	bne.n	80072d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	621a      	str	r2, [r3, #32]
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	40012c00 	.word	0x40012c00

080072fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f023 0210 	bic.w	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0320 	bic.w	r3, r3, #32
 8007346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a1d      	ldr	r2, [pc, #116]	; (80073cc <TIM_OC2_SetConfig+0xd0>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d10d      	bne.n	8007378 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a14      	ldr	r2, [pc, #80]	; (80073cc <TIM_OC2_SetConfig+0xd0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d113      	bne.n	80073a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800738e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr
 80073cc:	40012c00 	.word	0x40012c00

080073d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <TIM_OC3_SetConfig+0xd0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d10d      	bne.n	800744a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <TIM_OC3_SetConfig+0xd0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d113      	bne.n	800747a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	621a      	str	r2, [r3, #32]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	bc80      	pop	{r7}
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40012c00 	.word	0x40012c00

080074a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	031b      	lsls	r3, r3, #12
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a0f      	ldr	r2, [pc, #60]	; (800753c <TIM_OC4_SetConfig+0x98>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d109      	bne.n	8007518 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800750a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	019b      	lsls	r3, r3, #6
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	621a      	str	r2, [r3, #32]
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr
 800753c:	40012c00 	.word	0x40012c00

08007540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f023 0201 	bic.w	r2, r3, #1
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800756a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f023 030a 	bic.w	r3, r3, #10
 800757c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr

0800759c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	f023 0210 	bic.w	r2, r3, #16
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	031b      	lsls	r3, r3, #12
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	621a      	str	r2, [r3, #32]
}
 80075f0:	bf00      	nop
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	4770      	bx	lr

080075fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	f043 0307 	orr.w	r3, r3, #7
 800761c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	609a      	str	r2, [r3, #8]
}
 8007624:	bf00      	nop
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr

0800762e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800762e:	b480      	push	{r7}
 8007630:	b087      	sub	sp, #28
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007648:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	021a      	lsls	r2, r3, #8
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	431a      	orrs	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4313      	orrs	r3, r2
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	609a      	str	r2, [r3, #8]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f003 031f 	and.w	r3, r3, #31
 800767e:	2201      	movs	r2, #1
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1a      	ldr	r2, [r3, #32]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	43db      	mvns	r3, r3
 800768e:	401a      	ands	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a1a      	ldr	r2, [r3, #32]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	fa01 f303 	lsl.w	r3, r1, r3
 80076a4:	431a      	orrs	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	621a      	str	r2, [r3, #32]
}
 80076aa:	bf00      	nop
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e046      	b.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a16      	ldr	r2, [pc, #88]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00e      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007718:	d009      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a12      	ldr	r2, [pc, #72]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d004      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a10      	ldr	r2, [pc, #64]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d10c      	bne.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	4313      	orrs	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr
 8007764:	40012c00 	.word	0x40012c00
 8007768:	40000400 	.word	0x40000400
 800776c:	40000800 	.word	0x40000800

08007770 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007788:	2302      	movs	r3, #2
 800778a:	e03d      	b.n	8007808 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	bc80      	pop	{r7}
 8007810:	4770      	bx	lr

08007812 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr

08007836 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e03f      	b.n	80078c8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7fc f98d 	bl	8003b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2224      	movs	r2, #36	; 0x24
 8007866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007878:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fc84 	bl	8008188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800788e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695a      	ldr	r2, [r3, #20]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800789e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d17c      	bne.n	80079ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_UART_Transmit+0x2c>
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e075      	b.n	80079ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007906:	2b01      	cmp	r3, #1
 8007908:	d101      	bne.n	800790e <HAL_UART_Transmit+0x3e>
 800790a:	2302      	movs	r3, #2
 800790c:	e06e      	b.n	80079ec <HAL_UART_Transmit+0x11c>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2221      	movs	r2, #33	; 0x21
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007924:	f7fc fa0a 	bl	8003d3c <HAL_GetTick>
 8007928:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	88fa      	ldrh	r2, [r7, #6]
 800792e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	88fa      	ldrh	r2, [r7, #6]
 8007934:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793e:	d108      	bne.n	8007952 <HAL_UART_Transmit+0x82>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	61bb      	str	r3, [r7, #24]
 8007950:	e003      	b.n	800795a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007962:	e02a      	b.n	80079ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2200      	movs	r2, #0
 800796c:	2180      	movs	r1, #128	; 0x80
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fa37 	bl	8007de2 <UART_WaitOnFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e036      	b.n	80079ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10b      	bne.n	800799c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007992:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	3302      	adds	r3, #2
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	e007      	b.n	80079ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	781a      	ldrb	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	3301      	adds	r3, #1
 80079aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1cf      	bne.n	8007964 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2200      	movs	r2, #0
 80079cc:	2140      	movs	r1, #64	; 0x40
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 fa07 	bl	8007de2 <UART_WaitOnFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e006      	b.n	80079ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e000      	b.n	80079ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079ea:	2302      	movs	r3, #2
  }
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	4613      	mov	r3, r2
 8007a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d11d      	bne.n	8007a4a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <HAL_UART_Receive_IT+0x26>
 8007a14:	88fb      	ldrh	r3, [r7, #6]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e016      	b.n	8007a4c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_UART_Receive_IT+0x38>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e00f      	b.n	8007a4c <HAL_UART_Receive_IT+0x58>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 fa18 	bl	8007e76 <UART_Start_Receive_IT>
 8007a46:	4603      	mov	r3, r0
 8007a48:	e000      	b.n	8007a4c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a4a:	2302      	movs	r3, #2
  }
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	; 0x28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10d      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d008      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x52>
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fac9 	bl	8008036 <UART_Receive_IT>
      return;
 8007aa4:	e17b      	b.n	8007d9e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 80b1 	beq.w	8007c10 <HAL_UART_IRQHandler+0x1bc>
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <HAL_UART_IRQHandler+0x70>
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80a6 	beq.w	8007c10 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x90>
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	f043 0201 	orr.w	r2, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <HAL_UART_IRQHandler+0xb0>
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	f043 0202 	orr.w	r2, r3, #2
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <HAL_UART_IRQHandler+0xd0>
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1c:	f043 0204 	orr.w	r2, r3, #4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	f003 0308 	and.w	r3, r3, #8
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00f      	beq.n	8007b4e <HAL_UART_IRQHandler+0xfa>
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <HAL_UART_IRQHandler+0xee>
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	f043 0208 	orr.w	r2, r3, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 811e 	beq.w	8007d94 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d007      	beq.n	8007b72 <HAL_UART_IRQHandler+0x11e>
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa62 	bl	8008036 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bf14      	ite	ne
 8007b80:	2301      	movne	r3, #1
 8007b82:	2300      	moveq	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d102      	bne.n	8007b9a <HAL_UART_IRQHandler+0x146>
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d031      	beq.n	8007bfe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f9a4 	bl	8007ee8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d023      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695a      	ldr	r2, [r3, #20]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bbc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d013      	beq.n	8007bee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	4a76      	ldr	r2, [pc, #472]	; (8007da4 <HAL_UART_IRQHandler+0x350>)
 8007bcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fc fe80 	bl	80048d8 <HAL_DMA_Abort_IT>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bec:	e00e      	b.n	8007c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8e3 	bl	8007dba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	e00a      	b.n	8007c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f8df 	bl	8007dba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfc:	e006      	b.n	8007c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8db 	bl	8007dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c0a:	e0c3      	b.n	8007d94 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	bf00      	nop
    return;
 8007c0e:	e0c1      	b.n	8007d94 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	f040 80a1 	bne.w	8007d5c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	f003 0310 	and.w	r3, r3, #16
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 809b 	beq.w	8007d5c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8095 	beq.w	8007d5c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d04e      	beq.n	8007cf4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007c60:	8a3b      	ldrh	r3, [r7, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8098 	beq.w	8007d98 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c6c:	8a3a      	ldrh	r2, [r7, #16]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	f080 8092 	bcs.w	8007d98 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	8a3a      	ldrh	r2, [r7, #16]
 8007c78:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d02b      	beq.n	8007cdc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c92:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695a      	ldr	r2, [r3, #20]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695a      	ldr	r2, [r3, #20]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 0210 	bic.w	r2, r2, #16
 8007cd0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fc fdc3 	bl	8004862 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f86d 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007cf2:	e051      	b.n	8007d98 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d047      	beq.n	8007d9c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007d0c:	8a7b      	ldrh	r3, [r7, #18]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d044      	beq.n	8007d9c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d20:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695a      	ldr	r2, [r3, #20]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0201 	bic.w	r2, r2, #1
 8007d30:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0210 	bic.w	r2, r2, #16
 8007d4e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d50:	8a7b      	ldrh	r3, [r7, #18]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f839 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d5a:	e01f      	b.n	8007d9c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <HAL_UART_IRQHandler+0x324>
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f8f9 	bl	8007f68 <UART_Transmit_IT>
    return;
 8007d76:	e012      	b.n	8007d9e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00d      	beq.n	8007d9e <HAL_UART_IRQHandler+0x34a>
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f93a 	bl	8008006 <UART_EndTransmit_IT>
    return;
 8007d92:	e004      	b.n	8007d9e <HAL_UART_IRQHandler+0x34a>
    return;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <HAL_UART_IRQHandler+0x34a>
      return;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <HAL_UART_IRQHandler+0x34a>
      return;
 8007d9c:	bf00      	nop
  }
}
 8007d9e:	3728      	adds	r7, #40	; 0x28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	08007f41 	.word	0x08007f41

08007da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr

08007dba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr

08007de2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df2:	e02c      	b.n	8007e4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d028      	beq.n	8007e4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d007      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e02:	f7fb ff9b 	bl	8003d3c <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d21d      	bcs.n	8007e4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	695a      	ldr	r2, [r3, #20]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0201 	bic.w	r2, r2, #1
 8007e30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e00f      	b.n	8007e6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4013      	ands	r3, r2
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	bf0c      	ite	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	2300      	movne	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d0c3      	beq.n	8007df4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	4613      	mov	r3, r2
 8007e82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	88fa      	ldrh	r2, [r7, #6]
 8007e94:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2222      	movs	r2, #34	; 0x22
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eba:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695a      	ldr	r2, [r3, #20]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0220 	orr.w	r2, r2, #32
 8007eda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc80      	pop	{r7}
 8007ee6:	4770      	bx	lr

08007ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007efe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695a      	ldr	r2, [r3, #20]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d107      	bne.n	8007f28 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0210 	bic.w	r2, r2, #16
 8007f26:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr

08007f40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff ff2d 	bl	8007dba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b21      	cmp	r3, #33	; 0x21
 8007f7a:	d13e      	bne.n	8007ffa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f84:	d114      	bne.n	8007fb0 <UART_Transmit_IT+0x48>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d110      	bne.n	8007fb0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	1c9a      	adds	r2, r3, #2
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	621a      	str	r2, [r3, #32]
 8007fae:	e008      	b.n	8007fc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6211      	str	r1, [r2, #32]
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10f      	bne.n	8007ff6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fe4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ff4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e000      	b.n	8007ffc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ffa:	2302      	movs	r3, #2
  }
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr

08008006 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800801c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff febe 	bl	8007da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b086      	sub	sp, #24
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b22      	cmp	r3, #34	; 0x22
 8008048:	f040 8099 	bne.w	800817e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008054:	d117      	bne.n	8008086 <UART_Receive_IT+0x50>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d113      	bne.n	8008086 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008074:	b29a      	uxth	r2, r3
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807e:	1c9a      	adds	r2, r3, #2
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	629a      	str	r2, [r3, #40]	; 0x28
 8008084:	e026      	b.n	80080d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008098:	d007      	beq.n	80080aa <UART_Receive_IT+0x74>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <UART_Receive_IT+0x82>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e008      	b.n	80080ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29b      	uxth	r3, r3
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4619      	mov	r1, r3
 80080e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d148      	bne.n	800817a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0220 	bic.w	r2, r2, #32
 80080f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	695a      	ldr	r2, [r3, #20]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0201 	bic.w	r2, r2, #1
 8008116:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	2b01      	cmp	r3, #1
 8008126:	d123      	bne.n	8008170 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0210 	bic.w	r2, r2, #16
 800813c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0310 	and.w	r3, r3, #16
 8008148:	2b10      	cmp	r3, #16
 800814a:	d10a      	bne.n	8008162 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800814c:	2300      	movs	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff fe2f 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
 800816e:	e002      	b.n	8008176 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7fa fb9f 	bl	80028b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e002      	b.n	8008180 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	e000      	b.n	8008180 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800817e:	2302      	movs	r3, #2
  }
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80081c2:	f023 030c 	bic.w	r3, r3, #12
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6812      	ldr	r2, [r2, #0]
 80081ca:	68b9      	ldr	r1, [r7, #8]
 80081cc:	430b      	orrs	r3, r1
 80081ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a2c      	ldr	r2, [pc, #176]	; (800829c <UART_SetConfig+0x114>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d103      	bne.n	80081f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80081f0:	f7fe f99c 	bl	800652c <HAL_RCC_GetPCLK2Freq>
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	e002      	b.n	80081fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80081f8:	f7fe f984 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 80081fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	009a      	lsls	r2, r3, #2
 8008208:	441a      	add	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	fbb2 f3f3 	udiv	r3, r2, r3
 8008214:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <UART_SetConfig+0x118>)
 8008216:	fba2 2303 	umull	r2, r3, r2, r3
 800821a:	095b      	lsrs	r3, r3, #5
 800821c:	0119      	lsls	r1, r3, #4
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009a      	lsls	r2, r3, #2
 8008228:	441a      	add	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	fbb2 f2f3 	udiv	r2, r2, r3
 8008234:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <UART_SetConfig+0x118>)
 8008236:	fba3 0302 	umull	r0, r3, r3, r2
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	2064      	movs	r0, #100	; 0x64
 800823e:	fb00 f303 	mul.w	r3, r0, r3
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	011b      	lsls	r3, r3, #4
 8008246:	3332      	adds	r3, #50	; 0x32
 8008248:	4a15      	ldr	r2, [pc, #84]	; (80082a0 <UART_SetConfig+0x118>)
 800824a:	fba2 2303 	umull	r2, r3, r2, r3
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008254:	4419      	add	r1, r3
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009a      	lsls	r2, r3, #2
 8008260:	441a      	add	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	fbb2 f2f3 	udiv	r2, r2, r3
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <UART_SetConfig+0x118>)
 800826e:	fba3 0302 	umull	r0, r3, r3, r2
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	2064      	movs	r0, #100	; 0x64
 8008276:	fb00 f303 	mul.w	r3, r0, r3
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	3332      	adds	r3, #50	; 0x32
 8008280:	4a07      	ldr	r2, [pc, #28]	; (80082a0 <UART_SetConfig+0x118>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	f003 020f 	and.w	r2, r3, #15
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	440a      	add	r2, r1
 8008292:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40013800 	.word	0x40013800
 80082a0:	51eb851f 	.word	0x51eb851f

080082a4 <__libc_init_array>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	2600      	movs	r6, #0
 80082a8:	4d0c      	ldr	r5, [pc, #48]	; (80082dc <__libc_init_array+0x38>)
 80082aa:	4c0d      	ldr	r4, [pc, #52]	; (80082e0 <__libc_init_array+0x3c>)
 80082ac:	1b64      	subs	r4, r4, r5
 80082ae:	10a4      	asrs	r4, r4, #2
 80082b0:	42a6      	cmp	r6, r4
 80082b2:	d109      	bne.n	80082c8 <__libc_init_array+0x24>
 80082b4:	f000 f822 	bl	80082fc <_init>
 80082b8:	2600      	movs	r6, #0
 80082ba:	4d0a      	ldr	r5, [pc, #40]	; (80082e4 <__libc_init_array+0x40>)
 80082bc:	4c0a      	ldr	r4, [pc, #40]	; (80082e8 <__libc_init_array+0x44>)
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	10a4      	asrs	r4, r4, #2
 80082c2:	42a6      	cmp	r6, r4
 80082c4:	d105      	bne.n	80082d2 <__libc_init_array+0x2e>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082cc:	4798      	blx	r3
 80082ce:	3601      	adds	r6, #1
 80082d0:	e7ee      	b.n	80082b0 <__libc_init_array+0xc>
 80082d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d6:	4798      	blx	r3
 80082d8:	3601      	adds	r6, #1
 80082da:	e7f2      	b.n	80082c2 <__libc_init_array+0x1e>
 80082dc:	080083a8 	.word	0x080083a8
 80082e0:	080083a8 	.word	0x080083a8
 80082e4:	080083a8 	.word	0x080083a8
 80082e8:	080083ac 	.word	0x080083ac

080082ec <memset>:
 80082ec:	4603      	mov	r3, r0
 80082ee:	4402      	add	r2, r0
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d100      	bne.n	80082f6 <memset+0xa>
 80082f4:	4770      	bx	lr
 80082f6:	f803 1b01 	strb.w	r1, [r3], #1
 80082fa:	e7f9      	b.n	80082f0 <memset+0x4>

080082fc <_init>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	bf00      	nop
 8008300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008302:	bc08      	pop	{r3}
 8008304:	469e      	mov	lr, r3
 8008306:	4770      	bx	lr

08008308 <_fini>:
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	bf00      	nop
 800830c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830e:	bc08      	pop	{r3}
 8008310:	469e      	mov	lr, r3
 8008312:	4770      	bx	lr
