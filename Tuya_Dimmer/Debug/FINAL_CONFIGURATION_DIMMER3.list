
FINAL_CONFIGURATION_DIMMER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080066cc  080066cc  000166cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006750  08006750  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006750  08006750  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006750  08006750  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000070  080067c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  080067c8  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1b3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002322  00000000  00000000  0002f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00031570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f1  00000000  00000000  000333f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e9d  00000000  00000000  0004ade1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089633  00000000  00000000  0005cc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e62b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ac  00000000  00000000  000e6304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080066b4 	.word	0x080066b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080066b4 	.word	0x080066b4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000770:	4b74      	ldr	r3, [pc, #464]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a73      	ldr	r2, [pc, #460]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b71      	ldr	r3, [pc, #452]	; (8000944 <MX_GPIO_Init+0x1e8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b6e      	ldr	r3, [pc, #440]	; (8000944 <MX_GPIO_Init+0x1e8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a6d      	ldr	r2, [pc, #436]	; (8000944 <MX_GPIO_Init+0x1e8>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b6b      	ldr	r3, [pc, #428]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a0:	4b68      	ldr	r3, [pc, #416]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a67      	ldr	r2, [pc, #412]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b65      	ldr	r3, [pc, #404]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b62      	ldr	r3, [pc, #392]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a61      	ldr	r2, [pc, #388]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007be:	f043 0308 	orr.w	r3, r3, #8
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b5f      	ldr	r3, [pc, #380]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d0:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a5b      	ldr	r2, [pc, #364]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007d6:	f043 0320 	orr.w	r3, r3, #32
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b59      	ldr	r3, [pc, #356]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0320 	and.w	r3, r3, #32
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY2_Pin|RELAY3_Pin|RELAY4_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2170      	movs	r1, #112	; 0x70
 80007ec:	4856      	ldr	r0, [pc, #344]	; (8000948 <MX_GPIO_Init+0x1ec>)
 80007ee:	f002 fdd6 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY6_Pin|RELAY5_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2130      	movs	r1, #48	; 0x30
 80007f6:	4855      	ldr	r0, [pc, #340]	; (800094c <MX_GPIO_Init+0x1f0>)
 80007f8:	f002 fdd1 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY1_Pin|RELAY0_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2103      	movs	r1, #3
 8000800:	4853      	ldr	r0, [pc, #332]	; (8000950 <MX_GPIO_Init+0x1f4>)
 8000802:	f002 fdcc 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080c:	4851      	ldr	r0, [pc, #324]	; (8000954 <MX_GPIO_Init+0x1f8>)
 800080e:	f002 fdc6 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2101      	movs	r1, #1
 8000816:	4850      	ldr	r0, [pc, #320]	; (8000958 <MX_GPIO_Init+0x1fc>)
 8000818:	f002 fdc1 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RELAY2_Pin|RELAY3_Pin|RELAY4_Pin;
 800081c:	2370      	movs	r3, #112	; 0x70
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2302      	movs	r3, #2
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	4619      	mov	r1, r3
 8000832:	4845      	ldr	r0, [pc, #276]	; (8000948 <MX_GPIO_Init+0x1ec>)
 8000834:	f002 fc18 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_Pin;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083c:	4b47      	ldr	r3, [pc, #284]	; (800095c <MX_GPIO_Init+0x200>)
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	4619      	mov	r1, r3
 800084a:	4842      	ldr	r0, [pc, #264]	; (8000954 <MX_GPIO_Init+0x1f8>)
 800084c:	f002 fc0c 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY6_Pin|RELAY5_Pin;
 8000850:	2330      	movs	r3, #48	; 0x30
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2302      	movs	r3, #2
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4619      	mov	r1, r3
 8000866:	4839      	ldr	r0, [pc, #228]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000868:	f002 fbfe 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY1_Pin|RELAY0_Pin;
 800086c:	2303      	movs	r3, #3
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2302      	movs	r3, #2
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	4619      	mov	r1, r3
 8000882:	4833      	ldr	r0, [pc, #204]	; (8000950 <MX_GPIO_Init+0x1f4>)
 8000884:	f002 fbf0 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH9_Pin;
 8000888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH9_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4619      	mov	r1, r3
 800089c:	482a      	ldr	r0, [pc, #168]	; (8000948 <MX_GPIO_Init+0x1ec>)
 800089e:	f002 fbe3 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = TOUCH0_Pin|TOUCH10_Pin;
 80008a2:	f240 4301 	movw	r3, #1025	; 0x401
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	4619      	mov	r1, r3
 80008b6:	4824      	ldr	r0, [pc, #144]	; (8000948 <MX_GPIO_Init+0x1ec>)
 80008b8:	f002 fbd6 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH2_Pin|TOUCH4_Pin|TOUCH1_Pin|TOUCH3_Pin;
 80008bc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	4619      	mov	r1, r3
 80008d0:	481f      	ldr	r0, [pc, #124]	; (8000950 <MX_GPIO_Init+0x1f4>)
 80008d2:	f002 fbc9 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TOUCH5_Pin|DIMMER_DOWN_Pin|DIMMER_UP_Pin|TOUCH6_Pin;
 80008d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4619      	mov	r1, r3
 80008ea:	481b      	ldr	r0, [pc, #108]	; (8000958 <MX_GPIO_Init+0x1fc>)
 80008ec:	f002 fbbc 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIMMER_Pin;
 80008f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2302      	movs	r3, #2
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIMMER_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4619      	mov	r1, r3
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <MX_GPIO_Init+0x1f8>)
 800090a:	f002 fbad 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_GPIO_Init+0x1fc>)
 8000926:	f002 fb9f 	bl	8003068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	2006      	movs	r0, #6
 8000930:	f002 fab3 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f002 facc 	bl	8002ed2 <HAL_NVIC_EnableIRQ>

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000
 8000948:	40011800 	.word	0x40011800
 800094c:	40011000 	.word	0x40011000
 8000950:	40010c00 	.word	0x40010c00
 8000954:	40010800 	.word	0x40010800
 8000958:	40011400 	.word	0x40011400
 800095c:	10210000 	.word	0x10210000

08000960 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x50>)
 8000966:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <MX_I2C1_Init+0x54>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_I2C1_Init+0x50>)
 800096c:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <MX_I2C1_Init+0x58>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_I2C1_Init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_I2C1_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_I2C1_Init+0x50>)
 800097e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000982:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_I2C1_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_I2C1_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_I2C1_Init+0x50>)
 800099e:	f002 fd2f 	bl	8003400 <HAL_I2C_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a8:	f001 fc9e 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	40005400 	.word	0x40005400
 80009b8:	000186a0 	.word	0x000186a0

080009bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <HAL_I2C_MspInit+0x70>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d123      	bne.n	8000a24 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_I2C_MspInit+0x74>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <HAL_I2C_MspInit+0x74>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_I2C_MspInit+0x74>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009f4:	23c0      	movs	r3, #192	; 0xc0
 80009f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f8:	2312      	movs	r3, #18
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <HAL_I2C_MspInit+0x78>)
 8000a08:	f002 fb2e 	bl	8003068 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_I2C_MspInit+0x74>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_I2C_MspInit+0x74>)
 8000a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_I2C_MspInit+0x74>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3e:	f002 f8cf 	bl	8002be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a42:	f000 f8ad 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a46:	f7ff fe89 	bl	800075c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a4a:	f001 fccd 	bl	80023e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a4e:	f001 fddb 	bl	8002608 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a52:	f001 fe6f 	bl	8002734 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000a56:	f002 f811 	bl	8002a7c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a5a:	f001 fd89 	bl	8002570 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000a5e:	f7ff ff7f 	bl	8000960 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // PWM start for Switch Status indication LEDs

  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                      //LED0
 8000a62:	2100      	movs	r1, #0
 8000a64:	4843      	ldr	r0, [pc, #268]	; (8000b74 <main+0x13c>)
 8000a66:	f004 fa0d 	bl	8004e84 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);                      //LED1
 8000a6a:	210c      	movs	r1, #12
 8000a6c:	4841      	ldr	r0, [pc, #260]	; (8000b74 <main+0x13c>)
 8000a6e:	f004 fa09 	bl	8004e84 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);						 //LED2
 8000a72:	210c      	movs	r1, #12
 8000a74:	4840      	ldr	r0, [pc, #256]	; (8000b78 <main+0x140>)
 8000a76:	f004 fa05 	bl	8004e84 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);                      //LED3
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	483d      	ldr	r0, [pc, #244]	; (8000b74 <main+0x13c>)
 8000a7e:	f004 fa01 	bl	8004e84 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);						 //LED4
 8000a82:	2108      	movs	r1, #8
 8000a84:	483c      	ldr	r0, [pc, #240]	; (8000b78 <main+0x140>)
 8000a86:	f004 f9fd 	bl	8004e84 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);                      //LED5
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	4839      	ldr	r0, [pc, #228]	; (8000b74 <main+0x13c>)
 8000a8e:	f004 f9f9 	bl	8004e84 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);					     //LED6
 8000a92:	2104      	movs	r1, #4
 8000a94:	4838      	ldr	r0, [pc, #224]	; (8000b78 <main+0x140>)
 8000a96:	f004 f9f5 	bl	8004e84 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                      //LED7
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4836      	ldr	r0, [pc, #216]	; (8000b78 <main+0x140>)
 8000a9e:	f004 f9f1 	bl	8004e84 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);                      //LED8
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4835      	ldr	r0, [pc, #212]	; (8000b7c <main+0x144>)
 8000aa6:	f004 f9ed 	bl	8004e84 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);                      //indication_LED
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4833      	ldr	r0, [pc, #204]	; (8000b7c <main+0x144>)
 8000aae:	f004 f9e9 	bl	8004e84 <HAL_TIM_PWM_Start>

      //INITIAL STATE PWM ON WITH MINIMUM POWER ALL SWITCH

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);          //LED0
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <main+0x148>)
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <main+0x13c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);          //LED1
 8000abc:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <main+0x148>)
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <main+0x13c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);          //LED2
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <main+0x148>)
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <main+0x140>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);          //LED3
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <main+0x148>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <main+0x13c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);          //LED4
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <main+0x148>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <main+0x140>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);          //LED5
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <main+0x148>)
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <main+0x13c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MIN_PWM);          //LED6
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <main+0x148>)
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <main+0x140>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,ZERO_PWM);          //LED7
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <main+0x14c>)
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <main+0x140>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,ZERO_PWM);          //LED8
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <main+0x14c>)
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <main+0x144>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Z_PWM);            //indication
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <main+0x144>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2200      	movs	r2, #0
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38

        EEPROM_initial();
 8000b14:	f001 fb24 	bl	8002160 <EEPROM_initial>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	       HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	491b      	ldr	r1, [pc, #108]	; (8000b88 <main+0x150>)
 8000b1c:	481b      	ldr	r0, [pc, #108]	; (8000b8c <main+0x154>)
 8000b1e:	f005 f945 	bl	8005dac <HAL_UART_Receive_IT>
	  	   Touch_Read();
 8000b22:	f000 f895 	bl	8000c50 <Touch_Read>
	  	   Uart_Read_data();
 8000b26:	f000 fea3 	bl	8001870 <Uart_Read_data>
	  	   Rx_Data_evaluation();
 8000b2a:	f000 ff31 	bl	8001990 <Rx_Data_evaluation>
	  	   Indication();
 8000b2e:	f001 f855 	bl	8001bdc <Indication>
	  	   if( Tuya_flag == 1)
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <main+0x158>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d1ee      	bne.n	8000b18 <main+0xe0>
	  	   {
	  		   uint32_t Now = HAL_GetTick();
 8000b3a:	f002 f8a9 	bl	8002c90 <HAL_GetTick>
 8000b3e:	6078      	str	r0, [r7, #4]
	  		   if(Tuya_Heart_Flag == 1)
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <main+0x15c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d103      	bne.n	8000b50 <main+0x118>
	  		   {
	  			   Tuya_Heart_Flag = 0;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <main+0x15c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e7e3      	b.n	8000b18 <main+0xe0>
	  		   }
	  		   else
	  		   {
	  			   if((Now - Tuya_Start_Time) > 45000)
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <main+0x160>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d9db      	bls.n	8000b18 <main+0xe0>
	  			   {
	  				   Tuya_Start_Time = Now;
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <main+0x160>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
	  				   Tuya_Reset_Flag = 1;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <main+0x164>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
	  				   Tuya_Reset();
 8000b6c:	f000 f854 	bl	8000c18 <Tuya_Reset>
	       HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 8000b70:	e7d2      	b.n	8000b18 <main+0xe0>
 8000b72:	bf00      	nop
 8000b74:	2000031c 	.word	0x2000031c
 8000b78:	20000364 	.word	0x20000364
 8000b7c:	2000028c 	.word	0x2000028c
 8000b80:	20000001 	.word	0x20000001
 8000b84:	2000026f 	.word	0x2000026f
 8000b88:	20000259 	.word	0x20000259
 8000b8c:	200003ac 	.word	0x200003ac
 8000b90:	2000026c 	.word	0x2000026c
 8000b94:	20000264 	.word	0x20000264
 8000b98:	20000268 	.word	0x20000268
 8000b9c:	20000265 	.word	0x20000265

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b090      	sub	sp, #64	; 0x40
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	2228      	movs	r2, #40	; 0x28
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f005 fd78 	bl	80066a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fc12 	bl	8004400 <HAL_RCC_OscConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000be2:	f001 fb81 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be6:	230f      	movs	r3, #15
 8000be8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 fe80 	bl	8004904 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c0a:	f001 fb6d 	bl	80022e8 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3740      	adds	r7, #64	; 0x40
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <Tuya_Reset>:

/* USER CODE BEGIN 4 */
///////////STM32RESTART//////////////
void Tuya_Reset()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
      if(Tuya_Reset_Flag == 1)
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <Tuya_Reset+0x30>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d10f      	bne.n	8000c44 <Tuya_Reset+0x2c>
      {
         Tuya_Reset_Flag = 0;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <Tuya_Reset+0x30>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
         HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <Tuya_Reset+0x34>)
 8000c30:	f002 fbb5 	bl	800339e <HAL_GPIO_WritePin>
         HAL_Delay(Delay);
 8000c34:	2032      	movs	r0, #50	; 0x32
 8000c36:	f002 f835 	bl	8002ca4 <HAL_Delay>
         HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <Tuya_Reset+0x34>)
 8000c40:	f002 fbad 	bl	800339e <HAL_GPIO_WritePin>
      }
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000265 	.word	0x20000265
 8000c4c:	40011400 	.word	0x40011400

08000c50 <Touch_Read>:
/***********************SWITCH_OPERATION**************************/
void Touch_Read(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	/*********************************** SWITCH1 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH0_GPIO_Port,TOUCH0_Pin))
 8000c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5a:	48a0      	ldr	r0, [pc, #640]	; (8000edc <Touch_Read+0x28c>)
 8000c5c:	f002 fb88 	bl	8003370 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d04a      	beq.n	8000cfc <Touch_Read+0xac>
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d158      	bne.n	8000d1c <Touch_Read+0xcc>
	{
			static uint32_t Start_Time = 0;
			static uint8_t long_press = 0;
		case GPIO_PIN_SET:
			;
			if(Touch_Flag[0] == 0)             //OFF _CHECKING
 8000c6a:	4b9d      	ldr	r3, [pc, #628]	; (8000ee0 <Touch_Read+0x290>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10c      	bne.n	8000c8c <Touch_Read+0x3c>
			{
				switch_operation(Switch_1,SW_ON);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2001      	movs	r0, #1
 8000c76:	f000 fa53 	bl	8001120 <switch_operation>

				Start_Time=HAL_GetTick();
 8000c7a:	f002 f809 	bl	8002c90 <HAL_GetTick>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a98      	ldr	r2, [pc, #608]	; (8000ee4 <Touch_Read+0x294>)
 8000c82:	6013      	str	r3, [r2, #0]

				long_press = 0;
 8000c84:	4b98      	ldr	r3, [pc, #608]	; (8000ee8 <Touch_Read+0x298>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e00f      	b.n	8000cac <Touch_Read+0x5c>
			}
			else if(Touch_Flag[0] == 2)          //ON
 8000c8c:	4b94      	ldr	r3, [pc, #592]	; (8000ee0 <Touch_Read+0x290>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d10b      	bne.n	8000cac <Touch_Read+0x5c>
			{
				switch_operation(Switch_1,SW_OFF);
 8000c94:	2100      	movs	r1, #0
 8000c96:	2001      	movs	r0, #1
 8000c98:	f000 fa42 	bl	8001120 <switch_operation>
				Start_Time=HAL_GetTick();
 8000c9c:	f001 fff8 	bl	8002c90 <HAL_GetTick>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a90      	ldr	r2, [pc, #576]	; (8000ee4 <Touch_Read+0x294>)
 8000ca4:	6013      	str	r3, [r2, #0]
				long_press = 0;
 8000ca6:	4b90      	ldr	r3, [pc, #576]	; (8000ee8 <Touch_Read+0x298>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
			}
			if((HAL_GPIO_ReadPin(TOUCH0_GPIO_Port,TOUCH0_Pin)==GPIO_PIN_SET))
 8000cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb0:	488a      	ldr	r0, [pc, #552]	; (8000edc <Touch_Read+0x28c>)
 8000cb2:	f002 fb5d 	bl	8003370 <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d11b      	bne.n	8000cf4 <Touch_Read+0xa4>
			{
				if(Touch_Flag[0]==1||Touch_Flag[0]==3)
 8000cbc:	4b88      	ldr	r3, [pc, #544]	; (8000ee0 <Touch_Read+0x290>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d003      	beq.n	8000ccc <Touch_Read+0x7c>
 8000cc4:	4b86      	ldr	r3, [pc, #536]	; (8000ee0 <Touch_Read+0x290>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d113      	bne.n	8000cf4 <Touch_Read+0xa4>
				{
					if(long_press==0)
 8000ccc:	4b86      	ldr	r3, [pc, #536]	; (8000ee8 <Touch_Read+0x298>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10f      	bne.n	8000cf4 <Touch_Read+0xa4>
					{
					   uint32_t now_time = HAL_GetTick();
 8000cd4:	f001 ffdc 	bl	8002c90 <HAL_GetTick>
 8000cd8:	6078      	str	r0, [r7, #4]

						if((now_time-Start_Time) > 5000)
 8000cda:	4b82      	ldr	r3, [pc, #520]	; (8000ee4 <Touch_Read+0x294>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d904      	bls.n	8000cf4 <Touch_Read+0xa4>
						{
							long_press=1;
 8000cea:	4b7f      	ldr	r3, [pc, #508]	; (8000ee8 <Touch_Read+0x298>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
							switch_long_press();	/////////LONG_PRESS_FOR WIFI/////////////
 8000cf0:	f000 fcee 	bl	80016d0 <switch_long_press>

						}
					 }
				 }
		    }
			HAL_Delay(10);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f001 ffd5 	bl	8002ca4 <HAL_Delay>
			break;
 8000cfa:	e012      	b.n	8000d22 <Touch_Read+0xd2>
		case GPIO_PIN_RESET:
			;
			if(Touch_Flag[0] == 1)
 8000cfc:	4b78      	ldr	r3, [pc, #480]	; (8000ee0 <Touch_Read+0x290>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d103      	bne.n	8000d0c <Touch_Read+0xbc>
			{
				Touch_Flag[0] = 2;
 8000d04:	4b76      	ldr	r3, [pc, #472]	; (8000ee0 <Touch_Read+0x290>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	701a      	strb	r2, [r3, #0]
			}
			else if(Touch_Flag[0] == 3)
			{
				Touch_Flag[0] = 0;
			}
		break;
 8000d0a:	e009      	b.n	8000d20 <Touch_Read+0xd0>
			else if(Touch_Flag[0] == 3)
 8000d0c:	4b74      	ldr	r3, [pc, #464]	; (8000ee0 <Touch_Read+0x290>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d105      	bne.n	8000d20 <Touch_Read+0xd0>
				Touch_Flag[0] = 0;
 8000d14:	4b72      	ldr	r3, [pc, #456]	; (8000ee0 <Touch_Read+0x290>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
		break;
 8000d1a:	e001      	b.n	8000d20 <Touch_Read+0xd0>
	default:
		break;
 8000d1c:	bf00      	nop
 8000d1e:	e000      	b.n	8000d22 <Touch_Read+0xd2>
		break;
 8000d20:	bf00      	nop
	}
/*********************************** SWITCH 2 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH1_GPIO_Port,TOUCH1_Pin))
 8000d22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d26:	4871      	ldr	r0, [pc, #452]	; (8000eec <Touch_Read+0x29c>)
 8000d28:	f002 fb22 	bl	8003370 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d042      	beq.n	8000db8 <Touch_Read+0x168>
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d150      	bne.n	8000dd8 <Touch_Read+0x188>
	{
			static uint32_t Start_Time = 0;
			static uint8_t long_press = 0;
		case GPIO_PIN_SET:
			;
			if(Touch_Flag[1]==0)
 8000d36:	4b6a      	ldr	r3, [pc, #424]	; (8000ee0 <Touch_Read+0x290>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <Touch_Read+0x108>
			{
				switch_operation(Switch_2, SW_ON);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	2002      	movs	r0, #2
 8000d42:	f000 f9ed 	bl	8001120 <switch_operation>
				long_press = 0;
 8000d46:	4b6a      	ldr	r3, [pc, #424]	; (8000ef0 <Touch_Read+0x2a0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
				Start_Time = HAL_GetTick();
 8000d4c:	f001 ffa0 	bl	8002c90 <HAL_GetTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a68      	ldr	r2, [pc, #416]	; (8000ef4 <Touch_Read+0x2a4>)
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e00f      	b.n	8000d78 <Touch_Read+0x128>
			}
			else if(Touch_Flag[1]==2)
 8000d58:	4b61      	ldr	r3, [pc, #388]	; (8000ee0 <Touch_Read+0x290>)
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d10b      	bne.n	8000d78 <Touch_Read+0x128>
			{
				switch_operation(Switch_2, SW_OFF);
 8000d60:	2100      	movs	r1, #0
 8000d62:	2002      	movs	r0, #2
 8000d64:	f000 f9dc 	bl	8001120 <switch_operation>
				long_press = 0;
 8000d68:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <Touch_Read+0x2a0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
				 Start_Time = HAL_GetTick();
 8000d6e:	f001 ff8f 	bl	8002c90 <HAL_GetTick>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a5f      	ldr	r2, [pc, #380]	; (8000ef4 <Touch_Read+0x2a4>)
 8000d76:	6013      	str	r3, [r2, #0]
			}
			if(HAL_GPIO_ReadPin(TOUCH1_GPIO_Port,TOUCH1_Pin)==GPIO_PIN_SET)
 8000d78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7c:	485b      	ldr	r0, [pc, #364]	; (8000eec <Touch_Read+0x29c>)
 8000d7e:	f002 faf7 	bl	8003370 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d113      	bne.n	8000db0 <Touch_Read+0x160>
			{
				if(long_press==0)
 8000d88:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <Touch_Read+0x2a0>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10f      	bne.n	8000db0 <Touch_Read+0x160>
				{
					uint32_t  now_time=HAL_GetTick();
 8000d90:	f001 ff7e 	bl	8002c90 <HAL_GetTick>
 8000d94:	6038      	str	r0, [r7, #0]

					if((now_time-Start_Time)>5000)
 8000d96:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <Touch_Read+0x2a4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d904      	bls.n	8000db0 <Touch_Read+0x160>
					{
						long_press=1;
 8000da6:	4b52      	ldr	r3, [pc, #328]	; (8000ef0 <Touch_Read+0x2a0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
						switch_long_press();             /////////LONG_PRESS_FOR WIFI/////////////
 8000dac:	f000 fc90 	bl	80016d0 <switch_long_press>

					}

				}
			}
			HAL_Delay(10);
 8000db0:	200a      	movs	r0, #10
 8000db2:	f001 ff77 	bl	8002ca4 <HAL_Delay>
			break;
 8000db6:	e012      	b.n	8000dde <Touch_Read+0x18e>

		case GPIO_PIN_RESET:
			;
			if(Touch_Flag[1]==1) //off
 8000db8:	4b49      	ldr	r3, [pc, #292]	; (8000ee0 <Touch_Read+0x290>)
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d103      	bne.n	8000dc8 <Touch_Read+0x178>
			{
				Touch_Flag[1]=2;
 8000dc0:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <Touch_Read+0x290>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	705a      	strb	r2, [r3, #1]
			}
			else if(Touch_Flag[1]==3) //on
			{
				Touch_Flag[1]=0;
			}
			break;
 8000dc6:	e009      	b.n	8000ddc <Touch_Read+0x18c>
			else if(Touch_Flag[1]==3) //on
 8000dc8:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <Touch_Read+0x290>)
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d105      	bne.n	8000ddc <Touch_Read+0x18c>
				Touch_Flag[1]=0;
 8000dd0:	4b43      	ldr	r3, [pc, #268]	; (8000ee0 <Touch_Read+0x290>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	705a      	strb	r2, [r3, #1]
			break;
 8000dd6:	e001      	b.n	8000ddc <Touch_Read+0x18c>
		default:
			break;
 8000dd8:	bf00      	nop
 8000dda:	e000      	b.n	8000dde <Touch_Read+0x18e>
			break;
 8000ddc:	bf00      	nop
	}
	/*********************************** SWITCH 3 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH2_GPIO_Port,TOUCH2_Pin))
 8000dde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de2:	4842      	ldr	r0, [pc, #264]	; (8000eec <Touch_Read+0x29c>)
 8000de4:	f002 fac4 	bl	8003370 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d015      	beq.n	8000e1a <Touch_Read+0x1ca>
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d122      	bne.n	8000e38 <Touch_Read+0x1e8>
	{
		case GPIO_PIN_SET:
			;
			 if(Touch_Flag[2]==0)      /************0,1,2,3**************/
 8000df2:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <Touch_Read+0x290>)
 8000df4:	789b      	ldrb	r3, [r3, #2]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d103      	bne.n	8000e02 <Touch_Read+0x1b2>
				 {

				  switch_operation(Switch_3, SW_ON);
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f98f 	bl	8001120 <switch_operation>

				 }
			 if(Touch_Flag[2]==2)
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <Touch_Read+0x290>)
 8000e04:	789b      	ldrb	r3, [r3, #2]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d103      	bne.n	8000e12 <Touch_Read+0x1c2>
				 {
				  switch_operation(Switch_3, SW_OFF);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f987 	bl	8001120 <switch_operation>

				 }
			 HAL_Delay(10);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f001 ff46 	bl	8002ca4 <HAL_Delay>
			 break;
 8000e18:	e011      	b.n	8000e3e <Touch_Read+0x1ee>
		case GPIO_PIN_RESET:
			;
				 if(Touch_Flag[2]==1)
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <Touch_Read+0x290>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d102      	bne.n	8000e28 <Touch_Read+0x1d8>
				 {
					 Touch_Flag[2]=2;
 8000e22:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <Touch_Read+0x290>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	709a      	strb	r2, [r3, #2]

				 }
				 if(Touch_Flag[2]==3)
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <Touch_Read+0x290>)
 8000e2a:	789b      	ldrb	r3, [r3, #2]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d105      	bne.n	8000e3c <Touch_Read+0x1ec>
				 {
			        Touch_Flag[2]=0;
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <Touch_Read+0x290>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	709a      	strb	r2, [r3, #2]
				 }
				 break;
 8000e36:	e001      	b.n	8000e3c <Touch_Read+0x1ec>
	   default:
			break;
 8000e38:	bf00      	nop
 8000e3a:	e000      	b.n	8000e3e <Touch_Read+0x1ee>
				 break;
 8000e3c:	bf00      	nop

	}
	/*********************************** SWITCH 4 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH3_GPIO_Port,TOUCH3_Pin))
 8000e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e42:	482a      	ldr	r0, [pc, #168]	; (8000eec <Touch_Read+0x29c>)
 8000e44:	f002 fa94 	bl	8003370 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d015      	beq.n	8000e7a <Touch_Read+0x22a>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d122      	bne.n	8000e98 <Touch_Read+0x248>
	{
	  case GPIO_PIN_SET:
		  ;
		 if(Touch_Flag[3]==0)
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <Touch_Read+0x290>)
 8000e54:	78db      	ldrb	r3, [r3, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d103      	bne.n	8000e62 <Touch_Read+0x212>
		 	 {
			     switch_operation(Switch_4, SW_ON);
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2004      	movs	r0, #4
 8000e5e:	f000 f95f 	bl	8001120 <switch_operation>
		 	 }
		 if(Touch_Flag[3]==2)
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <Touch_Read+0x290>)
 8000e64:	78db      	ldrb	r3, [r3, #3]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d103      	bne.n	8000e72 <Touch_Read+0x222>
			 {
				 switch_operation(Switch_4, SW_OFF);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f000 f957 	bl	8001120 <switch_operation>
			 }
		 HAL_Delay(10);
 8000e72:	200a      	movs	r0, #10
 8000e74:	f001 ff16 	bl	8002ca4 <HAL_Delay>
		 break;
 8000e78:	e011      	b.n	8000e9e <Touch_Read+0x24e>
	 case GPIO_PIN_RESET:
		 ;
			 if(Touch_Flag[3]==1)
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <Touch_Read+0x290>)
 8000e7c:	78db      	ldrb	r3, [r3, #3]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d102      	bne.n	8000e88 <Touch_Read+0x238>
			 {
				 Touch_Flag[3]=2;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <Touch_Read+0x290>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	70da      	strb	r2, [r3, #3]

			 }
			 if(Touch_Flag[3]==3)
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <Touch_Read+0x290>)
 8000e8a:	78db      	ldrb	r3, [r3, #3]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d105      	bne.n	8000e9c <Touch_Read+0x24c>
			 {
		         Touch_Flag[3]=0;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <Touch_Read+0x290>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	70da      	strb	r2, [r3, #3]
			 }
		break;
 8000e96:	e001      	b.n	8000e9c <Touch_Read+0x24c>
	default:
		break;
 8000e98:	bf00      	nop
 8000e9a:	e000      	b.n	8000e9e <Touch_Read+0x24e>
		break;
 8000e9c:	bf00      	nop

	}
	/*********************************** SWITCH 5 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH4_GPIO_Port,TOUCH4_Pin))
 8000e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <Touch_Read+0x29c>)
 8000ea4:	f002 fa64 	bl	8003370 <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d024      	beq.n	8000ef8 <Touch_Read+0x2a8>
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d131      	bne.n	8000f16 <Touch_Read+0x2c6>
	{
	case GPIO_PIN_SET:
		;
		 if(Touch_Flag[4]==0)
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <Touch_Read+0x290>)
 8000eb4:	791b      	ldrb	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d103      	bne.n	8000ec2 <Touch_Read+0x272>
		 	  {
			      switch_operation(Switch_5, SW_ON);
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f000 f92f 	bl	8001120 <switch_operation>
		 	  }
		 if(Touch_Flag[4]==2)
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <Touch_Read+0x290>)
 8000ec4:	791b      	ldrb	r3, [r3, #4]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d103      	bne.n	8000ed2 <Touch_Read+0x282>
		 	{
		 		 switch_operation(Switch_5, SW_OFF);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2005      	movs	r0, #5
 8000ece:	f000 f927 	bl	8001120 <switch_operation>
		 	}
		 HAL_Delay(10);
 8000ed2:	200a      	movs	r0, #10
 8000ed4:	f001 fee6 	bl	8002ca4 <HAL_Delay>
		 break;
 8000ed8:	e020      	b.n	8000f1c <Touch_Read+0x2cc>
 8000eda:	bf00      	nop
 8000edc:	40011800 	.word	0x40011800
 8000ee0:	200000e4 	.word	0x200000e4
 8000ee4:	20000274 	.word	0x20000274
 8000ee8:	20000278 	.word	0x20000278
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	20000279 	.word	0x20000279
 8000ef4:	2000027c 	.word	0x2000027c
	case GPIO_PIN_RESET:
		;
			 if(Touch_Flag[4]==1)
 8000ef8:	4b81      	ldr	r3, [pc, #516]	; (8001100 <Touch_Read+0x4b0>)
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d102      	bne.n	8000f06 <Touch_Read+0x2b6>
			 {
				 Touch_Flag[4]=2;
 8000f00:	4b7f      	ldr	r3, [pc, #508]	; (8001100 <Touch_Read+0x4b0>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	711a      	strb	r2, [r3, #4]

			 }
			 if(Touch_Flag[4]==3)
 8000f06:	4b7e      	ldr	r3, [pc, #504]	; (8001100 <Touch_Read+0x4b0>)
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d105      	bne.n	8000f1a <Touch_Read+0x2ca>
			 {
		        Touch_Flag[4]=0;
 8000f0e:	4b7c      	ldr	r3, [pc, #496]	; (8001100 <Touch_Read+0x4b0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	711a      	strb	r2, [r3, #4]
			 }
			 break;
 8000f14:	e001      	b.n	8000f1a <Touch_Read+0x2ca>
	default:
		break;
 8000f16:	bf00      	nop
 8000f18:	e000      	b.n	8000f1c <Touch_Read+0x2cc>
			 break;
 8000f1a:	bf00      	nop

	}
	/*********************************** SWITCH 6 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH5_GPIO_Port,TOUCH5_Pin))
 8000f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f20:	4878      	ldr	r0, [pc, #480]	; (8001104 <Touch_Read+0x4b4>)
 8000f22:	f002 fa25 	bl	8003370 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d015      	beq.n	8000f58 <Touch_Read+0x308>
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d122      	bne.n	8000f76 <Touch_Read+0x326>
		{
		case GPIO_PIN_SET:
			;
			 if(Touch_Flag[5]==0)
 8000f30:	4b73      	ldr	r3, [pc, #460]	; (8001100 <Touch_Read+0x4b0>)
 8000f32:	795b      	ldrb	r3, [r3, #5]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <Touch_Read+0x2f0>
			 	  {
				     switch_operation(Switch_6, SW_ON);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2006      	movs	r0, #6
 8000f3c:	f000 f8f0 	bl	8001120 <switch_operation>
			 	  }
			 if(Touch_Flag[5]==2)
 8000f40:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <Touch_Read+0x4b0>)
 8000f42:	795b      	ldrb	r3, [r3, #5]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d103      	bne.n	8000f50 <Touch_Read+0x300>
			 	{
			 		switch_operation(Switch_6, SW_OFF);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2006      	movs	r0, #6
 8000f4c:	f000 f8e8 	bl	8001120 <switch_operation>
			 	}
			 HAL_Delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f001 fea7 	bl	8002ca4 <HAL_Delay>
			 break;
 8000f56:	e011      	b.n	8000f7c <Touch_Read+0x32c>
		case GPIO_PIN_RESET:
			;
				 if(Touch_Flag[5]==1)
 8000f58:	4b69      	ldr	r3, [pc, #420]	; (8001100 <Touch_Read+0x4b0>)
 8000f5a:	795b      	ldrb	r3, [r3, #5]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d102      	bne.n	8000f66 <Touch_Read+0x316>
				 {
					 Touch_Flag[5]=2;
 8000f60:	4b67      	ldr	r3, [pc, #412]	; (8001100 <Touch_Read+0x4b0>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	715a      	strb	r2, [r3, #5]

				 }
				 if(Touch_Flag[5]==3)
 8000f66:	4b66      	ldr	r3, [pc, #408]	; (8001100 <Touch_Read+0x4b0>)
 8000f68:	795b      	ldrb	r3, [r3, #5]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d105      	bne.n	8000f7a <Touch_Read+0x32a>
				 {
			         Touch_Flag[5]=0;
 8000f6e:	4b64      	ldr	r3, [pc, #400]	; (8001100 <Touch_Read+0x4b0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	715a      	strb	r2, [r3, #5]

				 }
				 break;
 8000f74:	e001      	b.n	8000f7a <Touch_Read+0x32a>
		default:
			break;
 8000f76:	bf00      	nop
 8000f78:	e000      	b.n	8000f7c <Touch_Read+0x32c>
				 break;
 8000f7a:	bf00      	nop

		}
	/***********************************  DIMMER SWITCH  ****************************/
		switch(HAL_GPIO_ReadPin(TOUCH6_GPIO_Port,TOUCH6_Pin))
 8000f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f80:	4860      	ldr	r0, [pc, #384]	; (8001104 <Touch_Read+0x4b4>)
 8000f82:	f002 f9f5 	bl	8003370 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d015      	beq.n	8000fb8 <Touch_Read+0x368>
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d122      	bne.n	8000fd6 <Touch_Read+0x386>
		{
		 case GPIO_PIN_SET:

			 if(Touch_Flag[6]==0)      //OFF
 8000f90:	4b5b      	ldr	r3, [pc, #364]	; (8001100 <Touch_Read+0x4b0>)
 8000f92:	799b      	ldrb	r3, [r3, #6]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d103      	bne.n	8000fa0 <Touch_Read+0x350>
			 {
				 switch_operation(Switch_7, SW_ON);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2007      	movs	r0, #7
 8000f9c:	f000 f8c0 	bl	8001120 <switch_operation>
			 }
			 if(Touch_Flag[6]==2)     //ON
 8000fa0:	4b57      	ldr	r3, [pc, #348]	; (8001100 <Touch_Read+0x4b0>)
 8000fa2:	799b      	ldrb	r3, [r3, #6]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d103      	bne.n	8000fb0 <Touch_Read+0x360>
			 {
				 switch_operation(Switch_7, SW_OFF);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 f8b8 	bl	8001120 <switch_operation>
			 }
			 HAL_Delay(5);
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f001 fe77 	bl	8002ca4 <HAL_Delay>
			 break;
 8000fb6:	e011      	b.n	8000fdc <Touch_Read+0x38c>
		 case GPIO_PIN_RESET:

			 if(Touch_Flag[6]==1)
 8000fb8:	4b51      	ldr	r3, [pc, #324]	; (8001100 <Touch_Read+0x4b0>)
 8000fba:	799b      	ldrb	r3, [r3, #6]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <Touch_Read+0x376>
			 {
				 Touch_Flag[6]=2;
 8000fc0:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <Touch_Read+0x4b0>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	719a      	strb	r2, [r3, #6]
			 }
			 if(Touch_Flag[6]==3)
 8000fc6:	4b4e      	ldr	r3, [pc, #312]	; (8001100 <Touch_Read+0x4b0>)
 8000fc8:	799b      	ldrb	r3, [r3, #6]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d105      	bne.n	8000fda <Touch_Read+0x38a>
			 {
				Touch_Flag[6]=0;
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <Touch_Read+0x4b0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	719a      	strb	r2, [r3, #6]
			 }
			 break;
 8000fd4:	e001      	b.n	8000fda <Touch_Read+0x38a>
		default:
			break;
 8000fd6:	bf00      	nop
 8000fd8:	e000      	b.n	8000fdc <Touch_Read+0x38c>
			 break;
 8000fda:	bf00      	nop

		}
		//DIMMER SWITCH OPERATIONS

		if(dimmer_flag==1)
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <Touch_Read+0x4b8>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 8081 	bne.w	80010e8 <Touch_Read+0x498>
			{
				switch(HAL_GPIO_ReadPin(DIMMER_UP_GPIO_Port, DIMMER_UP_Pin))    /***************DIMMMER SWITCH_1 UP*******************/
 8000fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fea:	4846      	ldr	r0, [pc, #280]	; (8001104 <Touch_Read+0x4b4>)
 8000fec:	f002 f9c0 	bl	8003370 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d028      	beq.n	8001048 <Touch_Read+0x3f8>
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d133      	bne.n	8001062 <Touch_Read+0x412>
				{
					case GPIO_PIN_SET:
					 if(Touch_Flag[7]==0)
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <Touch_Read+0x4b0>)
 8000ffc:	79db      	ldrb	r3, [r3, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d131      	bne.n	8001066 <Touch_Read+0x416>
					 {
						 Touch_Flag[7] = 1;
 8001002:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <Touch_Read+0x4b0>)
 8001004:	2201      	movs	r2, #1
 8001006:	71da      	strb	r2, [r3, #7]
						 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MAX_PWM);
 8001008:	4b40      	ldr	r3, [pc, #256]	; (800110c <Touch_Read+0x4bc>)
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	4b40      	ldr	r3, [pc, #256]	; (8001110 <Touch_Read+0x4c0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	635a      	str	r2, [r3, #52]	; 0x34

						 if(dimmer_level < 100)
 8001012:	4b40      	ldr	r3, [pc, #256]	; (8001114 <Touch_Read+0x4c4>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b63      	cmp	r3, #99	; 0x63
 8001018:	d825      	bhi.n	8001066 <Touch_Read+0x416>
							 {
							     dimmer_level = dimmer_level + 5;
 800101a:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <Touch_Read+0x4c4>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3305      	adds	r3, #5
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <Touch_Read+0x4c4>)
 8001024:	701a      	strb	r2, [r3, #0]
							     if(dimmer_level > 100)
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <Touch_Read+0x4c4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d902      	bls.n	8001034 <Touch_Read+0x3e4>
							     {
							    	 dimmer_level = 100;
 800102e:	4b39      	ldr	r3, [pc, #228]	; (8001114 <Touch_Read+0x4c4>)
 8001030:	2264      	movs	r2, #100	; 0x64
 8001032:	701a      	strb	r2, [r3, #0]
							     }
							     dimmer_operation(SW_ON,dimmer_level);
 8001034:	4b37      	ldr	r3, [pc, #220]	; (8001114 <Touch_Read+0x4c4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	2001      	movs	r0, #1
 800103c:	f000 fa20 	bl	8001480 <dimmer_operation>
							     HAL_Delay(10);
 8001040:	200a      	movs	r0, #10
 8001042:	f001 fe2f 	bl	8002ca4 <HAL_Delay>
							 }

					 }
					break;
 8001046:	e00e      	b.n	8001066 <Touch_Read+0x416>
					case GPIO_PIN_RESET:
						if(Touch_Flag[7]==1)
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <Touch_Read+0x4b0>)
 800104a:	79db      	ldrb	r3, [r3, #7]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d10c      	bne.n	800106a <Touch_Read+0x41a>
						{
							Touch_Flag[7]=0;
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <Touch_Read+0x4b0>)
 8001052:	2200      	movs	r2, #0
 8001054:	71da      	strb	r2, [r3, #7]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <Touch_Read+0x4c8>)
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <Touch_Read+0x4c0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
						}
						break;
 8001060:	e003      	b.n	800106a <Touch_Read+0x41a>
					default:
						break;
 8001062:	bf00      	nop
 8001064:	e002      	b.n	800106c <Touch_Read+0x41c>
					break;
 8001066:	bf00      	nop
 8001068:	e000      	b.n	800106c <Touch_Read+0x41c>
						break;
 800106a:	bf00      	nop
				}

				switch(HAL_GPIO_ReadPin(DIMMER_DOWN_GPIO_Port, DIMMER_DOWN_Pin))                    /***************DIMMMER SWITCH_2 DOWN*******************/
 800106c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001070:	4824      	ldr	r0, [pc, #144]	; (8001104 <Touch_Read+0x4b4>)
 8001072:	f002 f97d 	bl	8003370 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d028      	beq.n	80010ce <Touch_Read+0x47e>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d135      	bne.n	80010ec <Touch_Read+0x49c>
				{
					case GPIO_PIN_SET:
					 if(Touch_Flag[8]==0)
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <Touch_Read+0x4b0>)
 8001082:	7a1b      	ldrb	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d133      	bne.n	80010f0 <Touch_Read+0x4a0>
					 {
						 Touch_Flag[8]=1;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <Touch_Read+0x4b0>)
 800108a:	2201      	movs	r2, #1
 800108c:	721a      	strb	r2, [r3, #8]
						 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM);
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <Touch_Read+0x4bc>)
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <Touch_Read+0x4cc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
						 if(dimmer_level > 1)
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <Touch_Read+0x4c4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d927      	bls.n	80010f0 <Touch_Read+0x4a0>
						 						 {
						 						     dimmer_level = dimmer_level - 5;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <Touch_Read+0x4c4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3b05      	subs	r3, #5
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <Touch_Read+0x4c4>)
 80010aa:	701a      	strb	r2, [r3, #0]
						 						     if(dimmer_level < 1)
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <Touch_Read+0x4c4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <Touch_Read+0x46a>
						 						     {
						 						    	 dimmer_level = 1;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <Touch_Read+0x4c4>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]

						 						     }
						 						     dimmer_operation(SW_ON,dimmer_level);
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <Touch_Read+0x4c4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f9dd 	bl	8001480 <dimmer_operation>
						 						     HAL_Delay(10);
 80010c6:	200a      	movs	r0, #10
 80010c8:	f001 fdec 	bl	8002ca4 <HAL_Delay>
						 						 }
					 }

					break;
 80010cc:	e010      	b.n	80010f0 <Touch_Read+0x4a0>
					case GPIO_PIN_RESET:
						if(Touch_Flag[8]==1)
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <Touch_Read+0x4b0>)
 80010d0:	7a1b      	ldrb	r3, [r3, #8]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10e      	bne.n	80010f4 <Touch_Read+0x4a4>
						{
							Touch_Flag[8]=0;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <Touch_Read+0x4b0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	721a      	strb	r2, [r3, #8]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <Touch_Read+0x4c8>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <Touch_Read+0x4cc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
						}
						break;
 80010e6:	e005      	b.n	80010f4 <Touch_Read+0x4a4>
					default:
						break;

				}
			}
 80010e8:	bf00      	nop
 80010ea:	e004      	b.n	80010f6 <Touch_Read+0x4a6>
						break;
 80010ec:	bf00      	nop
 80010ee:	e002      	b.n	80010f6 <Touch_Read+0x4a6>
					break;
 80010f0:	bf00      	nop
 80010f2:	e000      	b.n	80010f6 <Touch_Read+0x4a6>
						break;
 80010f4:	bf00      	nop


}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000e4 	.word	0x200000e4
 8001104:	40011400 	.word	0x40011400
 8001108:	200000e1 	.word	0x200000e1
 800110c:	20000002 	.word	0x20000002
 8001110:	2000028c 	.word	0x2000028c
 8001114:	200000e0 	.word	0x200000e0
 8001118:	20000001 	.word	0x20000001
 800111c:	20000364 	.word	0x20000364

08001120 <switch_operation>:



void switch_operation(uint8_t SW_NO,uint8_t SW_STS)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af04      	add	r7, sp, #16
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, SW_NO,I2C_MEMADD_SIZE_16BIT, &SW_STS, 1, 100)==HAL_OK)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	b29a      	uxth	r2, r3
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2310      	movs	r3, #16
 8001142:	21a0      	movs	r1, #160	; 0xa0
 8001144:	48ae      	ldr	r0, [pc, #696]	; (8001400 <switch_operation+0x2e0>)
 8001146:	f002 fa9f 	bl	8003688 <HAL_I2C_Mem_Write>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <switch_operation+0x36>
	{
		HAL_Delay(20);
 8001150:	2014      	movs	r0, #20
 8001152:	f001 fda7 	bl	8002ca4 <HAL_Delay>
	}
	/*********************************** SWITCH 1 ****************************/
 switch(SW_NO)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3b01      	subs	r3, #1
 800115a:	2b06      	cmp	r3, #6
 800115c:	f200 8178 	bhi.w	8001450 <switch_operation+0x330>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <switch_operation+0x48>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001185 	.word	0x08001185
 800116c:	080011e7 	.word	0x080011e7
 8001170:	08001249 	.word	0x08001249
 8001174:	080012ab 	.word	0x080012ab
 8001178:	08001317 	.word	0x08001317
 800117c:	08001379 	.word	0x08001379
 8001180:	080013d9 	.word	0x080013d9
		{
	 case Switch_1:
						if(SW_STS==0x01)
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d114      	bne.n	80011b4 <switch_operation+0x94>
						{
							Touch_Flag[0]=1;
 800118a:	4b9e      	ldr	r3, [pc, #632]	; (8001404 <switch_operation+0x2e4>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MAX_PWM);      //LED0
 8001190:	4b9d      	ldr	r3, [pc, #628]	; (8001408 <switch_operation+0x2e8>)
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	4b9d      	ldr	r3, [pc, #628]	; (800140c <switch_operation+0x2ec>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_SET); //RELAY0 SET PB1
 800119a:	2201      	movs	r2, #1
 800119c:	2102      	movs	r1, #2
 800119e:	489c      	ldr	r0, [pc, #624]	; (8001410 <switch_operation+0x2f0>)
 80011a0:	f002 f8fd 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_1,SW_ON);
 80011a4:	2101      	movs	r1, #1
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 faa0 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80011ac:	2032      	movs	r0, #50	; 0x32
 80011ae:	f001 fd79 	bl	8002ca4 <HAL_Delay>
							HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_RESET);//RELAY OFF
							Tx_Switch_Satus(1,SW_OFF);
							HAL_Delay(Delay);
						}

	 break;
 80011b2:	e14f      	b.n	8001454 <switch_operation+0x334>
						else if(SW_STS==0x00)
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 814c 	bne.w	8001454 <switch_operation+0x334>
							 Touch_Flag[0]=3;
 80011bc:	4b91      	ldr	r3, [pc, #580]	; (8001404 <switch_operation+0x2e4>)
 80011be:	2203      	movs	r2, #3
 80011c0:	701a      	strb	r2, [r3, #0]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);         //LED0RESET
 80011c2:	4b94      	ldr	r3, [pc, #592]	; (8001414 <switch_operation+0x2f4>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b91      	ldr	r3, [pc, #580]	; (800140c <switch_operation+0x2ec>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_RESET);//RELAY OFF
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	488f      	ldr	r0, [pc, #572]	; (8001410 <switch_operation+0x2f0>)
 80011d2:	f002 f8e4 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(1,SW_OFF);
 80011d6:	2100      	movs	r1, #0
 80011d8:	2001      	movs	r0, #1
 80011da:	f000 fa87 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80011de:	2032      	movs	r0, #50	; 0x32
 80011e0:	f001 fd60 	bl	8002ca4 <HAL_Delay>
	 break;
 80011e4:	e136      	b.n	8001454 <switch_operation+0x334>
	/*********************************** SWITCH 2 ****************************/
	case Switch_2:
						if(SW_STS==0x01)
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d114      	bne.n	8001216 <switch_operation+0xf6>
			        	{
							Touch_Flag[1]=1;
 80011ec:	4b85      	ldr	r3, [pc, #532]	; (8001404 <switch_operation+0x2e4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	705a      	strb	r2, [r3, #1]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MAX_PWM);       //LED1
 80011f2:	4b85      	ldr	r3, [pc, #532]	; (8001408 <switch_operation+0x2e8>)
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	4b85      	ldr	r3, [pc, #532]	; (800140c <switch_operation+0x2ec>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
							HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_SET); //RELAY2
 80011fc:	2201      	movs	r2, #1
 80011fe:	2101      	movs	r1, #1
 8001200:	4883      	ldr	r0, [pc, #524]	; (8001410 <switch_operation+0x2f0>)
 8001202:	f002 f8cc 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_2,SW_ON);
 8001206:	2101      	movs	r1, #1
 8001208:	2002      	movs	r0, #2
 800120a:	f000 fa6f 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800120e:	2032      	movs	r0, #50	; 0x32
 8001210:	f001 fd48 	bl	8002ca4 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);         //LED_RESET
							HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_2,SW_OFF);
							HAL_Delay(Delay);
						}
						break;
 8001214:	e120      	b.n	8001458 <switch_operation+0x338>
						else if(SW_STS==0x00)
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 811d 	bne.w	8001458 <switch_operation+0x338>
							 Touch_Flag[1]=3;
 800121e:	4b79      	ldr	r3, [pc, #484]	; (8001404 <switch_operation+0x2e4>)
 8001220:	2203      	movs	r2, #3
 8001222:	705a      	strb	r2, [r3, #1]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);         //LED_RESET
 8001224:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <switch_operation+0x2f4>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b78      	ldr	r3, [pc, #480]	; (800140c <switch_operation+0x2ec>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
							HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_RESET);//RELAY_OFF
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	4877      	ldr	r0, [pc, #476]	; (8001410 <switch_operation+0x2f0>)
 8001234:	f002 f8b3 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_2,SW_OFF);
 8001238:	2100      	movs	r1, #0
 800123a:	2002      	movs	r0, #2
 800123c:	f000 fa56 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8001240:	2032      	movs	r0, #50	; 0x32
 8001242:	f001 fd2f 	bl	8002ca4 <HAL_Delay>
						break;
 8001246:	e107      	b.n	8001458 <switch_operation+0x338>
		/*********************************** SWITCH 3 ****************************/
	case Switch_3:
		                if(SW_STS==0x01)
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d114      	bne.n	8001278 <switch_operation+0x158>
						{
							Touch_Flag[2]=1;
 800124e:	4b6d      	ldr	r3, [pc, #436]	; (8001404 <switch_operation+0x2e4>)
 8001250:	2201      	movs	r2, #1
 8001252:	709a      	strb	r2, [r3, #2]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MAX_PWM); //LED2
 8001254:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <switch_operation+0x2e8>)
 8001256:	781a      	ldrb	r2, [r3, #0]
 8001258:	4b6c      	ldr	r3, [pc, #432]	; (800140c <switch_operation+0x2ec>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_SET);  //RELAY3
 800125e:	2201      	movs	r2, #1
 8001260:	2110      	movs	r1, #16
 8001262:	486d      	ldr	r0, [pc, #436]	; (8001418 <switch_operation+0x2f8>)
 8001264:	f002 f89b 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_3,SW_ON);
 8001268:	2101      	movs	r1, #1
 800126a:	2003      	movs	r0, #3
 800126c:	f000 fa3e 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8001270:	2032      	movs	r0, #50	; 0x32
 8001272:	f001 fd17 	bl	8002ca4 <HAL_Delay>
						    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);       //LED_RESET
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_3,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8001276:	e0f1      	b.n	800145c <switch_operation+0x33c>
						else if(SW_STS==0x00)
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 80ee 	bne.w	800145c <switch_operation+0x33c>
							 Touch_Flag[2]=3;
 8001280:	4b60      	ldr	r3, [pc, #384]	; (8001404 <switch_operation+0x2e4>)
 8001282:	2203      	movs	r2, #3
 8001284:	709a      	strb	r2, [r3, #2]
						    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);       //LED_RESET
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <switch_operation+0x2f4>)
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	4b60      	ldr	r3, [pc, #384]	; (800140c <switch_operation+0x2ec>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_RESET);//RELAY_OFF
 8001290:	2200      	movs	r2, #0
 8001292:	2110      	movs	r1, #16
 8001294:	4860      	ldr	r0, [pc, #384]	; (8001418 <switch_operation+0x2f8>)
 8001296:	f002 f882 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_3,SW_OFF);
 800129a:	2100      	movs	r1, #0
 800129c:	2003      	movs	r0, #3
 800129e:	f000 fa25 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80012a2:	2032      	movs	r0, #50	; 0x32
 80012a4:	f001 fcfe 	bl	8002ca4 <HAL_Delay>
				break;
 80012a8:	e0d8      	b.n	800145c <switch_operation+0x33c>
		/*********************************** SWITCH 4 ****************************/
	case Switch_4:
		                if(SW_STS==0x01)
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d119      	bne.n	80012e4 <switch_operation+0x1c4>
						{
							Touch_Flag[3]=1;
 80012b0:	4b54      	ldr	r3, [pc, #336]	; (8001404 <switch_operation+0x2e4>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	70da      	strb	r2, [r3, #3]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MAX_PWM);  //LED3
 80012b6:	4b54      	ldr	r3, [pc, #336]	; (8001408 <switch_operation+0x2e8>)
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	4b58      	ldr	r3, [pc, #352]	; (800141c <switch_operation+0x2fc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY3_GPIO_Port,RELAY3_Pin,GPIO_PIN_SET); //RELAY4
 80012c0:	2201      	movs	r2, #1
 80012c2:	2120      	movs	r1, #32
 80012c4:	4854      	ldr	r0, [pc, #336]	; (8001418 <switch_operation+0x2f8>)
 80012c6:	f002 f86a 	bl	800339e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(RELAY4_GPIO_Port,RELAY4_Pin,GPIO_PIN_SET); //RELAY 5
 80012ca:	2201      	movs	r2, #1
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4852      	ldr	r0, [pc, #328]	; (8001418 <switch_operation+0x2f8>)
 80012d0:	f002 f865 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_4,SW_ON);
 80012d4:	2101      	movs	r1, #1
 80012d6:	2004      	movs	r0, #4
 80012d8:	f000 fa08 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80012dc:	2032      	movs	r0, #50	; 0x32
 80012de:	f001 fce1 	bl	8002ca4 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);   //LED_RESET
							HAL_GPIO_WritePin(RELAY4_GPIO_Port,RELAY4_Pin,GPIO_PIN_RESET); //RELAY OFF
							Tx_Switch_Satus(Switch_4,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 80012e2:	e0bd      	b.n	8001460 <switch_operation+0x340>
						else if(SW_STS==0x00)
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80ba 	bne.w	8001460 <switch_operation+0x340>
							 Touch_Flag[3]=3;
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <switch_operation+0x2e4>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	70da      	strb	r2, [r3, #3]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);   //LED_RESET
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <switch_operation+0x2f4>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <switch_operation+0x2fc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY4_GPIO_Port,RELAY4_Pin,GPIO_PIN_RESET); //RELAY OFF
 80012fc:	2200      	movs	r2, #0
 80012fe:	2140      	movs	r1, #64	; 0x40
 8001300:	4845      	ldr	r0, [pc, #276]	; (8001418 <switch_operation+0x2f8>)
 8001302:	f002 f84c 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_4,SW_OFF);
 8001306:	2100      	movs	r1, #0
 8001308:	2004      	movs	r0, #4
 800130a:	f000 f9ef 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800130e:	2032      	movs	r0, #50	; 0x32
 8001310:	f001 fcc8 	bl	8002ca4 <HAL_Delay>
				break;
 8001314:	e0a4      	b.n	8001460 <switch_operation+0x340>
	/*********************************** SWITCH 5 ****************************/
	case Switch_5:
		               if(SW_STS==0x01)
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d114      	bne.n	8001346 <switch_operation+0x226>
						{
							Touch_Flag[4]=1;
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <switch_operation+0x2e4>)
 800131e:	2201      	movs	r2, #1
 8001320:	711a      	strb	r2, [r3, #4]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MAX_PWM);      //LED4
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <switch_operation+0x2e8>)
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <switch_operation+0x2ec>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	639a      	str	r2, [r3, #56]	; 0x38
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_SET); //RELAY5
 800132c:	2201      	movs	r2, #1
 800132e:	2120      	movs	r1, #32
 8001330:	483b      	ldr	r0, [pc, #236]	; (8001420 <switch_operation+0x300>)
 8001332:	f002 f834 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_5,SW_ON);
 8001336:	2101      	movs	r1, #1
 8001338:	2005      	movs	r0, #5
 800133a:	f000 f9d7 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 800133e:	2032      	movs	r0, #50	; 0x32
 8001340:	f001 fcb0 	bl	8002ca4 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);  //LED_RESET
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_5,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8001344:	e08e      	b.n	8001464 <switch_operation+0x344>
						else if(SW_STS==0x00)
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 808b 	bne.w	8001464 <switch_operation+0x344>
							 Touch_Flag[4]=3;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <switch_operation+0x2e4>)
 8001350:	2203      	movs	r2, #3
 8001352:	711a      	strb	r2, [r3, #4]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);  //LED_RESET
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <switch_operation+0x2f4>)
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <switch_operation+0x2ec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_RESET);//RELAY_OFF
 800135e:	2200      	movs	r2, #0
 8001360:	2120      	movs	r1, #32
 8001362:	482f      	ldr	r0, [pc, #188]	; (8001420 <switch_operation+0x300>)
 8001364:	f002 f81b 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_5,SW_OFF);
 8001368:	2100      	movs	r1, #0
 800136a:	2005      	movs	r0, #5
 800136c:	f000 f9be 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8001370:	2032      	movs	r0, #50	; 0x32
 8001372:	f001 fc97 	bl	8002ca4 <HAL_Delay>
				break;
 8001376:	e075      	b.n	8001464 <switch_operation+0x344>
				/*********************************** SWITCH 6 ****************************/
	case Switch_6:
					   if(SW_STS==0x01)
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d114      	bne.n	80013a8 <switch_operation+0x288>
						{
							Touch_Flag[5]=1;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <switch_operation+0x2e4>)
 8001380:	2201      	movs	r2, #1
 8001382:	715a      	strb	r2, [r3, #5]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM); //LED5
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <switch_operation+0x2e8>)
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <switch_operation+0x2fc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_SET); //RELAY6
 800138e:	2201      	movs	r2, #1
 8001390:	2110      	movs	r1, #16
 8001392:	4823      	ldr	r0, [pc, #140]	; (8001420 <switch_operation+0x300>)
 8001394:	f002 f803 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_6,SW_ON);
 8001398:	2101      	movs	r1, #1
 800139a:	2006      	movs	r0, #6
 800139c:	f000 f9a6 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80013a0:	2032      	movs	r0, #50	; 0x32
 80013a2:	f001 fc7f 	bl	8002ca4 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);          //LED_RESET
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_RESET); //RELAY6
							Tx_Switch_Satus(Switch_6,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 80013a6:	e05f      	b.n	8001468 <switch_operation+0x348>
						else if(SW_STS==0x00)
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d15c      	bne.n	8001468 <switch_operation+0x348>
							 Touch_Flag[5]=3;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <switch_operation+0x2e4>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	715a      	strb	r2, [r3, #5]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);          //LED_RESET
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <switch_operation+0x2f4>)
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <switch_operation+0x2fc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_RESET); //RELAY6
 80013be:	2200      	movs	r2, #0
 80013c0:	2110      	movs	r1, #16
 80013c2:	4817      	ldr	r0, [pc, #92]	; (8001420 <switch_operation+0x300>)
 80013c4:	f001 ffeb 	bl	800339e <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_6,SW_OFF);
 80013c8:	2100      	movs	r1, #0
 80013ca:	2006      	movs	r0, #6
 80013cc:	f000 f98e 	bl	80016ec <Tx_Switch_Satus>
							HAL_Delay(Delay);
 80013d0:	2032      	movs	r0, #50	; 0x32
 80013d2:	f001 fc67 	bl	8002ca4 <HAL_Delay>
				break;
 80013d6:	e047      	b.n	8001468 <switch_operation+0x348>
	case Switch_7:
				               if(SW_STS==0x01)
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d124      	bne.n	8001428 <switch_operation+0x308>
								{

									Touch_Flag[6]=1;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <switch_operation+0x2e4>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	719a      	strb	r2, [r3, #6]
									dimmer_operation(SW_ON, dimmer_level);
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <switch_operation+0x304>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2001      	movs	r0, #1
 80013ec:	f000 f848 	bl	8001480 <dimmer_operation>
									Tx_Switch_Satus(Switch_7,SW_ON);
 80013f0:	2101      	movs	r1, #1
 80013f2:	2007      	movs	r0, #7
 80013f4:	f000 f97a 	bl	80016ec <Tx_Switch_Satus>
									HAL_Delay(Delay);
 80013f8:	2032      	movs	r0, #50	; 0x32
 80013fa:	f001 fc53 	bl	8002ca4 <HAL_Delay>
									 Touch_Flag[6]=3;
									dimmer_operation(SW_OFF, dimmer_level);
									Tx_Switch_Satus(Switch_7,SW_OFF);
									HAL_Delay(Delay);
								}
						break;
 80013fe:	e035      	b.n	800146c <switch_operation+0x34c>
 8001400:	2000008c 	.word	0x2000008c
 8001404:	200000e4 	.word	0x200000e4
 8001408:	20000002 	.word	0x20000002
 800140c:	2000031c 	.word	0x2000031c
 8001410:	40010c00 	.word	0x40010c00
 8001414:	20000001 	.word	0x20000001
 8001418:	40011800 	.word	0x40011800
 800141c:	20000364 	.word	0x20000364
 8001420:	40011000 	.word	0x40011000
 8001424:	200000e0 	.word	0x200000e0
								else if(SW_STS==0x00)
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11e      	bne.n	800146c <switch_operation+0x34c>
									 Touch_Flag[6]=3;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <switch_operation+0x358>)
 8001430:	2203      	movs	r2, #3
 8001432:	719a      	strb	r2, [r3, #6]
									dimmer_operation(SW_OFF, dimmer_level);
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <switch_operation+0x35c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f820 	bl	8001480 <dimmer_operation>
									Tx_Switch_Satus(Switch_7,SW_OFF);
 8001440:	2100      	movs	r1, #0
 8001442:	2007      	movs	r0, #7
 8001444:	f000 f952 	bl	80016ec <Tx_Switch_Satus>
									HAL_Delay(Delay);
 8001448:	2032      	movs	r0, #50	; 0x32
 800144a:	f001 fc2b 	bl	8002ca4 <HAL_Delay>
						break;
 800144e:	e00d      	b.n	800146c <switch_operation+0x34c>

	default:
		break;
 8001450:	bf00      	nop
 8001452:	e00c      	b.n	800146e <switch_operation+0x34e>
	 break;
 8001454:	bf00      	nop
 8001456:	e00a      	b.n	800146e <switch_operation+0x34e>
						break;
 8001458:	bf00      	nop
 800145a:	e008      	b.n	800146e <switch_operation+0x34e>
				break;
 800145c:	bf00      	nop
 800145e:	e006      	b.n	800146e <switch_operation+0x34e>
				break;
 8001460:	bf00      	nop
 8001462:	e004      	b.n	800146e <switch_operation+0x34e>
				break;
 8001464:	bf00      	nop
 8001466:	e002      	b.n	800146e <switch_operation+0x34e>
				break;
 8001468:	bf00      	nop
 800146a:	e000      	b.n	800146e <switch_operation+0x34e>
						break;
 800146c:	bf00      	nop

		}
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000e4 	.word	0x200000e4
 800147c:	200000e0 	.word	0x200000e0

08001480 <dimmer_operation>:

void dimmer_operation(uint8_t Status,uint8_t level)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af04      	add	r7, sp, #16
 8001486:	4603      	mov	r3, r0
 8001488:	460a      	mov	r2, r1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	4613      	mov	r3, r2
 800148e:	71bb      	strb	r3, [r7, #6]
	       static uint8_t temp_flag = 0;
	       dimmer_level = level;
 8001490:	4a55      	ldr	r2, [pc, #340]	; (80015e8 <dimmer_operation+0x168>)
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	7013      	strb	r3, [r2, #0]
	       timer2_period = (uint8_t)(65 - ((level - 1) * 0.6));
 8001496:	79bb      	ldrb	r3, [r7, #6]
 8001498:	3b01      	subs	r3, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f8d4 	bl	8000648 <__aeabi_i2d>
 80014a0:	a34f      	add	r3, pc, #316	; (adr r3, 80015e0 <dimmer_operation+0x160>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7fe fe53 	bl	8000150 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	f04f 0000 	mov.w	r0, #0
 80014b2:	494e      	ldr	r1, [pc, #312]	; (80015ec <dimmer_operation+0x16c>)
 80014b4:	f7fe ff7a 	bl	80003ac <__aeabi_dsub>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff f92c 	bl	800071c <__aeabi_d2uiz>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <dimmer_operation+0x170>)
 80014ca:	701a      	strb	r2, [r3, #0]
	       uint8_t temp_value[2] = {Status,level};
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	733b      	strb	r3, [r7, #12]
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	737b      	strb	r3, [r7, #13]
	       if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD,23,I2C_MEMADD_SIZE_16BIT ,temp_value,2, 10)==HAL_OK)
 80014d4:	230a      	movs	r3, #10
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2302      	movs	r3, #2
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2310      	movs	r3, #16
 80014e4:	2217      	movs	r2, #23
 80014e6:	21a0      	movs	r1, #160	; 0xa0
 80014e8:	4842      	ldr	r0, [pc, #264]	; (80015f4 <dimmer_operation+0x174>)
 80014ea:	f002 f8cd 	bl	8003688 <HAL_I2C_Mem_Write>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <dimmer_operation+0x7a>
			{
				HAL_Delay(20);
 80014f4:	2014      	movs	r0, #20
 80014f6:	f001 fbd5 	bl	8002ca4 <HAL_Delay>
			}

		  if(Status==0x01)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d13e      	bne.n	800157e <dimmer_operation+0xfe>
		  {
			  if(temp_flag == 0)
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <dimmer_operation+0x178>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <dimmer_operation+0xac>
			  {
				  temp_flag = 1;
 8001508:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <dimmer_operation+0x178>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MAX_PWM);
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <dimmer_operation+0x17c>)
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <dimmer_operation+0x180>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <dimmer_operation+0x184>)
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <dimmer_operation+0x188>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 8001522:	4b38      	ldr	r3, [pc, #224]	; (8001604 <dimmer_operation+0x184>)
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <dimmer_operation+0x180>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
			  }
			  if(level==100)
 800152c:	79bb      	ldrb	r3, [r7, #6]
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d112      	bne.n	8001558 <dimmer_operation+0xd8>
			  {
				dimmer_flag = 1;
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <dimmer_operation+0x18c>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
				dimmer_enable_flag = 0;
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <dimmer_operation+0x190>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
				dimmer_value_change_flag = 0;
 800153e:	4b35      	ldr	r3, [pc, #212]	; (8001614 <dimmer_operation+0x194>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
				HAL_Delay(12);
 8001544:	200c      	movs	r0, #12
 8001546:	f001 fbad 	bl	8002ca4 <HAL_Delay>
				 HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001550:	4831      	ldr	r0, [pc, #196]	; (8001618 <dimmer_operation+0x198>)
 8001552:	f001 ff24 	bl	800339e <HAL_GPIO_WritePin>
 8001556:	e03a      	b.n	80015ce <dimmer_operation+0x14e>

			  }
			  else if(level<100)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	2b63      	cmp	r3, #99	; 0x63
 800155c:	d837      	bhi.n	80015ce <dimmer_operation+0x14e>
			  {
				HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001564:	482c      	ldr	r0, [pc, #176]	; (8001618 <dimmer_operation+0x198>)
 8001566:	f001 ff1a 	bl	800339e <HAL_GPIO_WritePin>
				dimmer_flag = 1;
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <dimmer_operation+0x18c>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
				dimmer_enable_flag = 1;
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <dimmer_operation+0x190>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
				dimmer_value_change_flag = 1;
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <dimmer_operation+0x194>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e027      	b.n	80015ce <dimmer_operation+0x14e>
			  }

		  }
		  else if(Status==0x00)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d124      	bne.n	80015ce <dimmer_operation+0x14e>
		  {
			  if(temp_flag == 1)
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <dimmer_operation+0x178>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d111      	bne.n	80015b0 <dimmer_operation+0x130>
			  {
				  temp_flag = 0;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <dimmer_operation+0x178>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
			    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MIN_PWM);
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <dimmer_operation+0x184>)
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <dimmer_operation+0x180>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,ZERO_PWM);
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <dimmer_operation+0x19c>)
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <dimmer_operation+0x188>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,ZERO_PWM);
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <dimmer_operation+0x19c>)
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <dimmer_operation+0x180>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34
			  }
			  dimmer_enable_flag = 0;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <dimmer_operation+0x190>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015bc:	4816      	ldr	r0, [pc, #88]	; (8001618 <dimmer_operation+0x198>)
 80015be:	f001 feee 	bl	800339e <HAL_GPIO_WritePin>
			  dimmer_flag = 0;
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <dimmer_operation+0x18c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
			  dimmer_value_change_flag=0;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <dimmer_operation+0x194>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
		  }

	   DIMMER_TX(level);
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f8cd 	bl	8001770 <DIMMER_TX>

}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	33333333 	.word	0x33333333
 80015e4:	3fe33333 	.word	0x3fe33333
 80015e8:	200000e0 	.word	0x200000e0
 80015ec:	40504000 	.word	0x40504000
 80015f0:	20000000 	.word	0x20000000
 80015f4:	2000008c 	.word	0x2000008c
 80015f8:	20000280 	.word	0x20000280
 80015fc:	20000002 	.word	0x20000002
 8001600:	20000364 	.word	0x20000364
 8001604:	20000001 	.word	0x20000001
 8001608:	2000028c 	.word	0x2000028c
 800160c:	200000e1 	.word	0x200000e1
 8001610:	200000e3 	.word	0x200000e3
 8001614:	200000e2 	.word	0x200000e2
 8001618:	40010800 	.word	0x40010800
 800161c:	2000026f 	.word	0x2000026f

08001620 <HAL_GPIO_EXTI_Callback>:
/*****************DIMMER_INTERRUPT CALL_BACK*********************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //FALLING_EDGE DETECTION INTTERUPT
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INTERRUPT_Pin) // If The INT Source Is EXTI Line9 (PA0 Pin)
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d11f      	bne.n	8001670 <HAL_GPIO_EXTI_Callback+0x50>
    {
    	if(dimmer_value_change_flag == 1 )
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_GPIO_EXTI_Callback+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d114      	bne.n	8001662 <HAL_GPIO_EXTI_Callback+0x42>
    	{
    		dimmer_value_change_flag =0;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_GPIO_EXTI_Callback+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
    		if((timer2_period >= 5) && (timer2_period <= 65) )
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d90d      	bls.n	8001662 <HAL_GPIO_EXTI_Callback+0x42>
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b41      	cmp	r3, #65	; 0x41
 800164c:	d809      	bhi.n	8001662 <HAL_GPIO_EXTI_Callback+0x42>
    		{
    		__HAL_TIM_SET_AUTORELOAD(&htim2,timer2_period);
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_GPIO_EXTI_Callback+0x60>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_GPIO_EXTI_Callback+0x5c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_GPIO_EXTI_Callback+0x60>)
 8001660:	60da      	str	r2, [r3, #12]
    		}
    	}
      if(dimmer_enable_flag == 1)
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_GPIO_EXTI_Callback+0x64>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d102      	bne.n	8001670 <HAL_GPIO_EXTI_Callback+0x50>
	   {
     	   HAL_TIM_Base_Start_IT(&htim2);
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_GPIO_EXTI_Callback+0x60>)
 800166c:	f003 fb32 	bl	8004cd4 <HAL_TIM_Base_Start_IT>
	   }

    }
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200000e2 	.word	0x200000e2
 800167c:	20000000 	.word	0x20000000
 8001680:	200002d4 	.word	0x200002d4
 8001684:	200000e3 	.word	0x200000e3

08001688 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //DIMMMER
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001698:	d111      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x36>
	{

	 HAL_TIM_Base_Stop_IT(&htim2);
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800169c:	f003 fb6c 	bl	8004d78 <HAL_TIM_Base_Stop_IT>
	 HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80016a8:	f001 fe79 	bl	800339e <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f001 faf9 	bl	8002ca4 <HAL_Delay>
     HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80016ba:	f001 fe70 	bl	800339e <HAL_GPIO_WritePin>

	}

}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002d4 	.word	0x200002d4
 80016cc:	40010800 	.word	0x40010800

080016d0 <switch_long_press>:
void switch_long_press(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
       HAL_UART_Transmit(&huart2,Longpress_Tx_Buff,sizeof(Longpress_Tx_Buff),100);
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	220a      	movs	r2, #10
 80016d8:	4902      	ldr	r1, [pc, #8]	; (80016e4 <switch_long_press+0x14>)
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <switch_long_press+0x18>)
 80016dc:	f004 fad4 	bl	8005c88 <HAL_UART_Transmit>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000048 	.word	0x20000048
 80016e8:	200003ac 	.word	0x200003ac

080016ec <Tx_Switch_Satus>:
void Tx_Switch_Satus(uint8_t SW_NO, uint8_t SW_STS)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	460a      	mov	r2, r1
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71bb      	strb	r3, [r7, #6]
		    *  Switch_Touch_Tx_Buff[8] and Switch_Touch_Tx_Buff[9] Data Length
		    *  Switch_Touch_Tx_Buff[10] Switch Status
		    *  Switch_Touch_Tx_Buff[11] CRC {CRC is remainder  sum of all byte divided by 256 }
			*/

			uint8_t Switch_Touch_Tx_Buff[12] = {0x55,0xAA,0x03,0x07,0x00,0x05,0x01,0x01,0x00,0x01,0x00,0x00};  //Data frame for sending Switch Status
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <Tx_Switch_Satus+0x7c>)
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	ca07      	ldmia	r2, {r0, r1, r2}
 8001704:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			uint8_t Check_Sum = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	76bb      	strb	r3, [r7, #26]

			if(SW_NO == Switch_7)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b07      	cmp	r3, #7
 8001710:	d102      	bne.n	8001718 <Tx_Switch_Satus+0x2c>
			{

				Switch_Touch_Tx_Buff[6] = 0x65;
 8001712:	2365      	movs	r3, #101	; 0x65
 8001714:	74bb      	strb	r3, [r7, #18]
 8001716:	e001      	b.n	800171c <Tx_Switch_Satus+0x30>

			}
			else
			{
			    Switch_Touch_Tx_Buff[6] = SW_NO; //SWITCH_NUMBE
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	74bb      	strb	r3, [r7, #18]
			}

			Switch_Touch_Tx_Buff[10] = SW_STS; //SWITCH ON AND OFF
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	75bb      	strb	r3, [r7, #22]

			uint32_t Tx_Data_Sum = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]

		    for(uint8_t i =0;i < sizeof(Switch_Touch_Tx_Buff); i++)
 8001724:	2300      	movs	r3, #0
 8001726:	76fb      	strb	r3, [r7, #27]
 8001728:	e00b      	b.n	8001742 <Tx_Switch_Satus+0x56>
		    {
		       Tx_Data_Sum += Switch_Touch_Tx_Buff[i];
 800172a:	7efb      	ldrb	r3, [r7, #27]
 800172c:	3320      	adds	r3, #32
 800172e:	443b      	add	r3, r7
 8001730:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001734:	461a      	mov	r2, r3
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	61fb      	str	r3, [r7, #28]
		    for(uint8_t i =0;i < sizeof(Switch_Touch_Tx_Buff); i++)
 800173c:	7efb      	ldrb	r3, [r7, #27]
 800173e:	3301      	adds	r3, #1
 8001740:	76fb      	strb	r3, [r7, #27]
 8001742:	7efb      	ldrb	r3, [r7, #27]
 8001744:	2b0b      	cmp	r3, #11
 8001746:	d9f0      	bls.n	800172a <Tx_Switch_Satus+0x3e>
		    }

		    Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	76bb      	strb	r3, [r7, #26]

		    Switch_Touch_Tx_Buff[11] = Check_Sum ;
 800174c:	7ebb      	ldrb	r3, [r7, #26]
 800174e:	75fb      	strb	r3, [r7, #23]

		    HAL_UART_Transmit(&huart2,Switch_Touch_Tx_Buff,sizeof(Switch_Touch_Tx_Buff),100);
 8001750:	f107 010c 	add.w	r1, r7, #12
 8001754:	2364      	movs	r3, #100	; 0x64
 8001756:	220c      	movs	r2, #12
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <Tx_Switch_Satus+0x80>)
 800175a:	f004 fa95 	bl	8005c88 <HAL_UART_Transmit>


}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	080066cc 	.word	0x080066cc
 800176c:	200003ac 	.word	0x200003ac

08001770 <DIMMER_TX>:
void DIMMER_TX(uint8_t DIMMER_COUNTER)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
 uint8_t DIMMER_Tx_Buff[15] = {0x55,0xAA,0x03,0x07,0x00,0x08,0x6a,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00};//Data frame for sending DIMMER Status
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <DIMMER_TX+0x98>)
 800177c:	f107 040c 	add.w	r4, r7, #12
 8001780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001782:	c407      	stmia	r4!, {r0, r1, r2}
 8001784:	8023      	strh	r3, [r4, #0]
 8001786:	3402      	adds	r4, #2
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	7023      	strb	r3, [r4, #0]
 uint8_t Check_Sum = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 uint32_t DIMMER_COUNTED=DIMMER_COUNTER;
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	61fb      	str	r3, [r7, #28]
				DIMMER_Tx_Buff[10]= DIMMER_COUNTED>>24 & 0xFF;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	0e1b      	lsrs	r3, r3, #24
 800179a:	b2db      	uxtb	r3, r3
 800179c:	75bb      	strb	r3, [r7, #22]
				DIMMER_Tx_Buff[11]= DIMMER_COUNTED>>16 & 0xFF;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	75fb      	strb	r3, [r7, #23]
				DIMMER_Tx_Buff[12]= DIMMER_COUNTED>>8 & 0xFF;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	763b      	strb	r3, [r7, #24]
				DIMMER_Tx_Buff[13]= DIMMER_COUNTED>>0 & 0xFF;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	767b      	strb	r3, [r7, #25]

			uint32_t Tx_Data_Sum = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24

			  for(uint8_t i =0;i < sizeof(DIMMER_Tx_Buff); i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80017be:	e00e      	b.n	80017de <DIMMER_TX+0x6e>
				    {
				       Tx_Data_Sum += DIMMER_Tx_Buff[i];
 80017c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017c4:	3328      	adds	r3, #40	; 0x28
 80017c6:	443b      	add	r3, r7
 80017c8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80017cc:	461a      	mov	r2, r3
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	4413      	add	r3, r2
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
			  for(uint8_t i =0;i < sizeof(DIMMER_Tx_Buff); i++)
 80017d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017d8:	3301      	adds	r3, #1
 80017da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80017de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017e2:	2b0e      	cmp	r3, #14
 80017e4:	d9ec      	bls.n	80017c0 <DIMMER_TX+0x50>
				    }

			  Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

			  DIMMER_Tx_Buff[14] = Check_Sum ;
 80017ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017f0:	76bb      	strb	r3, [r7, #26]

			  HAL_UART_Transmit(&huart2,DIMMER_Tx_Buff,sizeof(DIMMER_Tx_Buff),100);
 80017f2:	f107 010c 	add.w	r1, r7, #12
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	220f      	movs	r2, #15
 80017fa:	4804      	ldr	r0, [pc, #16]	; (800180c <DIMMER_TX+0x9c>)
 80017fc:	f004 fa44 	bl	8005c88 <HAL_UART_Transmit>
}
 8001800:	bf00      	nop
 8001802:	372c      	adds	r7, #44	; 0x2c
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	080066d8 	.word	0x080066d8
 800180c:	200003ac 	.word	0x200003ac

08001810 <HAL_UART_RxCpltCallback>:

/**********************UART callback routine*************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
     Cyclic_Buffer[wrI]=RX_Buffer;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0x4c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_UART_RxCpltCallback+0x50>)
 8001820:	7819      	ldrb	r1, [r3, #0]
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_UART_RxCpltCallback+0x54>)
 8001824:	5499      	strb	r1, [r3, r2]
	 wrI=( wrI + 1 )%256;
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_UART_RxCpltCallback+0x4c>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	425a      	negs	r2, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	bf58      	it	pl
 8001834:	4253      	negpl	r3, r2
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_UART_RxCpltCallback+0x4c>)
 800183a:	701a      	strb	r2, [r3, #0]
	 Count++;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_UART_RxCpltCallback+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_UART_RxCpltCallback+0x58>)
 8001846:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 8001848:	2201      	movs	r2, #1
 800184a:	4905      	ldr	r1, [pc, #20]	; (8001860 <HAL_UART_RxCpltCallback+0x50>)
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <HAL_UART_RxCpltCallback+0x5c>)
 800184e:	f004 faad 	bl	8005dac <HAL_UART_Receive_IT>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200000ed 	.word	0x200000ed
 8001860:	20000259 	.word	0x20000259
 8001864:	200000f0 	.word	0x200000f0
 8001868:	200000ef 	.word	0x200000ef
 800186c:	200003ac 	.word	0x200003ac

08001870 <Uart_Read_data>:
/****************USART_READ****************/
void Uart_Read_data()
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  if(Count !=0)
 8001874:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <Uart_Read_data+0xf0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d06c      	beq.n	8001956 <Uart_Read_data+0xe6>
		 {
	        RX_Buffer =  Cyclic_Buffer[rdI];
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <Uart_Read_data+0xf4>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <Uart_Read_data+0xf8>)
 8001884:	5c9a      	ldrb	r2, [r3, r2]
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <Uart_Read_data+0xfc>)
 8001888:	701a      	strb	r2, [r3, #0]
	        rdI=( rdI + 1 )%256;
 800188a:	4b36      	ldr	r3, [pc, #216]	; (8001964 <Uart_Read_data+0xf4>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	425a      	negs	r2, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	bf58      	it	pl
 8001898:	4253      	negpl	r3, r2
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <Uart_Read_data+0xf4>)
 800189e:	701a      	strb	r2, [r3, #0]
	 		 Count--;
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <Uart_Read_data+0xf0>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <Uart_Read_data+0xf0>)
 80018aa:	701a      	strb	r2, [r3, #0]
	 		 if(Count == 0)
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <Uart_Read_data+0xf0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <Uart_Read_data+0x4c>
	 			       {
	 				       rdI = wrI;
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <Uart_Read_data+0x100>)
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <Uart_Read_data+0xf4>)
 80018ba:	701a      	strb	r2, [r3, #0]
	 			       }

	 		         Rx_Second_byte	 =RX_Buffer;
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <Uart_Read_data+0xfc>)
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <Uart_Read_data+0x104>)
 80018c2:	701a      	strb	r2, [r3, #0]
	 		      if((Rx_Second_byte == 0xAA) && (Rx_First_byte == 0x55))
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <Uart_Read_data+0x104>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2baa      	cmp	r3, #170	; 0xaa
 80018ca:	d116      	bne.n	80018fa <Uart_Read_data+0x8a>
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <Uart_Read_data+0x108>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b55      	cmp	r3, #85	; 0x55
 80018d2:	d112      	bne.n	80018fa <Uart_Read_data+0x8a>
	 			       {
	 			           RX_data_Count = 0;
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <Uart_Read_data+0x10c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
	 			           RX_Data_Start_Flag = 1;
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <Uart_Read_data+0x110>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
	 			           RX_Data[RX_data_Count] = Rx_First_byte;
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <Uart_Read_data+0x10c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <Uart_Read_data+0x108>)
 80018e8:	7819      	ldrb	r1, [r3, #0]
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <Uart_Read_data+0x114>)
 80018ec:	5499      	strb	r1, [r3, r2]
	 			           RX_data_Count++;
 80018ee:	4b23      	ldr	r3, [pc, #140]	; (800197c <Uart_Read_data+0x10c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <Uart_Read_data+0x10c>)
 80018f8:	701a      	strb	r2, [r3, #0]
	 			       }
	 			   if(RX_Data_Start_Flag == 1)
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <Uart_Read_data+0x110>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d125      	bne.n	800194e <Uart_Read_data+0xde>
	 			       {
	 			           RX_Data[RX_data_Count] = RX_Buffer;
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <Uart_Read_data+0x10c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <Uart_Read_data+0xfc>)
 800190a:	7819      	ldrb	r1, [r3, #0]
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <Uart_Read_data+0x114>)
 800190e:	5499      	strb	r1, [r3, r2]
	 			           if(RX_data_Count == 5)
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <Uart_Read_data+0x10c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d106      	bne.n	8001926 <Uart_Read_data+0xb6>
	 			           {
	 			        	  RX_data_length = RX_Data[RX_data_Count];
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <Uart_Read_data+0x10c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <Uart_Read_data+0x114>)
 8001920:	5c9a      	ldrb	r2, [r3, r2]
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <Uart_Read_data+0x118>)
 8001924:	701a      	strb	r2, [r3, #0]

	 			           }
	 			           if(RX_data_Count == (6 + RX_data_length))
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <Uart_Read_data+0x10c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <Uart_Read_data+0x118>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3306      	adds	r3, #6
 8001932:	429a      	cmp	r2, r3
 8001934:	d105      	bne.n	8001942 <Uart_Read_data+0xd2>
	 			           {

	 			               RX_Data_Start_Flag = 0;
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <Uart_Read_data+0x110>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
	 			               RX_Complete_flag = 1;
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <Uart_Read_data+0x11c>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
	 			           }
	 			          RX_data_Count++;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <Uart_Read_data+0x10c>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <Uart_Read_data+0x10c>)
 800194c:	701a      	strb	r2, [r3, #0]
	 			       }
	 			       Rx_First_byte  = Rx_Second_byte;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <Uart_Read_data+0x104>)
 8001950:	781a      	ldrb	r2, [r3, #0]
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <Uart_Read_data+0x108>)
 8001954:	701a      	strb	r2, [r3, #0]
		 }
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	200000ef 	.word	0x200000ef
 8001964:	200000ee 	.word	0x200000ee
 8001968:	200000f0 	.word	0x200000f0
 800196c:	20000259 	.word	0x20000259
 8001970:	200000ed 	.word	0x200000ed
 8001974:	200001f1 	.word	0x200001f1
 8001978:	200001f0 	.word	0x200001f0
 800197c:	20000258 	.word	0x20000258
 8001980:	2000025b 	.word	0x2000025b
 8001984:	200001f4 	.word	0x200001f4
 8001988:	2000025a 	.word	0x2000025a
 800198c:	2000025c 	.word	0x2000025c

08001990 <Rx_Data_evaluation>:
void Rx_Data_evaluation(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
	if(RX_Complete_flag==1)
 8001996:	4b81      	ldr	r3, [pc, #516]	; (8001b9c <Rx_Data_evaluation+0x20c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	f040 80fa 	bne.w	8001b94 <Rx_Data_evaluation+0x204>
	{

		uint32_t Rx_Data_Sum = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]

		uint8_t Check_Sum = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	72bb      	strb	r3, [r7, #10]

		RX_Complete_flag = 0;
 80019a8:	4b7c      	ldr	r3, [pc, #496]	; (8001b9c <Rx_Data_evaluation+0x20c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]

		for(uint8_t i=0 ; i< (RX_data_Count - 1);i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	72fb      	strb	r3, [r7, #11]
 80019b2:	e009      	b.n	80019c8 <Rx_Data_evaluation+0x38>
		{
			Rx_Data_Sum +=	RX_Data[i];
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	4a7a      	ldr	r2, [pc, #488]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
		for(uint8_t i=0 ; i< (RX_data_Count - 1);i++)
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	3301      	adds	r3, #1
 80019c6:	72fb      	strb	r3, [r7, #11]
 80019c8:	7afa      	ldrb	r2, [r7, #11]
 80019ca:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <Rx_Data_evaluation+0x214>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbef      	blt.n	80019b4 <Rx_Data_evaluation+0x24>
		}

		 Check_Sum = (uint8_t)((Rx_Data_Sum)%(256));
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	72bb      	strb	r3, [r7, #10]

		if( Check_Sum == RX_Data[(RX_data_Count - 1)])
 80019d8:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <Rx_Data_evaluation+0x214>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	4a70      	ldr	r2, [pc, #448]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	7aba      	ldrb	r2, [r7, #10]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 80d2 	bne.w	8001b8e <Rx_Data_evaluation+0x1fe>
		{
		   if(RX_data_Count >= 5)
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <Rx_Data_evaluation+0x214>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	f240 80cd 	bls.w	8001b8e <Rx_Data_evaluation+0x1fe>
		   {
/*******************HEART_BEAT_sending**************/
			 if(RX_Data[3]==0x00)
 80019f4:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 80019f6:	78db      	ldrb	r3, [r3, #3]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d13f      	bne.n	8001a7c <Rx_Data_evaluation+0xec>
			 {
					if(Rx_CNT == 0)
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <Rx_Data_evaluation+0x218>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10e      	bne.n	8001a22 <Rx_Data_evaluation+0x92>
					{
					   HAL_UART_Transmit(&huart2, Hbt, sizeof(Hbt), 100);
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	2208      	movs	r2, #8
 8001a08:	4968      	ldr	r1, [pc, #416]	; (8001bac <Rx_Data_evaluation+0x21c>)
 8001a0a:	4869      	ldr	r0, [pc, #420]	; (8001bb0 <Rx_Data_evaluation+0x220>)
 8001a0c:	f004 f93c 	bl	8005c88 <HAL_UART_Transmit>
					   Rx_CNT = 1;
 8001a10:	4b65      	ldr	r3, [pc, #404]	; (8001ba8 <Rx_Data_evaluation+0x218>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
					   timer_val = HAL_GetTick();
 8001a16:	f001 f93b 	bl	8002c90 <HAL_GetTick>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <Rx_Data_evaluation+0x224>)
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e023      	b.n	8001a6a <Rx_Data_evaluation+0xda>
					}
			        else
			        {
					   uint32_t  Now = HAL_GetTick();
 8001a22:	f001 f935 	bl	8002c90 <HAL_GetTick>
 8001a26:	6078      	str	r0, [r7, #4]
					   if(Now - timer_val < 2000)
 8001a28:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <Rx_Data_evaluation+0x224>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a34:	d20c      	bcs.n	8001a50 <Rx_Data_evaluation+0xc0>
					   {
							 Rx_CNT = 0;
 8001a36:	4b5c      	ldr	r3, [pc, #368]	; (8001ba8 <Rx_Data_evaluation+0x218>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
							 HAL_UART_Transmit(&huart2, Hbt, sizeof(Hbt), 100);
 8001a3c:	2364      	movs	r3, #100	; 0x64
 8001a3e:	2208      	movs	r2, #8
 8001a40:	495a      	ldr	r1, [pc, #360]	; (8001bac <Rx_Data_evaluation+0x21c>)
 8001a42:	485b      	ldr	r0, [pc, #364]	; (8001bb0 <Rx_Data_evaluation+0x220>)
 8001a44:	f004 f920 	bl	8005c88 <HAL_UART_Transmit>
							 Now=timer_val;
 8001a48:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <Rx_Data_evaluation+0x224>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	e00c      	b.n	8001a6a <Rx_Data_evaluation+0xda>
						}
						else if(Rx_CNT==1)
 8001a50:	4b55      	ldr	r3, [pc, #340]	; (8001ba8 <Rx_Data_evaluation+0x218>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <Rx_Data_evaluation+0xda>
						{
							 HAL_UART_Transmit(&huart2, Hbt1, sizeof(Hbt1), 100);
 8001a58:	2364      	movs	r3, #100	; 0x64
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	4956      	ldr	r1, [pc, #344]	; (8001bb8 <Rx_Data_evaluation+0x228>)
 8001a5e:	4854      	ldr	r0, [pc, #336]	; (8001bb0 <Rx_Data_evaluation+0x220>)
 8001a60:	f004 f912 	bl	8005c88 <HAL_UART_Transmit>
							 Now=timer_val;
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <Rx_Data_evaluation+0x224>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	607b      	str	r3, [r7, #4]
						}
			         }
			    		   Tuya_Heart_Flag = 1;
 8001a6a:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <Rx_Data_evaluation+0x22c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
			    		   Tuya_Start_Time = HAL_GetTick();
 8001a70:	f001 f90e 	bl	8002c90 <HAL_GetTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <Rx_Data_evaluation+0x230>)
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e088      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
			 }
/******************PID_SENDING*********************/
			else if(RX_Data[3]==0x01)
 8001a7c:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001a7e:	78db      	ldrb	r3, [r3, #3]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d109      	bne.n	8001a98 <Rx_Data_evaluation+0x108>
			{
				HAL_UART_Transmit(&huart2, PID, sizeof(PID), 100);
 8001a84:	2364      	movs	r3, #100	; 0x64
 8001a86:	2232      	movs	r2, #50	; 0x32
 8001a88:	494e      	ldr	r1, [pc, #312]	; (8001bc4 <Rx_Data_evaluation+0x234>)
 8001a8a:	4849      	ldr	r0, [pc, #292]	; (8001bb0 <Rx_Data_evaluation+0x220>)
 8001a8c:	f004 f8fc 	bl	8005c88 <HAL_UART_Transmit>
				Tuya_flag = 1;
 8001a90:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <Rx_Data_evaluation+0x238>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e07a      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
			}
/*************WORKING_MODE********************/
			else if(RX_Data[3] == 0x02)
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001a9a:	78db      	ldrb	r3, [r3, #3]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d106      	bne.n	8001aae <Rx_Data_evaluation+0x11e>
			{
				HAL_UART_Transmit(&huart2, Work_Mode, sizeof(Work_Mode), 100);
 8001aa0:	2364      	movs	r3, #100	; 0x64
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4949      	ldr	r1, [pc, #292]	; (8001bcc <Rx_Data_evaluation+0x23c>)
 8001aa6:	4842      	ldr	r0, [pc, #264]	; (8001bb0 <Rx_Data_evaluation+0x220>)
 8001aa8:	f004 f8ee 	bl	8005c88 <HAL_UART_Transmit>
 8001aac:	e06f      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
			}
/*****************WI_FI_CONNECTION*********************/
			else if(RX_Data[3] == 0x03)
 8001aae:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001ab0:	78db      	ldrb	r3, [r3, #3]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d126      	bne.n	8001b04 <Rx_Data_evaluation+0x174>
			{
/*******AUTO-CONFIGURATION*********/
				 if(RX_Data[6] == 0x00)
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001ab8:	799b      	ldrb	r3, [r3, #6]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <Rx_Data_evaluation+0x134>
				 {
					 Idication_Flag = 2;
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <Rx_Data_evaluation+0x240>)
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	701a      	strb	r2, [r3, #0]
				 }
/***************AP-MODE-INDICATION********************/
				 if(RX_Data[6] == 0x01)
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001ac6:	799b      	ldrb	r3, [r3, #6]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d103      	bne.n	8001ad4 <Rx_Data_evaluation+0x144>
				 {
					 Idication_Flag = 3;
 8001acc:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <Rx_Data_evaluation+0x240>)
 8001ace:	2203      	movs	r2, #3
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e010      	b.n	8001af6 <Rx_Data_evaluation+0x166>
				 }
				else if (RX_Data[6] == 0x02)
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001ad6:	799b      	ldrb	r3, [r3, #6]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d103      	bne.n	8001ae4 <Rx_Data_evaluation+0x154>
				{
					Idication_Flag = 1;
 8001adc:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <Rx_Data_evaluation+0x240>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e008      	b.n	8001af6 <Rx_Data_evaluation+0x166>
				}
				else if (RX_Data[6] == 0x04)
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001ae6:	799b      	ldrb	r3, [r3, #6]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d104      	bne.n	8001af6 <Rx_Data_evaluation+0x166>
				{
					Stop_Indication();
 8001aec:	f000 f918 	bl	8001d20 <Stop_Indication>
					Idication_Flag = 0;
 8001af0:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <Rx_Data_evaluation+0x240>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
				}
				 HAL_UART_Transmit(&huart2,WiFi_Status, sizeof(WiFi_Status), 100);
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	2207      	movs	r2, #7
 8001afa:	4936      	ldr	r1, [pc, #216]	; (8001bd4 <Rx_Data_evaluation+0x244>)
 8001afc:	482c      	ldr	r0, [pc, #176]	; (8001bb0 <Rx_Data_evaluation+0x220>)
 8001afe:	f004 f8c3 	bl	8005c88 <HAL_UART_Transmit>
 8001b02:	e044      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
			}
/****************SWITCH_OPERATIONS**************************/
			else if (RX_Data[3] == 0x06)
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b06:	78db      	ldrb	r3, [r3, #3]
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d13a      	bne.n	8001b82 <Rx_Data_evaluation+0x1f2>
			{

				if (RX_Data[6] == 0x0D)
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b0e:	799b      	ldrb	r3, [r3, #6]
 8001b10:	2b0d      	cmp	r3, #13
 8001b12:	d105      	bne.n	8001b20 <Rx_Data_evaluation+0x190>
				{
					Master_Switch(RX_Data[10]);
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b16:	7a9b      	ldrb	r3, [r3, #10]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f90d 	bl	8001d38 <Master_Switch>
 8001b1e:	e036      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
				}
				else if (RX_Data[6] == 0x6F)
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b22:	799b      	ldrb	r3, [r3, #6]
 8001b24:	2b6f      	cmp	r3, #111	; 0x6f
 8001b26:	d105      	bne.n	8001b34 <Rx_Data_evaluation+0x1a4>
				{
					set_max_pwm(RX_Data[13]);
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b2a:	7b5b      	ldrb	r3, [r3, #13]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f975 	bl	8001e1c <set_max_pwm>
 8001b32:	e02c      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
				}
				else if (RX_Data[6] == 0x70)
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b36:	799b      	ldrb	r3, [r3, #6]
 8001b38:	2b70      	cmp	r3, #112	; 0x70
 8001b3a:	d105      	bne.n	8001b48 <Rx_Data_evaluation+0x1b8>
				{
					set_min_pwm(RX_Data[13]);
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b3e:	7b5b      	ldrb	r3, [r3, #13]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 f9e7 	bl	8001f14 <set_min_pwm>
 8001b46:	e022      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
				}
				else if(RX_Data[6]==0x6A )
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	2b6a      	cmp	r3, #106	; 0x6a
 8001b4e:	d108      	bne.n	8001b62 <Rx_Data_evaluation+0x1d2>
					{
						dimmer_operation(dimmer_flag, RX_Data[13]);
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <Rx_Data_evaluation+0x248>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b56:	7b52      	ldrb	r2, [r2, #13]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fc90 	bl	8001480 <dimmer_operation>
 8001b60:	e015      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
					}
				else
				{
					if(RX_Data[6] == 0x65)
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b64:	799b      	ldrb	r3, [r3, #6]
 8001b66:	2b65      	cmp	r3, #101	; 0x65
 8001b68:	d102      	bne.n	8001b70 <Rx_Data_evaluation+0x1e0>
					{
						 RX_Data[6] = 0x07;
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	719a      	strb	r2, [r3, #6]
					}
				     switch_operation (RX_Data[6],RX_Data[10]);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b72:	799b      	ldrb	r3, [r3, #6]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b76:	7a92      	ldrb	r2, [r2, #10]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fad0 	bl	8001120 <switch_operation>
 8001b80:	e005      	b.n	8001b8e <Rx_Data_evaluation+0x1fe>
				}
			}
		    else if(RX_Data[3] == 0x08)
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <Rx_Data_evaluation+0x210>)
 8001b84:	78db      	ldrb	r3, [r3, #3]
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d101      	bne.n	8001b8e <Rx_Data_evaluation+0x1fe>
		    {
				 Status_ReadData();
 8001b8a:	f000 fa3f 	bl	800200c <Status_ReadData>
		    }
	    }
     }
			    RX_data_Count = 0;
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <Rx_Data_evaluation+0x214>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
   }
 }
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000025c 	.word	0x2000025c
 8001ba0:	200001f4 	.word	0x200001f4
 8001ba4:	20000258 	.word	0x20000258
 8001ba8:	2000025d 	.word	0x2000025d
 8001bac:	20000054 	.word	0x20000054
 8001bb0:	200003ac 	.word	0x200003ac
 8001bb4:	20000260 	.word	0x20000260
 8001bb8:	2000005c 	.word	0x2000005c
 8001bbc:	20000264 	.word	0x20000264
 8001bc0:	20000268 	.word	0x20000268
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	2000026c 	.word	0x2000026c
 8001bcc:	20000038 	.word	0x20000038
 8001bd0:	2000026d 	.word	0x2000026d
 8001bd4:	20000040 	.word	0x20000040
 8001bd8:	200000e1 	.word	0x200000e1

08001bdc <Indication>:

void Indication(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
	      static uint32_t Indication_Start_Time = 0;
		  static uint8_t Breath = 0;
		  static uint8_t Breath_Flag = 0;
		  uint32_t Now = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
		  if(Idication_Flag == 1)
 8001be6:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <Indication+0x12c>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d136      	bne.n	8001c5c <Indication+0x80>
		  {
			  Now = HAL_GetTick();
 8001bee:	f001 f84f 	bl	8002c90 <HAL_GetTick>
 8001bf2:	6078      	str	r0, [r7, #4]

			  if( Now - Indication_Start_Time > 50 )
 8001bf4:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <Indication+0x130>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b32      	cmp	r3, #50	; 0x32
 8001bfe:	d97e      	bls.n	8001cfe <Indication+0x122>
			  {
				  Indication_Start_Time = Now;
 8001c00:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <Indication+0x130>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,(Breath*2));      //LED7
 8001c06:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <Indication+0x134>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	005a      	lsls	r2, r3, #1
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <Indication+0x138>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38

				  	  if(Breath == 50)
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <Indication+0x134>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b32      	cmp	r3, #50	; 0x32
 8001c18:	d103      	bne.n	8001c22 <Indication+0x46>
					 {
						 Breath_Flag = 1;
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <Indication+0x13c>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	e006      	b.n	8001c30 <Indication+0x54>
					 }
					 else if (Breath == 1)
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <Indication+0x134>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <Indication+0x54>
					 {
						 Breath_Flag = 0;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <Indication+0x13c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
					 }

					 if (Breath_Flag == 0)
 8001c30:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <Indication+0x13c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <Indication+0x6a>
					 {
						 Breath++;
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <Indication+0x134>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <Indication+0x134>)
 8001c42:	701a      	strb	r2, [r3, #0]
					   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
				 }
		     }

	       }
 }
 8001c44:	e05b      	b.n	8001cfe <Indication+0x122>
					 else if (Breath_Flag == 1)
 8001c46:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <Indication+0x13c>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d157      	bne.n	8001cfe <Indication+0x122>
						 Breath--;
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <Indication+0x134>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <Indication+0x134>)
 8001c58:	701a      	strb	r2, [r3, #0]
 }
 8001c5a:	e050      	b.n	8001cfe <Indication+0x122>
		  else if(Idication_Flag == 2)                 /****************AUTO****************/
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <Indication+0x12c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d123      	bne.n	8001cac <Indication+0xd0>
			 Now = HAL_GetTick();
 8001c64:	f001 f814 	bl	8002c90 <HAL_GetTick>
 8001c68:	6078      	str	r0, [r7, #4]
			 if( Now - Indication_Start_Time > 250 )
 8001c6a:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <Indication+0x130>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2bfa      	cmp	r3, #250	; 0xfa
 8001c74:	d943      	bls.n	8001cfe <Indication+0x122>
				Indication_Start_Time =  Now ;
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <Indication+0x130>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6013      	str	r3, [r2, #0]
				if(Idication_Control_Flag  == 0)
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <Indication+0x140>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <Indication+0xb8>
					Idication_Control_Flag = 1;
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <Indication+0x140>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,H_PWM);      //LED7    /*************TOGGLE-LED*************/
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <Indication+0x138>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2264      	movs	r2, #100	; 0x64
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
 }
 8001c92:	e034      	b.n	8001cfe <Indication+0x122>
				else if(Idication_Control_Flag  == 1)
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <Indication+0x140>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d130      	bne.n	8001cfe <Indication+0x122>
					Idication_Control_Flag = 0;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <Indication+0x140>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <Indication+0x138>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2214      	movs	r2, #20
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
 }
 8001caa:	e028      	b.n	8001cfe <Indication+0x122>
		  else if(Idication_Flag == 3)
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <Indication+0x12c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d124      	bne.n	8001cfe <Indication+0x122>
			Now = HAL_GetTick();
 8001cb4:	f000 ffec 	bl	8002c90 <HAL_GetTick>
 8001cb8:	6078      	str	r0, [r7, #4]
			if( Now - Indication_Start_Time > 1500 )
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <Indication+0x130>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d919      	bls.n	8001cfe <Indication+0x122>
			  Indication_Start_Time =  Now ;
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <Indication+0x130>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6013      	str	r3, [r2, #0]
			  if(Idication_Control_Flag  == 0)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <Indication+0x140>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <Indication+0x10c>
				  Idication_Control_Flag = 1;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <Indication+0x140>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,H_PWM);      //LED7
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <Indication+0x138>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2264      	movs	r2, #100	; 0x64
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
 }
 8001ce6:	e00a      	b.n	8001cfe <Indication+0x122>
				else if(Idication_Control_Flag  == 1)
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <Indication+0x140>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <Indication+0x122>
					   Idication_Control_Flag = 0;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <Indication+0x140>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
					   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <Indication+0x138>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2214      	movs	r2, #20
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
 }
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000026d 	.word	0x2000026d
 8001d0c:	20000284 	.word	0x20000284
 8001d10:	20000288 	.word	0x20000288
 8001d14:	2000028c 	.word	0x2000028c
 8001d18:	20000289 	.word	0x20000289
 8001d1c:	2000026e 	.word	0x2000026e

08001d20 <Stop_Indication>:
void Stop_Indication(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Z_PWM);      //LED7
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <Stop_Indication+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	639a      	str	r2, [r3, #56]	; 0x38
		Status_ReadData();
 8001d2c:	f000 f96e 	bl	800200c <Status_ReadData>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000028c 	.word	0x2000028c

08001d38 <Master_Switch>:
/***************MASTER_SWITCH_APP_SIDE***********************/
void Master_Switch(uint8_t SW_STS)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
	 uint8_t Master_Switch[12] = {0x55,0xAA,0x03,0x07,0x00,0x05,0x0D,0x01,0x00,0x01,0x00,0x00};
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <Master_Switch+0xdc>)
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t Check_Sum = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]

	Master_Switch[10] = SW_STS;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	74bb      	strb	r3, [r7, #18]

	if(Master_Switch[10]==0x01)
 8001d56:	7cbb      	ldrb	r3, [r7, #18]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d11c      	bne.n	8001d96 <Master_Switch+0x5e>
	{
		switch_operation(Switch_1, SW_ON);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff f9de 	bl	8001120 <switch_operation>
		switch_operation(Switch_2, SW_ON);
 8001d64:	2101      	movs	r1, #1
 8001d66:	2002      	movs	r0, #2
 8001d68:	f7ff f9da 	bl	8001120 <switch_operation>
		switch_operation(Switch_3, SW_ON);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f7ff f9d6 	bl	8001120 <switch_operation>
		switch_operation(Switch_4, SW_ON);
 8001d74:	2101      	movs	r1, #1
 8001d76:	2004      	movs	r0, #4
 8001d78:	f7ff f9d2 	bl	8001120 <switch_operation>
		switch_operation(Switch_5, SW_ON);
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	2005      	movs	r0, #5
 8001d80:	f7ff f9ce 	bl	8001120 <switch_operation>
		switch_operation(Switch_6, SW_ON);
 8001d84:	2101      	movs	r1, #1
 8001d86:	2006      	movs	r0, #6
 8001d88:	f7ff f9ca 	bl	8001120 <switch_operation>
		switch_operation(Switch_7, SW_ON);
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	2007      	movs	r0, #7
 8001d90:	f7ff f9c6 	bl	8001120 <switch_operation>
 8001d94:	e01b      	b.n	8001dce <Master_Switch+0x96>
	}
	else
	{
		switch_operation(Switch_1, SW_OFF);
 8001d96:	2100      	movs	r1, #0
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff f9c1 	bl	8001120 <switch_operation>
		switch_operation(Switch_2, SW_OFF);
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff f9bd 	bl	8001120 <switch_operation>
		switch_operation(Switch_3, SW_OFF);
 8001da6:	2100      	movs	r1, #0
 8001da8:	2003      	movs	r0, #3
 8001daa:	f7ff f9b9 	bl	8001120 <switch_operation>
		switch_operation(Switch_4, SW_OFF);
 8001dae:	2100      	movs	r1, #0
 8001db0:	2004      	movs	r0, #4
 8001db2:	f7ff f9b5 	bl	8001120 <switch_operation>
		switch_operation(Switch_5, SW_OFF);
 8001db6:	2100      	movs	r1, #0
 8001db8:	2005      	movs	r0, #5
 8001dba:	f7ff f9b1 	bl	8001120 <switch_operation>
		switch_operation(Switch_6, SW_OFF);
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2006      	movs	r0, #6
 8001dc2:	f7ff f9ad 	bl	8001120 <switch_operation>
		switch_operation(Switch_7, SW_OFF);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2007      	movs	r0, #7
 8001dca:	f7ff f9a9 	bl	8001120 <switch_operation>
	}
	 uint32_t Tx_Data_Sum = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]

		for(int i=0;i <= sizeof(Master_Switch) ;i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	e00b      	b.n	8001df0 <Master_Switch+0xb8>
		{

			Tx_Data_Sum+=Master_Switch[i];
 8001dd8:	f107 0208 	add.w	r2, r7, #8
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	61fb      	str	r3, [r7, #28]
		for(int i=0;i <= sizeof(Master_Switch) ;i++)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d9f0      	bls.n	8001dd8 <Master_Switch+0xa0>
		}
		Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	75fb      	strb	r3, [r7, #23]

		Master_Switch[11] = Check_Sum ;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	74fb      	strb	r3, [r7, #19]

		HAL_UART_Transmit(&huart2, Master_Switch, sizeof(Master_Switch), 100);
 8001dfe:	f107 0108 	add.w	r1, r7, #8
 8001e02:	2364      	movs	r3, #100	; 0x64
 8001e04:	220c      	movs	r2, #12
 8001e06:	4804      	ldr	r0, [pc, #16]	; (8001e18 <Master_Switch+0xe0>)
 8001e08:	f003 ff3e 	bl	8005c88 <HAL_UART_Transmit>
}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	080066e8 	.word	0x080066e8
 8001e18:	200003ac 	.word	0x200003ac

08001e1c <set_max_pwm>:

void set_max_pwm(uint8_t max_val)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af04      	add	r7, sp, #16
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	MAX_PWM=max_val;
 8001e26:	4a35      	ldr	r2, [pc, #212]	; (8001efc <set_max_pwm+0xe0>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	7013      	strb	r3, [r2, #0]
	 if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 100) == HAL_OK)
 8001e2c:	2364      	movs	r3, #100	; 0x64
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <set_max_pwm+0xe0>)
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2310      	movs	r3, #16
 8001e3a:	2215      	movs	r2, #21
 8001e3c:	21a0      	movs	r1, #160	; 0xa0
 8001e3e:	4830      	ldr	r0, [pc, #192]	; (8001f00 <set_max_pwm+0xe4>)
 8001e40:	f001 fc22 	bl	8003688 <HAL_I2C_Mem_Write>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <set_max_pwm+0x34>
	        {
	            HAL_Delay(20);
 8001e4a:	2014      	movs	r0, #20
 8001e4c:	f000 ff2a 	bl	8002ca4 <HAL_Delay>
	        }
	        if(Touch_Flag[0] == 2)                   //SWITCH_ON CASE
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <set_max_pwm+0xe8>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d104      	bne.n	8001e62 <set_max_pwm+0x46>
	        {
	             __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MAX_PWM);
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <set_max_pwm+0xe0>)
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <set_max_pwm+0xec>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34
	        }
	        if(Touch_Flag[1] == 2)
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <set_max_pwm+0xe8>)
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d104      	bne.n	8001e74 <set_max_pwm+0x58>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MAX_PWM);
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <set_max_pwm+0xe0>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <set_max_pwm+0xec>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
	        }
	        if(Touch_Flag[2] == 2)
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <set_max_pwm+0xe8>)
 8001e76:	789b      	ldrb	r3, [r3, #2]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d104      	bne.n	8001e86 <set_max_pwm+0x6a>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MAX_PWM);
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <set_max_pwm+0xe0>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <set_max_pwm+0xf0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
	        }
	        if(Touch_Flag[3] == 2)
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <set_max_pwm+0xe8>)
 8001e88:	78db      	ldrb	r3, [r3, #3]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d104      	bne.n	8001e98 <set_max_pwm+0x7c>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MAX_PWM);
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <set_max_pwm+0xe0>)
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <set_max_pwm+0xec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
	        }
	        if(Touch_Flag[4] == 2)
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <set_max_pwm+0xe8>)
 8001e9a:	791b      	ldrb	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d104      	bne.n	8001eaa <set_max_pwm+0x8e>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM);
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <set_max_pwm+0xe0>)
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <set_max_pwm+0xf0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	63da      	str	r2, [r3, #60]	; 0x3c
	        }
	        if(Touch_Flag[5] == 2)
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <set_max_pwm+0xe8>)
 8001eac:	795b      	ldrb	r3, [r3, #5]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d104      	bne.n	8001ebc <set_max_pwm+0xa0>
	        {
	            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MAX_PWM);
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <set_max_pwm+0xe0>)
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <set_max_pwm+0xec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
	        }
	        if(Touch_Flag[6] == 2)
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <set_max_pwm+0xe8>)
 8001ebe:	799b      	ldrb	r3, [r3, #6]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d104      	bne.n	8001ece <set_max_pwm+0xb2>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MAX_PWM);
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <set_max_pwm+0xe0>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <set_max_pwm+0xf0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38
	        }
	        if(Touch_Flag[7] == 2)
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <set_max_pwm+0xe8>)
 8001ed0:	79db      	ldrb	r3, [r3, #7]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d104      	bne.n	8001ee0 <set_max_pwm+0xc4>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <set_max_pwm+0xe0>)
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <set_max_pwm+0xf0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	635a      	str	r2, [r3, #52]	; 0x34
	        }
	        if(Touch_Flag[8] == 2)
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <set_max_pwm+0xe8>)
 8001ee2:	7a1b      	ldrb	r3, [r3, #8]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d104      	bne.n	8001ef2 <set_max_pwm+0xd6>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MAX_PWM);
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <set_max_pwm+0xe0>)
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <set_max_pwm+0xf4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
			}

}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000002 	.word	0x20000002
 8001f00:	2000008c 	.word	0x2000008c
 8001f04:	200000e4 	.word	0x200000e4
 8001f08:	2000031c 	.word	0x2000031c
 8001f0c:	20000364 	.word	0x20000364
 8001f10:	2000028c 	.word	0x2000028c

08001f14 <set_min_pwm>:
void set_min_pwm(uint8_t min_val)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af04      	add	r7, sp, #16
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
	MIN_PWM=min_val;
 8001f1e:	4a35      	ldr	r2, [pc, #212]	; (8001ff4 <set_min_pwm+0xe0>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	7013      	strb	r3, [r2, #0]
	 if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 100) == HAL_OK)
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <set_min_pwm+0xe0>)
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2310      	movs	r3, #16
 8001f32:	2214      	movs	r2, #20
 8001f34:	21a0      	movs	r1, #160	; 0xa0
 8001f36:	4830      	ldr	r0, [pc, #192]	; (8001ff8 <set_min_pwm+0xe4>)
 8001f38:	f001 fba6 	bl	8003688 <HAL_I2C_Mem_Write>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <set_min_pwm+0x34>
	        {
	            HAL_Delay(20);
 8001f42:	2014      	movs	r0, #20
 8001f44:	f000 feae 	bl	8002ca4 <HAL_Delay>
	        }
	            if(Touch_Flag[0] == 0)                   //SWITCH_ON CASE
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <set_min_pwm+0xe8>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <set_min_pwm+0x46>
		        {
		             __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <set_min_pwm+0xe0>)
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <set_min_pwm+0xec>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
		        }
		        if(Touch_Flag[1] == 0)
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <set_min_pwm+0xe8>)
 8001f5c:	785b      	ldrb	r3, [r3, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <set_min_pwm+0x58>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <set_min_pwm+0xe0>)
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <set_min_pwm+0xec>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
		        }
		        if(Touch_Flag[2] == 0)
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <set_min_pwm+0xe8>)
 8001f6e:	789b      	ldrb	r3, [r3, #2]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d104      	bne.n	8001f7e <set_min_pwm+0x6a>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);
 8001f74:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <set_min_pwm+0xe0>)
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <set_min_pwm+0xf0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
		        }
		        if(Touch_Flag[3] == 0)
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <set_min_pwm+0xe8>)
 8001f80:	78db      	ldrb	r3, [r3, #3]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d104      	bne.n	8001f90 <set_min_pwm+0x7c>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <set_min_pwm+0xe0>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <set_min_pwm+0xec>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	63da      	str	r2, [r3, #60]	; 0x3c
		        }
		        if(Touch_Flag[4] == 0)
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <set_min_pwm+0xe8>)
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d104      	bne.n	8001fa2 <set_min_pwm+0x8e>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <set_min_pwm+0xe0>)
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <set_min_pwm+0xf0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	63da      	str	r2, [r3, #60]	; 0x3c
		        }
		        if(Touch_Flag[5] == 0)
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <set_min_pwm+0xe8>)
 8001fa4:	795b      	ldrb	r3, [r3, #5]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <set_min_pwm+0xa0>
		        {
		            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <set_min_pwm+0xe0>)
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <set_min_pwm+0xec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
		        }
		        if(Touch_Flag[6] == 0)
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <set_min_pwm+0xe8>)
 8001fb6:	799b      	ldrb	r3, [r3, #6]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <set_min_pwm+0xb2>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MIN_PWM);
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <set_min_pwm+0xe0>)
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <set_min_pwm+0xf0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
		        }
		        if(Touch_Flag[7] == 0)
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <set_min_pwm+0xe8>)
 8001fc8:	79db      	ldrb	r3, [r3, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <set_min_pwm+0xc4>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <set_min_pwm+0xe0>)
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <set_min_pwm+0xf0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34
		        }
		        if(Touch_Flag[8] == 0)
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <set_min_pwm+0xe8>)
 8001fda:	7a1b      	ldrb	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d104      	bne.n	8001fea <set_min_pwm+0xd6>
				{
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <set_min_pwm+0xe0>)
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <set_min_pwm+0xf4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
				}

}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000001 	.word	0x20000001
 8001ff8:	2000008c 	.word	0x2000008c
 8001ffc:	200000e4 	.word	0x200000e4
 8002000:	2000031c 	.word	0x2000031c
 8002004:	20000364 	.word	0x20000364
 8002008:	2000028c 	.word	0x2000028c

0800200c <Status_ReadData>:
void Status_ReadData()
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b096      	sub	sp, #88	; 0x58
 8002010:	af04      	add	r7, sp, #16
	uint8_t  Status_Tx_Buff[50]={0x55,0xAA,0x03,0x07,0x00,0x28,0x01,0x01,0x00,0x01,0x00,0x02,0x01,0x00,0x01,0x00,0x03,0x01,0x00,0x01,0x00,0x04,0x01,0x00,0x01,0x00,0x05,0x01,0x00,0x01,0x00,0x06,0x01,0x00,0x01,0x00,0x65,0x01,0x00,0x01,0x00};
 8002012:	4b50      	ldr	r3, [pc, #320]	; (8002154 <Status_ReadData+0x148>)
 8002014:	f107 040c 	add.w	r4, r7, #12
 8002018:	461d      	mov	r5, r3
 800201a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002022:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002026:	c403      	stmia	r4!, {r0, r1}
 8002028:	8022      	strh	r2, [r4, #0]
 800202a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
	uint8_t  Switch_StatusNew[8];
	uint8_t  Check_Sum = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	uint32_t Tx_Data_Sum = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t  SW_State=0;
 800203e:	2300      	movs	r3, #0
 8002040:	70fb      	strb	r3, [r7, #3]
	uint8_t  k =0;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43


	for(uint8_t j=1;j<=NUMBER_OF_SWITCHES;j++)
 8002048:	2301      	movs	r3, #1
 800204a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800204e:	e024      	b.n	800209a <Status_ReadData+0x8e>
	{
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, j, I2C_MEMADD_SIZE_16BIT, &SW_State, 1, 10) == HAL_OK)
 8002050:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002054:	b29a      	uxth	r2, r3
 8002056:	230a      	movs	r3, #10
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	2301      	movs	r3, #1
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	1cfb      	adds	r3, r7, #3
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2310      	movs	r3, #16
 8002064:	21a0      	movs	r1, #160	; 0xa0
 8002066:	483c      	ldr	r0, [pc, #240]	; (8002158 <Status_ReadData+0x14c>)
 8002068:	f001 fc08 	bl	800387c <HAL_I2C_Mem_Read>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10e      	bne.n	8002090 <Status_ReadData+0x84>
		{
			  HAL_Delay(20);
 8002072:	2014      	movs	r0, #20
 8002074:	f000 fe16 	bl	8002ca4 <HAL_Delay>
			  Switch_StatusNew[k]= SW_State;
 8002078:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	3348      	adds	r3, #72	; 0x48
 8002080:	443b      	add	r3, r7
 8002082:	f803 2c44 	strb.w	r2, [r3, #-68]
			  k++;
 8002086:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800208a:	3301      	adds	r3, #1
 800208c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for(uint8_t j=1;j<=NUMBER_OF_SWITCHES;j++)
 8002090:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002094:	3301      	adds	r3, #1
 8002096:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800209a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800209e:	2b07      	cmp	r3, #7
 80020a0:	d9d6      	bls.n	8002050 <Status_ReadData+0x44>
		}
	}
	uint8_t temp[2]={0};
 80020a2:	2300      	movs	r3, #0
 80020a4:	803b      	strh	r3, [r7, #0]
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 23, I2C_MEMADD_SIZE_16BIT, temp, 2, 10) == HAL_OK)
 80020a6:	230a      	movs	r3, #10
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	2302      	movs	r3, #2
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	463b      	mov	r3, r7
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2310      	movs	r3, #16
 80020b4:	2217      	movs	r2, #23
 80020b6:	21a0      	movs	r1, #160	; 0xa0
 80020b8:	4827      	ldr	r0, [pc, #156]	; (8002158 <Status_ReadData+0x14c>)
 80020ba:	f001 fbdf 	bl	800387c <HAL_I2C_Mem_Read>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <Status_ReadData+0xbe>
	{
		HAL_Delay(20);
 80020c4:	2014      	movs	r0, #20
 80020c6:	f000 fded 	bl	8002ca4 <HAL_Delay>
	}
	Status_Tx_Buff[10] =   Switch_StatusNew[0];
 80020ca:	793b      	ldrb	r3, [r7, #4]
 80020cc:	75bb      	strb	r3, [r7, #22]
	Status_Tx_Buff[15] =   Switch_StatusNew[1];
 80020ce:	797b      	ldrb	r3, [r7, #5]
 80020d0:	76fb      	strb	r3, [r7, #27]
	Status_Tx_Buff[20] =   Switch_StatusNew[2];
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	f887 3020 	strb.w	r3, [r7, #32]
	Status_Tx_Buff[25] =   Switch_StatusNew[3];
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Status_Tx_Buff[30] =   Switch_StatusNew[4];
 80020de:	7a3b      	ldrb	r3, [r7, #8]
 80020e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Status_Tx_Buff[35] =   Switch_StatusNew[5];
 80020e4:	7a7b      	ldrb	r3, [r7, #9]
 80020e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Status_Tx_Buff[40] =   Switch_StatusNew[6];
 80020ea:	7abb      	ldrb	r3, [r7, #10]
 80020ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	Status_Tx_Buff[49] =   temp[2];
 80020f0:	78bb      	ldrb	r3, [r7, #2]
 80020f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	for(uint8_t i = 0; i <= 50; i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80020fc:	e00e      	b.n	800211c <Status_ReadData+0x110>
	{
	   Tx_Data_Sum += Status_Tx_Buff[i];
 80020fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002102:	3348      	adds	r3, #72	; 0x48
 8002104:	443b      	add	r3, r7
 8002106:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800210a:	461a      	mov	r2, r3
 800210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210e:	4413      	add	r3, r2
 8002110:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t i = 0; i <= 50; i++)
 8002112:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002116:	3301      	adds	r3, #1
 8002118:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800211c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002120:	2b32      	cmp	r3, #50	; 0x32
 8002122:	d9ec      	bls.n	80020fe <Status_ReadData+0xf2>
	}

	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8002124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002126:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	Status_Tx_Buff[50] = Check_Sum ;
 800212a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800212e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	HAL_UART_Transmit(&huart2,  Status_Tx_Buff, sizeof(Status_Tx_Buff),100);
 8002132:	f107 010c 	add.w	r1, r7, #12
 8002136:	2364      	movs	r3, #100	; 0x64
 8002138:	2232      	movs	r2, #50	; 0x32
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <Status_ReadData+0x150>)
 800213c:	f003 fda4 	bl	8005c88 <HAL_UART_Transmit>
	Check_Sum = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	Tx_Data_Sum = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	647b      	str	r3, [r7, #68]	; 0x44

}
 800214a:	bf00      	nop
 800214c:	3748      	adds	r7, #72	; 0x48
 800214e:	46bd      	mov	sp, r7
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	bf00      	nop
 8002154:	080066f4 	.word	0x080066f4
 8002158:	2000008c 	.word	0x2000008c
 800215c:	200003ac 	.word	0x200003ac

08002160 <EEPROM_initial>:
//*****************************EEPROM*********************************//
void EEPROM_initial()
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af04      	add	r7, sp, #16
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 22,I2C_MEMADD_SIZE_16BIT, &Temp_var, 1, 100)==HAL_OK)
 8002166:	2364      	movs	r3, #100	; 0x64
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	2301      	movs	r3, #1
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	4b5a      	ldr	r3, [pc, #360]	; (80022d8 <EEPROM_initial+0x178>)
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2310      	movs	r3, #16
 8002174:	2216      	movs	r2, #22
 8002176:	21a0      	movs	r1, #160	; 0xa0
 8002178:	4858      	ldr	r0, [pc, #352]	; (80022dc <EEPROM_initial+0x17c>)
 800217a:	f001 fb7f 	bl	800387c <HAL_I2C_Mem_Read>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <EEPROM_initial+0x2a>
	{
		HAL_Delay(Delay);
 8002184:	2032      	movs	r0, #50	; 0x32
 8002186:	f000 fd8d 	bl	8002ca4 <HAL_Delay>
	}
	 if(Temp_var!=1)
 800218a:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <EEPROM_initial+0x178>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d038      	beq.n	8002204 <EEPROM_initial+0xa4>
		    {
			    Temp_var=1;
 8002192:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <EEPROM_initial+0x178>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
			    if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 10) == HAL_OK)
 8002198:	230a      	movs	r3, #10
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	2301      	movs	r3, #1
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <EEPROM_initial+0x180>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2310      	movs	r3, #16
 80021a6:	2214      	movs	r2, #20
 80021a8:	21a0      	movs	r1, #160	; 0xa0
 80021aa:	484c      	ldr	r0, [pc, #304]	; (80022dc <EEPROM_initial+0x17c>)
 80021ac:	f001 fa6c 	bl	8003688 <HAL_I2C_Mem_Write>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <EEPROM_initial+0x5c>
			    {
			        HAL_Delay(20);
 80021b6:	2014      	movs	r0, #20
 80021b8:	f000 fd74 	bl	8002ca4 <HAL_Delay>
			    }

			    if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 10) == HAL_OK)
 80021bc:	230a      	movs	r3, #10
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <EEPROM_initial+0x184>)
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2310      	movs	r3, #16
 80021ca:	2215      	movs	r2, #21
 80021cc:	21a0      	movs	r1, #160	; 0xa0
 80021ce:	4843      	ldr	r0, [pc, #268]	; (80022dc <EEPROM_initial+0x17c>)
 80021d0:	f001 fa5a 	bl	8003688 <HAL_I2C_Mem_Write>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <EEPROM_initial+0x80>
			    {
			        HAL_Delay(20);
 80021da:	2014      	movs	r0, #20
 80021dc:	f000 fd62 	bl	8002ca4 <HAL_Delay>
			    }


			    if(HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADD,22,I2C_MEMADD_SIZE_16BIT,&Temp_var,1,100)==HAL_OK)
 80021e0:	2364      	movs	r3, #100	; 0x64
 80021e2:	9302      	str	r3, [sp, #8]
 80021e4:	2301      	movs	r3, #1
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <EEPROM_initial+0x178>)
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	2310      	movs	r3, #16
 80021ee:	2216      	movs	r2, #22
 80021f0:	21a0      	movs	r1, #160	; 0xa0
 80021f2:	483a      	ldr	r0, [pc, #232]	; (80022dc <EEPROM_initial+0x17c>)
 80021f4:	f001 fa48 	bl	8003688 <HAL_I2C_Mem_Write>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <EEPROM_initial+0xa4>
			    {
			        HAL_Delay(20);
 80021fe:	2014      	movs	r0, #20
 8002200:	f000 fd50 	bl	8002ca4 <HAL_Delay>
			    }
		    }

		    if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 10) == HAL_OK)
 8002204:	230a      	movs	r3, #10
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	2301      	movs	r3, #1
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <EEPROM_initial+0x180>)
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2310      	movs	r3, #16
 8002212:	2214      	movs	r2, #20
 8002214:	21a0      	movs	r1, #160	; 0xa0
 8002216:	4831      	ldr	r0, [pc, #196]	; (80022dc <EEPROM_initial+0x17c>)
 8002218:	f001 fb30 	bl	800387c <HAL_I2C_Mem_Read>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <EEPROM_initial+0xc8>
		    {
		        HAL_Delay(20);
 8002222:	2014      	movs	r0, #20
 8002224:	f000 fd3e 	bl	8002ca4 <HAL_Delay>
		    }

		    if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 10) == HAL_OK)
 8002228:	230a      	movs	r3, #10
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	2301      	movs	r3, #1
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <EEPROM_initial+0x184>)
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2310      	movs	r3, #16
 8002236:	2215      	movs	r2, #21
 8002238:	21a0      	movs	r1, #160	; 0xa0
 800223a:	4828      	ldr	r0, [pc, #160]	; (80022dc <EEPROM_initial+0x17c>)
 800223c:	f001 fb1e 	bl	800387c <HAL_I2C_Mem_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <EEPROM_initial+0xec>
		    {
		        HAL_Delay(20);
 8002246:	2014      	movs	r0, #20
 8002248:	f000 fd2c 	bl	8002ca4 <HAL_Delay>
		    }
	        for(uint8_t i=1;i<=NUMBER_OF_SWITCHES;i++)
 800224c:	2301      	movs	r3, #1
 800224e:	71fb      	strb	r3, [r7, #7]
 8002250:	e020      	b.n	8002294 <EEPROM_initial+0x134>
	        {
	              HAL_Delay(10);
 8002252:	200a      	movs	r0, #10
 8002254:	f000 fd26 	bl	8002ca4 <HAL_Delay>
	              uint8_t  SW_State=0;
 8002258:	2300      	movs	r3, #0
 800225a:	70fb      	strb	r3, [r7, #3]

	              if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, i, I2C_MEMADD_SIZE_16BIT, &SW_State, 1, 10) == HAL_OK)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	b29a      	uxth	r2, r3
 8002260:	230a      	movs	r3, #10
 8002262:	9302      	str	r3, [sp, #8]
 8002264:	2301      	movs	r3, #1
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	1cfb      	adds	r3, r7, #3
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2310      	movs	r3, #16
 800226e:	21a0      	movs	r1, #160	; 0xa0
 8002270:	481a      	ldr	r0, [pc, #104]	; (80022dc <EEPROM_initial+0x17c>)
 8002272:	f001 fb03 	bl	800387c <HAL_I2C_Mem_Read>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <EEPROM_initial+0x12e>
	              {

	                   HAL_Delay(20);
 800227c:	2014      	movs	r0, #20
 800227e:	f000 fd11 	bl	8002ca4 <HAL_Delay>
	                   switch_operation(i,SW_State);
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe ff49 	bl	8001120 <switch_operation>
	        for(uint8_t i=1;i<=NUMBER_OF_SWITCHES;i++)
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	3301      	adds	r3, #1
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2b07      	cmp	r3, #7
 8002298:	d9db      	bls.n	8002252 <EEPROM_initial+0xf2>

	              }
	        }
	        uint8_t temp_value[2] ={0};
 800229a:	2300      	movs	r3, #0
 800229c:	80bb      	strh	r3, [r7, #4]
	        if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD,23,I2C_MEMADD_SIZE_16BIT ,temp_value,2, 10)==HAL_OK)
 800229e:	230a      	movs	r3, #10
 80022a0:	9302      	str	r3, [sp, #8]
 80022a2:	2302      	movs	r3, #2
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2310      	movs	r3, #16
 80022ac:	2217      	movs	r2, #23
 80022ae:	21a0      	movs	r1, #160	; 0xa0
 80022b0:	480a      	ldr	r0, [pc, #40]	; (80022dc <EEPROM_initial+0x17c>)
 80022b2:	f001 f9e9 	bl	8003688 <HAL_I2C_Mem_Write>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <EEPROM_initial+0x16e>
	        			{
	        				HAL_Delay(20);
 80022bc:	2014      	movs	r0, #20
 80022be:	f000 fcf1 	bl	8002ca4 <HAL_Delay>
	        				dimmer_operation(temp_value[0], temp_value[1]);
 80022c2:	793b      	ldrb	r3, [r7, #4]
 80022c4:	797a      	ldrb	r2, [r7, #5]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f8d9 	bl	8001480 <dimmer_operation>
	        			}


}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000270 	.word	0x20000270
 80022dc:	2000008c 	.word	0x2000008c
 80022e0:	20000001 	.word	0x20000001
 80022e4:	20000002 	.word	0x20000002

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <Error_Handler+0x8>
	...

080022f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_MspInit+0x5c>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	4a14      	ldr	r2, [pc, #80]	; (8002350 <HAL_MspInit+0x5c>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6193      	str	r3, [r2, #24]
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_MspInit+0x5c>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_MspInit+0x5c>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_MspInit+0x5c>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_MspInit+0x5c>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_MspInit+0x60>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_MspInit+0x60>)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000
 8002354:	40010000 	.word	0x40010000

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800235c:	e7fe      	b.n	800235c <NMI_Handler+0x4>

0800235e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <HardFault_Handler+0x4>

08002364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <MemManage_Handler+0x4>

0800236a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <UsageFault_Handler+0x4>

08002376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239e:	f000 fc65 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_Pin);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f001 f810 	bl	80033d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <TIM2_IRQHandler+0x10>)
 80023ba:	f002 fe05 	bl	8004fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200002d4 	.word	0x200002d4

080023c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <USART2_IRQHandler+0x10>)
 80023ce:	f003 fd1d 	bl	8005e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200003ac 	.word	0x200003ac

080023dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b096      	sub	sp, #88	; 0x58
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2220      	movs	r2, #32
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f004 f93f 	bl	80066a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002426:	4b50      	ldr	r3, [pc, #320]	; (8002568 <MX_TIM1_Init+0x180>)
 8002428:	4a50      	ldr	r2, [pc, #320]	; (800256c <MX_TIM1_Init+0x184>)
 800242a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 800242c:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <MX_TIM1_Init+0x180>)
 800242e:	2214      	movs	r2, #20
 8002430:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <MX_TIM1_Init+0x180>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002438:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <MX_TIM1_Init+0x180>)
 800243a:	2264      	movs	r2, #100	; 0x64
 800243c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <MX_TIM1_Init+0x180>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <MX_TIM1_Init+0x180>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <MX_TIM1_Init+0x180>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002450:	4845      	ldr	r0, [pc, #276]	; (8002568 <MX_TIM1_Init+0x180>)
 8002452:	f002 fbef 	bl	8004c34 <HAL_TIM_Base_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800245c:	f7ff ff44 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002466:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800246a:	4619      	mov	r1, r3
 800246c:	483e      	ldr	r0, [pc, #248]	; (8002568 <MX_TIM1_Init+0x180>)
 800246e:	f002 ff71 	bl	8005354 <HAL_TIM_ConfigClockSource>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002478:	f7ff ff36 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800247c:	483a      	ldr	r0, [pc, #232]	; (8002568 <MX_TIM1_Init+0x180>)
 800247e:	f002 fca9 	bl	8004dd4 <HAL_TIM_PWM_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002488:	f7ff ff2e 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248c:	2300      	movs	r3, #0
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002494:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002498:	4619      	mov	r1, r3
 800249a:	4833      	ldr	r0, [pc, #204]	; (8002568 <MX_TIM1_Init+0x180>)
 800249c:	f003 fae6 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80024a6:	f7ff ff1f 	bl	80022e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024aa:	2360      	movs	r3, #96	; 0x60
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b6:	2300      	movs	r3, #0
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ca:	2200      	movs	r2, #0
 80024cc:	4619      	mov	r1, r3
 80024ce:	4826      	ldr	r0, [pc, #152]	; (8002568 <MX_TIM1_Init+0x180>)
 80024d0:	f002 fe82 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80024da:	f7ff ff05 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e2:	2204      	movs	r2, #4
 80024e4:	4619      	mov	r1, r3
 80024e6:	4820      	ldr	r0, [pc, #128]	; (8002568 <MX_TIM1_Init+0x180>)
 80024e8:	f002 fe76 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80024f2:	f7ff fef9 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fa:	2208      	movs	r2, #8
 80024fc:	4619      	mov	r1, r3
 80024fe:	481a      	ldr	r0, [pc, #104]	; (8002568 <MX_TIM1_Init+0x180>)
 8002500:	f002 fe6a 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800250a:	f7ff feed 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800250e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002512:	220c      	movs	r2, #12
 8002514:	4619      	mov	r1, r3
 8002516:	4814      	ldr	r0, [pc, #80]	; (8002568 <MX_TIM1_Init+0x180>)
 8002518:	f002 fe5e 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8002522:	f7ff fee1 	bl	80022e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800253a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4807      	ldr	r0, [pc, #28]	; (8002568 <MX_TIM1_Init+0x180>)
 800254a:	f003 faed 	bl	8005b28 <HAL_TIMEx_ConfigBreakDeadTime>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8002554:	f7ff fec8 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <MX_TIM1_Init+0x180>)
 800255a:	f000 f9e1 	bl	8002920 <HAL_TIM_MspPostInit>

}
 800255e:	bf00      	nop
 8002560:	3758      	adds	r7, #88	; 0x58
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2000028c 	.word	0x2000028c
 800256c:	40012c00 	.word	0x40012c00

08002570 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	463b      	mov	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <MX_TIM2_Init+0x94>)
 800258e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <MX_TIM2_Init+0x94>)
 8002596:	f240 321f 	movw	r2, #799	; 0x31f
 800259a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <MX_TIM2_Init+0x94>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 66-1;
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_TIM2_Init+0x94>)
 80025a4:	2241      	movs	r2, #65	; 0x41
 80025a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_TIM2_Init+0x94>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <MX_TIM2_Init+0x94>)
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <MX_TIM2_Init+0x94>)
 80025b6:	f002 fb3d 	bl	8004c34 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025c0:	f7ff fe92 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	4619      	mov	r1, r3
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_TIM2_Init+0x94>)
 80025d2:	f002 febf 	bl	8005354 <HAL_TIM_ConfigClockSource>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025dc:	f7ff fe84 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025e8:	463b      	mov	r3, r7
 80025ea:	4619      	mov	r1, r3
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_TIM2_Init+0x94>)
 80025ee:	f003 fa3d 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025f8:	f7ff fe76 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200002d4 	.word	0x200002d4

08002608 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08e      	sub	sp, #56	; 0x38
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	f107 0320 	add.w	r3, r7, #32
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	615a      	str	r2, [r3, #20]
 8002636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002638:	4b3c      	ldr	r3, [pc, #240]	; (800272c <MX_TIM3_Init+0x124>)
 800263a:	4a3d      	ldr	r2, [pc, #244]	; (8002730 <MX_TIM3_Init+0x128>)
 800263c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 800263e:	4b3b      	ldr	r3, [pc, #236]	; (800272c <MX_TIM3_Init+0x124>)
 8002640:	2214      	movs	r2, #20
 8002642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <MX_TIM3_Init+0x124>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <MX_TIM3_Init+0x124>)
 800264c:	2264      	movs	r2, #100	; 0x64
 800264e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <MX_TIM3_Init+0x124>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <MX_TIM3_Init+0x124>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800265c:	4833      	ldr	r0, [pc, #204]	; (800272c <MX_TIM3_Init+0x124>)
 800265e:	f002 fae9 	bl	8004c34 <HAL_TIM_Base_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002668:	f7ff fe3e 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002676:	4619      	mov	r1, r3
 8002678:	482c      	ldr	r0, [pc, #176]	; (800272c <MX_TIM3_Init+0x124>)
 800267a:	f002 fe6b 	bl	8005354 <HAL_TIM_ConfigClockSource>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002684:	f7ff fe30 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002688:	4828      	ldr	r0, [pc, #160]	; (800272c <MX_TIM3_Init+0x124>)
 800268a:	f002 fba3 	bl	8004dd4 <HAL_TIM_PWM_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002694:	f7ff fe28 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	4619      	mov	r1, r3
 80026a6:	4821      	ldr	r0, [pc, #132]	; (800272c <MX_TIM3_Init+0x124>)
 80026a8:	f003 f9e0 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80026b2:	f7ff fe19 	bl	80022e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026b6:	2360      	movs	r3, #96	; 0x60
 80026b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	4619      	mov	r1, r3
 80026cc:	4817      	ldr	r0, [pc, #92]	; (800272c <MX_TIM3_Init+0x124>)
 80026ce:	f002 fd83 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80026d8:	f7ff fe06 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2204      	movs	r2, #4
 80026e0:	4619      	mov	r1, r3
 80026e2:	4812      	ldr	r0, [pc, #72]	; (800272c <MX_TIM3_Init+0x124>)
 80026e4:	f002 fd78 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80026ee:	f7ff fdfb 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	2208      	movs	r2, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <MX_TIM3_Init+0x124>)
 80026fa:	f002 fd6d 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002704:	f7ff fdf0 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	220c      	movs	r2, #12
 800270c:	4619      	mov	r1, r3
 800270e:	4807      	ldr	r0, [pc, #28]	; (800272c <MX_TIM3_Init+0x124>)
 8002710:	f002 fd62 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 800271a:	f7ff fde5 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800271e:	4803      	ldr	r0, [pc, #12]	; (800272c <MX_TIM3_Init+0x124>)
 8002720:	f000 f8fe 	bl	8002920 <HAL_TIM_MspPostInit>

}
 8002724:	bf00      	nop
 8002726:	3738      	adds	r7, #56	; 0x38
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000031c 	.word	0x2000031c
 8002730:	40000400 	.word	0x40000400

08002734 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08e      	sub	sp, #56	; 0x38
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
 8002760:	615a      	str	r2, [r3, #20]
 8002762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002764:	4b3c      	ldr	r3, [pc, #240]	; (8002858 <MX_TIM4_Init+0x124>)
 8002766:	4a3d      	ldr	r2, [pc, #244]	; (800285c <MX_TIM4_Init+0x128>)
 8002768:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20;
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <MX_TIM4_Init+0x124>)
 800276c:	2214      	movs	r2, #20
 800276e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002770:	4b39      	ldr	r3, [pc, #228]	; (8002858 <MX_TIM4_Init+0x124>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <MX_TIM4_Init+0x124>)
 8002778:	2264      	movs	r2, #100	; 0x64
 800277a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <MX_TIM4_Init+0x124>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <MX_TIM4_Init+0x124>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002788:	4833      	ldr	r0, [pc, #204]	; (8002858 <MX_TIM4_Init+0x124>)
 800278a:	f002 fa53 	bl	8004c34 <HAL_TIM_Base_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002794:	f7ff fda8 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800279e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027a2:	4619      	mov	r1, r3
 80027a4:	482c      	ldr	r0, [pc, #176]	; (8002858 <MX_TIM4_Init+0x124>)
 80027a6:	f002 fdd5 	bl	8005354 <HAL_TIM_ConfigClockSource>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80027b0:	f7ff fd9a 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027b4:	4828      	ldr	r0, [pc, #160]	; (8002858 <MX_TIM4_Init+0x124>)
 80027b6:	f002 fb0d 	bl	8004dd4 <HAL_TIM_PWM_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80027c0:	f7ff fd92 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	4619      	mov	r1, r3
 80027d2:	4821      	ldr	r0, [pc, #132]	; (8002858 <MX_TIM4_Init+0x124>)
 80027d4:	f003 f94a 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80027de:	f7ff fd83 	bl	80022e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e2:	2360      	movs	r3, #96	; 0x60
 80027e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	4619      	mov	r1, r3
 80027f8:	4817      	ldr	r0, [pc, #92]	; (8002858 <MX_TIM4_Init+0x124>)
 80027fa:	f002 fced 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002804:	f7ff fd70 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2204      	movs	r2, #4
 800280c:	4619      	mov	r1, r3
 800280e:	4812      	ldr	r0, [pc, #72]	; (8002858 <MX_TIM4_Init+0x124>)
 8002810:	f002 fce2 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800281a:	f7ff fd65 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2208      	movs	r2, #8
 8002822:	4619      	mov	r1, r3
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <MX_TIM4_Init+0x124>)
 8002826:	f002 fcd7 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002830:	f7ff fd5a 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	220c      	movs	r2, #12
 8002838:	4619      	mov	r1, r3
 800283a:	4807      	ldr	r0, [pc, #28]	; (8002858 <MX_TIM4_Init+0x124>)
 800283c:	f002 fccc 	bl	80051d8 <HAL_TIM_PWM_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8002846:	f7ff fd4f 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800284a:	4803      	ldr	r0, [pc, #12]	; (8002858 <MX_TIM4_Init+0x124>)
 800284c:	f000 f868 	bl	8002920 <HAL_TIM_MspPostInit>

}
 8002850:	bf00      	nop
 8002852:	3738      	adds	r7, #56	; 0x38
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000364 	.word	0x20000364
 800285c:	40000800 	.word	0x40000800

08002860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a28      	ldr	r2, [pc, #160]	; (8002910 <HAL_TIM_Base_MspInit+0xb0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10c      	bne.n	800288c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002872:	4b28      	ldr	r3, [pc, #160]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	4a27      	ldr	r2, [pc, #156]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 8002878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800287c:	6193      	str	r3, [r2, #24]
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800288a:	e03c      	b.n	8002906 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d114      	bne.n	80028c0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	210f      	movs	r1, #15
 80028b2:	201c      	movs	r0, #28
 80028b4:	f000 faf1 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028b8:	201c      	movs	r0, #28
 80028ba:	f000 fb0a 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
}
 80028be:	e022      	b.n	8002906 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10c      	bne.n	80028e4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a11      	ldr	r2, [pc, #68]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	61d3      	str	r3, [r2, #28]
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
}
 80028e2:	e010      	b.n	8002906 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0c      	ldr	r2, [pc, #48]	; (800291c <HAL_TIM_Base_MspInit+0xbc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10b      	bne.n	8002906 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a08      	ldr	r2, [pc, #32]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800

08002920 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a48      	ldr	r2, [pc, #288]	; (8002a5c <HAL_TIM_MspPostInit+0x13c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d12b      	bne.n	8002998 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002940:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a46      	ldr	r2, [pc, #280]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED8_Pin|indication_led_Pin|LED9_Pin|LED10_Pin;
 8002958:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800295c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2302      	movs	r3, #2
 8002964:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	483d      	ldr	r0, [pc, #244]	; (8002a64 <HAL_TIM_MspPostInit+0x144>)
 800296e:	f000 fb7b 	bl	8003068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_TIM_MspPostInit+0x148>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	4a35      	ldr	r2, [pc, #212]	; (8002a68 <HAL_TIM_MspPostInit+0x148>)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002996:	e05c      	b.n	8002a52 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a33      	ldr	r2, [pc, #204]	; (8002a6c <HAL_TIM_MspPostInit+0x14c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12b      	bne.n	80029fa <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a2:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	4a2e      	ldr	r2, [pc, #184]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 80029a8:	f043 0310 	orr.w	r3, r3, #16
 80029ac:	6193      	str	r3, [r2, #24]
 80029ae:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED0_Pin|LED5_Pin|LED3_Pin|LED1_Pin;
 80029ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2302      	movs	r3, #2
 80029c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4828      	ldr	r0, [pc, #160]	; (8002a70 <HAL_TIM_MspPostInit+0x150>)
 80029d0:	f000 fb4a 	bl	8003068 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_TIM_MspPostInit+0x148>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f2:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_TIM_MspPostInit+0x148>)
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	6053      	str	r3, [r2, #4]
}
 80029f8:	e02b      	b.n	8002a52 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_TIM_MspPostInit+0x154>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d126      	bne.n	8002a52 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002a0a:	f043 0320 	orr.w	r3, r3, #32
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED7_Pin|LED6_Pin|LED4_Pin|LED2_Pin;
 8002a1c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2302      	movs	r3, #2
 8002a28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4811      	ldr	r0, [pc, #68]	; (8002a78 <HAL_TIM_MspPostInit+0x158>)
 8002a32:	f000 fb19 	bl	8003068 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_TIM_MspPostInit+0x148>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4c:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <HAL_TIM_MspPostInit+0x148>)
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	6053      	str	r3, [r2, #4]
}
 8002a52:	bf00      	nop
 8002a54:	3730      	adds	r7, #48	; 0x30
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40011800 	.word	0x40011800
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40011000 	.word	0x40011000
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40011400 	.word	0x40011400

08002a7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <MX_USART2_UART_Init+0x50>)
 8002a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002a88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ab2:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <MX_USART2_UART_Init+0x4c>)
 8002ab4:	f003 f89b 	bl	8005bee <HAL_UART_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002abe:	f7ff fc13 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200003ac 	.word	0x200003ac
 8002acc:	40004400 	.word	0x40004400

08002ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <HAL_UART_MspInit+0xb4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d145      	bne.n	8002b7c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_UART_MspInit+0xb8>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_UART_MspInit+0xb8>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	61d3      	str	r3, [r2, #28]
 8002afc:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_UART_MspInit+0xb8>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b08:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_UART_MspInit+0xb8>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_UART_MspInit+0xb8>)
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	6193      	str	r3, [r2, #24]
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_UART_MspInit+0xb8>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STM_TX_Pin;
 8002b20:	2320      	movs	r3, #32
 8002b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(STM_TX_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4619      	mov	r1, r3
 8002b32:	4816      	ldr	r0, [pc, #88]	; (8002b8c <HAL_UART_MspInit+0xbc>)
 8002b34:	f000 fa98 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_RX_Pin;
 8002b38:	2340      	movs	r3, #64	; 0x40
 8002b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STM_RX_GPIO_Port, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4810      	ldr	r0, [pc, #64]	; (8002b8c <HAL_UART_MspInit+0xbc>)
 8002b4c:	f000 fa8c 	bl	8003068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_UART_MspInit+0xc0>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_UART_MspInit+0xc0>)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	6053      	str	r3, [r2, #4]

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	2026      	movs	r0, #38	; 0x26
 8002b72:	f000 f992 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b76:	2026      	movs	r0, #38	; 0x26
 8002b78:	f000 f9ab 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40004400 	.word	0x40004400
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40011400 	.word	0x40011400
 8002b90:	40010000 	.word	0x40010000

08002b94 <Reset_Handler>:
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <LoopFillZerobss+0x12>)
 8002b96:	490d      	ldr	r1, [pc, #52]	; (8002bcc <LoopFillZerobss+0x16>)
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <LoopFillZerobss+0x1a>)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:
 8002b9e:	58d4      	ldr	r4, [r2, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:
 8002ba4:	18c4      	adds	r4, r0, r3
 8002ba6:	428c      	cmp	r4, r1
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <LoopFillZerobss+0x1e>)
 8002bac:	4c0a      	ldr	r4, [pc, #40]	; (8002bd8 <LoopFillZerobss+0x22>)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:
 8002bb6:	42a2      	cmp	r2, r4
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>
 8002bba:	f7ff fc0f 	bl	80023dc <SystemInit>
 8002bbe:	f003 fd4d 	bl	800665c <__libc_init_array>
 8002bc2:	f7fd ff39 	bl	8000a38 <main>
 8002bc6:	4770      	bx	lr
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000070 	.word	0x20000070
 8002bd0:	08006758 	.word	0x08006758
 8002bd4:	20000070 	.word	0x20000070
 8002bd8:	200003f4 	.word	0x200003f4

08002bdc <ADC1_2_IRQHandler>:
 8002bdc:	e7fe      	b.n	8002bdc <ADC1_2_IRQHandler>
	...

08002be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_Init+0x28>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_Init+0x28>)
 8002bea:	f043 0310 	orr.w	r3, r3, #16
 8002bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	f000 f947 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf6:	200d      	movs	r0, #13
 8002bf8:	f000 f808 	bl	8002c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bfc:	f7ff fb7a 	bl	80022f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_InitTick+0x54>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_InitTick+0x58>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f95f 	bl	8002eee <HAL_SYSTICK_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00e      	b.n	8002c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0f      	cmp	r3, #15
 8002c3e:	d80a      	bhi.n	8002c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c40:	2200      	movs	r2, #0
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f000 f927 	bl	8002e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <HAL_InitTick+0x5c>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000064 	.word	0x20000064
 8002c64:	2000006c 	.word	0x2000006c
 8002c68:	20000068 	.word	0x20000068

08002c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_IncTick+0x1c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_IncTick+0x20>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <HAL_IncTick+0x20>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	2000006c 	.word	0x2000006c
 8002c8c:	200003f0 	.word	0x200003f0

08002c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return uwTick;
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <HAL_GetTick+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	200003f0 	.word	0x200003f0

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cca:	bf00      	nop
 8002ccc:	f7ff ffe0 	bl	8002c90 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000006c 	.word	0x2000006c

08002cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1e:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	60d3      	str	r3, [r2, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <__NVIC_GetPriorityGrouping+0x18>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 0307 	and.w	r3, r3, #7
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	db0b      	blt.n	8002d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4906      	ldr	r1, [pc, #24]	; (8002d84 <__NVIC_EnableIRQ+0x34>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2001      	movs	r0, #1
 8002d72:	fa00 f202 	lsl.w	r2, r0, r2
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	db0a      	blt.n	8002db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <__NVIC_SetPriority+0x4c>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	0112      	lsls	r2, r2, #4
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	440b      	add	r3, r1
 8002dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db0:	e00a      	b.n	8002dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <__NVIC_SetPriority+0x50>)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	3b04      	subs	r3, #4
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	761a      	strb	r2, [r3, #24]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f1c3 0307 	rsb	r3, r3, #7
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	bf28      	it	cs
 8002dfa:	2304      	movcs	r3, #4
 8002dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d902      	bls.n	8002e0c <NVIC_EncodePriority+0x30>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3b03      	subs	r3, #3
 8002e0a:	e000      	b.n	8002e0e <NVIC_EncodePriority+0x32>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	401a      	ands	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43d9      	mvns	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	4313      	orrs	r3, r2
         );
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7ff ff90 	bl	8002d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff2d 	bl	8002cec <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eac:	f7ff ff42 	bl	8002d34 <__NVIC_GetPriorityGrouping>
 8002eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6978      	ldr	r0, [r7, #20]
 8002eb8:	f7ff ff90 	bl	8002ddc <NVIC_EncodePriority>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff5f 	bl	8002d88 <__NVIC_SetPriority>
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff35 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ffa2 	bl	8002e40 <SysTick_Config>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e020      	b.n	8002f70 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 020e 	bic.w	r2, r2, #14
 8002f3c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d005      	beq.n	8002f9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e051      	b.n	8003042 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 020e 	bic.w	r2, r2, #14
 8002fac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a22      	ldr	r2, [pc, #136]	; (800304c <HAL_DMA_Abort_IT+0xd0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d029      	beq.n	800301c <HAL_DMA_Abort_IT+0xa0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a20      	ldr	r2, [pc, #128]	; (8003050 <HAL_DMA_Abort_IT+0xd4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d022      	beq.n	8003018 <HAL_DMA_Abort_IT+0x9c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1f      	ldr	r2, [pc, #124]	; (8003054 <HAL_DMA_Abort_IT+0xd8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01a      	beq.n	8003012 <HAL_DMA_Abort_IT+0x96>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_DMA_Abort_IT+0xdc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d012      	beq.n	800300c <HAL_DMA_Abort_IT+0x90>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <HAL_DMA_Abort_IT+0xe0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00a      	beq.n	8003006 <HAL_DMA_Abort_IT+0x8a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <HAL_DMA_Abort_IT+0xe4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d102      	bne.n	8003000 <HAL_DMA_Abort_IT+0x84>
 8002ffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ffe:	e00e      	b.n	800301e <HAL_DMA_Abort_IT+0xa2>
 8003000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003004:	e00b      	b.n	800301e <HAL_DMA_Abort_IT+0xa2>
 8003006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800300a:	e008      	b.n	800301e <HAL_DMA_Abort_IT+0xa2>
 800300c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003010:	e005      	b.n	800301e <HAL_DMA_Abort_IT+0xa2>
 8003012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003016:	e002      	b.n	800301e <HAL_DMA_Abort_IT+0xa2>
 8003018:	2310      	movs	r3, #16
 800301a:	e000      	b.n	800301e <HAL_DMA_Abort_IT+0xa2>
 800301c:	2301      	movs	r3, #1
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_DMA_Abort_IT+0xe8>)
 8003020:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
    } 
  }
  return status;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40020008 	.word	0x40020008
 8003050:	4002001c 	.word	0x4002001c
 8003054:	40020030 	.word	0x40020030
 8003058:	40020044 	.word	0x40020044
 800305c:	40020058 	.word	0x40020058
 8003060:	4002006c 	.word	0x4002006c
 8003064:	40020000 	.word	0x40020000

08003068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003068:	b480      	push	{r7}
 800306a:	b08b      	sub	sp, #44	; 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307a:	e169      	b.n	8003350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800307c:	2201      	movs	r2, #1
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	429a      	cmp	r2, r3
 8003096:	f040 8158 	bne.w	800334a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a9a      	ldr	r2, [pc, #616]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d05e      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030a4:	4a98      	ldr	r2, [pc, #608]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d875      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030aa:	4a98      	ldr	r2, [pc, #608]	; (800330c <HAL_GPIO_Init+0x2a4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d058      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030b0:	4a96      	ldr	r2, [pc, #600]	; (800330c <HAL_GPIO_Init+0x2a4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d86f      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030b6:	4a96      	ldr	r2, [pc, #600]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d052      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030bc:	4a94      	ldr	r2, [pc, #592]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d869      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030c2:	4a94      	ldr	r2, [pc, #592]	; (8003314 <HAL_GPIO_Init+0x2ac>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d04c      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030c8:	4a92      	ldr	r2, [pc, #584]	; (8003314 <HAL_GPIO_Init+0x2ac>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d863      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030ce:	4a92      	ldr	r2, [pc, #584]	; (8003318 <HAL_GPIO_Init+0x2b0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d046      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030d4:	4a90      	ldr	r2, [pc, #576]	; (8003318 <HAL_GPIO_Init+0x2b0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d85d      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d82a      	bhi.n	8003134 <HAL_GPIO_Init+0xcc>
 80030de:	2b12      	cmp	r3, #18
 80030e0:	d859      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_GPIO_Init+0x80>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	08003163 	.word	0x08003163
 80030ec:	0800313d 	.word	0x0800313d
 80030f0:	0800314f 	.word	0x0800314f
 80030f4:	08003191 	.word	0x08003191
 80030f8:	08003197 	.word	0x08003197
 80030fc:	08003197 	.word	0x08003197
 8003100:	08003197 	.word	0x08003197
 8003104:	08003197 	.word	0x08003197
 8003108:	08003197 	.word	0x08003197
 800310c:	08003197 	.word	0x08003197
 8003110:	08003197 	.word	0x08003197
 8003114:	08003197 	.word	0x08003197
 8003118:	08003197 	.word	0x08003197
 800311c:	08003197 	.word	0x08003197
 8003120:	08003197 	.word	0x08003197
 8003124:	08003197 	.word	0x08003197
 8003128:	08003197 	.word	0x08003197
 800312c:	08003145 	.word	0x08003145
 8003130:	08003159 	.word	0x08003159
 8003134:	4a79      	ldr	r2, [pc, #484]	; (800331c <HAL_GPIO_Init+0x2b4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800313a:	e02c      	b.n	8003196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e029      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	3304      	adds	r3, #4
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e024      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	3308      	adds	r3, #8
 8003154:	623b      	str	r3, [r7, #32]
          break;
 8003156:	e01f      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	330c      	adds	r3, #12
 800315e:	623b      	str	r3, [r7, #32]
          break;
 8003160:	e01a      	b.n	8003198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800316a:	2304      	movs	r3, #4
 800316c:	623b      	str	r3, [r7, #32]
          break;
 800316e:	e013      	b.n	8003198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003178:	2308      	movs	r3, #8
 800317a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	611a      	str	r2, [r3, #16]
          break;
 8003182:	e009      	b.n	8003198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003184:	2308      	movs	r3, #8
 8003186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	615a      	str	r2, [r3, #20]
          break;
 800318e:	e003      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
          break;
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x130>
          break;
 8003196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2bff      	cmp	r3, #255	; 0xff
 800319c:	d801      	bhi.n	80031a2 <HAL_GPIO_Init+0x13a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	e001      	b.n	80031a6 <HAL_GPIO_Init+0x13e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2bff      	cmp	r3, #255	; 0xff
 80031ac:	d802      	bhi.n	80031b4 <HAL_GPIO_Init+0x14c>
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	e002      	b.n	80031ba <HAL_GPIO_Init+0x152>
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	3b08      	subs	r3, #8
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	210f      	movs	r1, #15
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	6a39      	ldr	r1, [r7, #32]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80b1 	beq.w	800334a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031e8:	4b4d      	ldr	r3, [pc, #308]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6193      	str	r3, [r2, #24]
 80031f4:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003200:	4a48      	ldr	r2, [pc, #288]	; (8003324 <HAL_GPIO_Init+0x2bc>)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a40      	ldr	r2, [pc, #256]	; (8003328 <HAL_GPIO_Init+0x2c0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <HAL_GPIO_Init+0x1ec>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3f      	ldr	r2, [pc, #252]	; (800332c <HAL_GPIO_Init+0x2c4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00d      	beq.n	8003250 <HAL_GPIO_Init+0x1e8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3e      	ldr	r2, [pc, #248]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <HAL_GPIO_Init+0x1e4>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_GPIO_Init+0x2cc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_GPIO_Init+0x1e0>
 8003244:	2303      	movs	r3, #3
 8003246:	e006      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003248:	2304      	movs	r3, #4
 800324a:	e004      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 800324c:	2302      	movs	r3, #2
 800324e:	e002      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003254:	2300      	movs	r3, #0
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	f002 0203 	and.w	r2, r2, #3
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	4093      	lsls	r3, r2
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003266:	492f      	ldr	r1, [pc, #188]	; (8003324 <HAL_GPIO_Init+0x2bc>)
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003280:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	492c      	ldr	r1, [pc, #176]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e006      	b.n	800329c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	43db      	mvns	r3, r3
 8003296:	4928      	ldr	r1, [pc, #160]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003298:	4013      	ands	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	4922      	ldr	r1, [pc, #136]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
 80032b4:	e006      	b.n	80032c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	43db      	mvns	r3, r3
 80032be:	491e      	ldr	r1, [pc, #120]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	4918      	ldr	r1, [pc, #96]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	4914      	ldr	r1, [pc, #80]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d021      	beq.n	800333c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	60cb      	str	r3, [r1, #12]
 8003304:	e021      	b.n	800334a <HAL_GPIO_Init+0x2e2>
 8003306:	bf00      	nop
 8003308:	10320000 	.word	0x10320000
 800330c:	10310000 	.word	0x10310000
 8003310:	10220000 	.word	0x10220000
 8003314:	10210000 	.word	0x10210000
 8003318:	10120000 	.word	0x10120000
 800331c:	10110000 	.word	0x10110000
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	40010800 	.word	0x40010800
 800332c:	40010c00 	.word	0x40010c00
 8003330:	40011000 	.word	0x40011000
 8003334:	40011400 	.word	0x40011400
 8003338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_GPIO_Init+0x304>)
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	43db      	mvns	r3, r3
 8003344:	4909      	ldr	r1, [pc, #36]	; (800336c <HAL_GPIO_Init+0x304>)
 8003346:	4013      	ands	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3301      	adds	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	f47f ae8e 	bne.w	800307c <HAL_GPIO_Init+0x14>
  }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	372c      	adds	r7, #44	; 0x2c
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40010400 	.word	0x40010400

08003370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e001      	b.n	8003392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	807b      	strh	r3, [r7, #2]
 80033aa:	4613      	mov	r3, r2
 80033ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ae:	787b      	ldrb	r3, [r7, #1]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033ba:	e003      	b.n	80033c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	041a      	lsls	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	611a      	str	r2, [r3, #16]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033e6:	4a05      	ldr	r2, [pc, #20]	; (80033fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe f916 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e12b      	b.n	800366a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fac8 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2224      	movs	r2, #36	; 0x24
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003464:	f001 fba0 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 8003468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4a81      	ldr	r2, [pc, #516]	; (8003674 <HAL_I2C_Init+0x274>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d807      	bhi.n	8003484 <HAL_I2C_Init+0x84>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a80      	ldr	r2, [pc, #512]	; (8003678 <HAL_I2C_Init+0x278>)
 8003478:	4293      	cmp	r3, r2
 800347a:	bf94      	ite	ls
 800347c:	2301      	movls	r3, #1
 800347e:	2300      	movhi	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e006      	b.n	8003492 <HAL_I2C_Init+0x92>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a7d      	ldr	r2, [pc, #500]	; (800367c <HAL_I2C_Init+0x27c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	bf94      	ite	ls
 800348c:	2301      	movls	r3, #1
 800348e:	2300      	movhi	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0e7      	b.n	800366a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a78      	ldr	r2, [pc, #480]	; (8003680 <HAL_I2C_Init+0x280>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4a6a      	ldr	r2, [pc, #424]	; (8003674 <HAL_I2C_Init+0x274>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d802      	bhi.n	80034d4 <HAL_I2C_Init+0xd4>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	3301      	adds	r3, #1
 80034d2:	e009      	b.n	80034e8 <HAL_I2C_Init+0xe8>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	4a69      	ldr	r2, [pc, #420]	; (8003684 <HAL_I2C_Init+0x284>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	3301      	adds	r3, #1
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	495c      	ldr	r1, [pc, #368]	; (8003674 <HAL_I2C_Init+0x274>)
 8003504:	428b      	cmp	r3, r1
 8003506:	d819      	bhi.n	800353c <HAL_I2C_Init+0x13c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1e59      	subs	r1, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fbb1 f3f3 	udiv	r3, r1, r3
 8003516:	1c59      	adds	r1, r3, #1
 8003518:	f640 73fc 	movw	r3, #4092	; 0xffc
 800351c:	400b      	ands	r3, r1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_I2C_Init+0x138>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1e59      	subs	r1, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003530:	3301      	adds	r3, #1
 8003532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003536:	e051      	b.n	80035dc <HAL_I2C_Init+0x1dc>
 8003538:	2304      	movs	r3, #4
 800353a:	e04f      	b.n	80035dc <HAL_I2C_Init+0x1dc>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d111      	bne.n	8003568 <HAL_I2C_Init+0x168>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1e58      	subs	r0, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	440b      	add	r3, r1
 8003552:	fbb0 f3f3 	udiv	r3, r0, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e012      	b.n	800358e <HAL_I2C_Init+0x18e>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1e58      	subs	r0, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	0099      	lsls	r1, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	fbb0 f3f3 	udiv	r3, r0, r3
 800357e:	3301      	adds	r3, #1
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Init+0x196>
 8003592:	2301      	movs	r3, #1
 8003594:	e022      	b.n	80035dc <HAL_I2C_Init+0x1dc>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10e      	bne.n	80035bc <HAL_I2C_Init+0x1bc>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1e58      	subs	r0, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	460b      	mov	r3, r1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	440b      	add	r3, r1
 80035ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ba:	e00f      	b.n	80035dc <HAL_I2C_Init+0x1dc>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1e58      	subs	r0, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	0099      	lsls	r1, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d2:	3301      	adds	r3, #1
 80035d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	6809      	ldr	r1, [r1, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800360a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6911      	ldr	r1, [r2, #16]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68d2      	ldr	r2, [r2, #12]
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	430b      	orrs	r3, r1
 800361e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	000186a0 	.word	0x000186a0
 8003678:	001e847f 	.word	0x001e847f
 800367c:	003d08ff 	.word	0x003d08ff
 8003680:	431bde83 	.word	0x431bde83
 8003684:	10624dd3 	.word	0x10624dd3

08003688 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	461a      	mov	r2, r3
 8003696:	4603      	mov	r3, r0
 8003698:	817b      	strh	r3, [r7, #10]
 800369a:	460b      	mov	r3, r1
 800369c:	813b      	strh	r3, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036a2:	f7ff faf5 	bl	8002c90 <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	f040 80d9 	bne.w	8003868 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	2319      	movs	r3, #25
 80036bc:	2201      	movs	r2, #1
 80036be:	496d      	ldr	r1, [pc, #436]	; (8003874 <HAL_I2C_Mem_Write+0x1ec>)
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fcc1 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0cc      	b.n	800386a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Mem_Write+0x56>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0c5      	b.n	800386a <HAL_I2C_Mem_Write+0x1e2>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d007      	beq.n	8003704 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2221      	movs	r2, #33	; 0x21
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a4d      	ldr	r2, [pc, #308]	; (8003878 <HAL_I2C_Mem_Write+0x1f0>)
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003746:	88f8      	ldrh	r0, [r7, #6]
 8003748:	893a      	ldrh	r2, [r7, #8]
 800374a:	8979      	ldrh	r1, [r7, #10]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	4603      	mov	r3, r0
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 faf8 	bl	8003d4c <I2C_RequestMemoryWrite>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d052      	beq.n	8003808 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e081      	b.n	800386a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fd42 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00d      	beq.n	8003792 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b04      	cmp	r3, #4
 800377c:	d107      	bne.n	800378e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06b      	b.n	800386a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d11b      	bne.n	8003808 <HAL_I2C_Mem_Write+0x180>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d017      	beq.n	8003808 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1aa      	bne.n	8003766 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fd2e 	bl	8004276 <I2C_WaitOnBTFFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2b04      	cmp	r3, #4
 8003826:	d107      	bne.n	8003838 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e016      	b.n	800386a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	00100002 	.word	0x00100002
 8003878:	ffff0000 	.word	0xffff0000

0800387c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	; 0x30
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	4608      	mov	r0, r1
 8003886:	4611      	mov	r1, r2
 8003888:	461a      	mov	r2, r3
 800388a:	4603      	mov	r3, r0
 800388c:	817b      	strh	r3, [r7, #10]
 800388e:	460b      	mov	r3, r1
 8003890:	813b      	strh	r3, [r7, #8]
 8003892:	4613      	mov	r3, r2
 8003894:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800389a:	f7ff f9f9 	bl	8002c90 <HAL_GetTick>
 800389e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	f040 8244 	bne.w	8003d36 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2319      	movs	r3, #25
 80038b4:	2201      	movs	r2, #1
 80038b6:	4982      	ldr	r1, [pc, #520]	; (8003ac0 <HAL_I2C_Mem_Read+0x244>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fbc5 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
 80038c6:	e237      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_I2C_Mem_Read+0x5a>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e230      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d007      	beq.n	80038fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800390a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2222      	movs	r2, #34	; 0x22
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a62      	ldr	r2, [pc, #392]	; (8003ac4 <HAL_I2C_Mem_Read+0x248>)
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800393e:	88f8      	ldrh	r0, [r7, #6]
 8003940:	893a      	ldrh	r2, [r7, #8]
 8003942:	8979      	ldrh	r1, [r7, #10]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4603      	mov	r3, r0
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fa92 	bl	8003e78 <I2C_RequestMemoryRead>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1ec      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d113      	bne.n	800398e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e1c0      	b.n	8003d10 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	2b01      	cmp	r3, #1
 8003994:	d11e      	bne.n	80039d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039a6:	b672      	cpsid	i
}
 80039a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039d0:	b662      	cpsie	i
}
 80039d2:	e035      	b.n	8003a40 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d11e      	bne.n	8003a1a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ec:	b672      	cpsid	i
}
 80039ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a16:	b662      	cpsie	i
}
 8003a18:	e012      	b.n	8003a40 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a28:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a40:	e166      	b.n	8003d10 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	f200 811f 	bhi.w	8003c8a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d123      	bne.n	8003a9c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fc4d 	bl	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e167      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a9a:	e139      	b.n	8003d10 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d152      	bne.n	8003b4a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4906      	ldr	r1, [pc, #24]	; (8003ac8 <HAL_I2C_Mem_Read+0x24c>)
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 faca 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e13c      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
 8003abe:	bf00      	nop
 8003ac0:	00100002 	.word	0x00100002
 8003ac4:	ffff0000 	.word	0xffff0000
 8003ac8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003acc:	b672      	cpsid	i
}
 8003ace:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b12:	b662      	cpsie	i
}
 8003b14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b48:	e0e2      	b.n	8003d10 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2200      	movs	r2, #0
 8003b52:	497b      	ldr	r1, [pc, #492]	; (8003d40 <HAL_I2C_Mem_Read+0x4c4>)
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fa77 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0e9      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b74:	b672      	cpsid	i
}
 8003b76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003baa:	4b66      	ldr	r3, [pc, #408]	; (8003d44 <HAL_I2C_Mem_Read+0x4c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	08db      	lsrs	r3, r3, #3
 8003bb0:	4a65      	ldr	r2, [pc, #404]	; (8003d48 <HAL_I2C_Mem_Read+0x4cc>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0a1a      	lsrs	r2, r3, #8
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00da      	lsls	r2, r3, #3
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d118      	bne.n	8003c02 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003bf2:	b662      	cpsie	i
}
 8003bf4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e09a      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d1d9      	bne.n	8003bc4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c52:	b662      	cpsie	i
}
 8003c54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c88:	e042      	b.n	8003d10 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fb32 	bl	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e04c      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d118      	bne.n	8003d10 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f47f ae94 	bne.w	8003a42 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e000      	b.n	8003d38 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3728      	adds	r7, #40	; 0x28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	00010004 	.word	0x00010004
 8003d44:	20000064 	.word	0x20000064
 8003d48:	14f8b589 	.word	0x14f8b589

08003d4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	813b      	strh	r3, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f960 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9c:	d103      	bne.n	8003da6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e05f      	b.n	8003e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003daa:	897b      	ldrh	r3, [r7, #10]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003db8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	492d      	ldr	r1, [pc, #180]	; (8003e74 <I2C_RequestMemoryWrite+0x128>)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f998 	bl	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e04c      	b.n	8003e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	6a39      	ldr	r1, [r7, #32]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fa02 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d107      	bne.n	8003e0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e02b      	b.n	8003e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e18:	893b      	ldrh	r3, [r7, #8]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]
 8003e22:	e021      	b.n	8003e68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e24:	893b      	ldrh	r3, [r7, #8]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	6a39      	ldr	r1, [r7, #32]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f9dc 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d107      	bne.n	8003e5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e005      	b.n	8003e6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5e:	893b      	ldrh	r3, [r7, #8]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	00010002 	.word	0x00010002

08003e78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	817b      	strh	r3, [r7, #10]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	813b      	strh	r3, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8c2 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed8:	d103      	bne.n	8003ee2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0aa      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee6:	897b      	ldrh	r3, [r7, #10]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ef4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	4952      	ldr	r1, [pc, #328]	; (8004044 <I2C_RequestMemoryRead+0x1cc>)
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f8fa 	bl	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e097      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f964 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d107      	bne.n	8003f4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e076      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d105      	bne.n	8003f60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f54:	893b      	ldrh	r3, [r7, #8]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	611a      	str	r2, [r3, #16]
 8003f5e:	e021      	b.n	8003fa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f60:	893b      	ldrh	r3, [r7, #8]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	6a39      	ldr	r1, [r7, #32]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f93e 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d107      	bne.n	8003f96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e050      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9a:	893b      	ldrh	r3, [r7, #8]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	6a39      	ldr	r1, [r7, #32]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f923 	bl	80041f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d107      	bne.n	8003fcc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e035      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f82b 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004006:	d103      	bne.n	8004010 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e013      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004014:	897b      	ldrh	r3, [r7, #10]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	4906      	ldr	r1, [pc, #24]	; (8004044 <I2C_RequestMemoryRead+0x1cc>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f863 	bl	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	00010002 	.word	0x00010002

08004048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004058:	e025      	b.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d021      	beq.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004062:	f7fe fe15 	bl	8002c90 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d116      	bne.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e023      	b.n	80040ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10d      	bne.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	43da      	mvns	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	e00c      	b.n	80040e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	43da      	mvns	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d0b6      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004104:	e051      	b.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004114:	d123      	bne.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800412e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e046      	b.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d021      	beq.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7fe fd93 	bl	8002c90 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d116      	bne.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f043 0220 	orr.w	r2, r3, #32
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e020      	b.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d10c      	bne.n	80041ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	43da      	mvns	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bf14      	ite	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	2300      	moveq	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	e00b      	b.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	43da      	mvns	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4013      	ands	r3, r2
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d18d      	bne.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004200:	e02d      	b.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f8ce 	bl	80043a4 <I2C_IsAcknowledgeFailed>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e02d      	b.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d021      	beq.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421a:	f7fe fd39 	bl	8002c90 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d116      	bne.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e007      	b.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b80      	cmp	r3, #128	; 0x80
 800426a:	d1ca      	bne.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004282:	e02d      	b.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f88d 	bl	80043a4 <I2C_IsAcknowledgeFailed>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e02d      	b.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d021      	beq.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429c:	f7fe fcf8 	bl	8002c90 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d116      	bne.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d1ca      	bne.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004304:	e042      	b.n	800438c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b10      	cmp	r3, #16
 8004312:	d119      	bne.n	8004348 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0210 	mvn.w	r2, #16
 800431c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e029      	b.n	800439c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7fe fca2 	bl	8002c90 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d116      	bne.n	800438c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d1b5      	bne.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d11b      	bne.n	80043f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e272      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8087 	beq.w	800452e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004420:	4b92      	ldr	r3, [pc, #584]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b04      	cmp	r3, #4
 800442a:	d00c      	beq.n	8004446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800442c:	4b8f      	ldr	r3, [pc, #572]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d112      	bne.n	800445e <HAL_RCC_OscConfig+0x5e>
 8004438:	4b8c      	ldr	r3, [pc, #560]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d10b      	bne.n	800445e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004446:	4b89      	ldr	r3, [pc, #548]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d06c      	beq.n	800452c <HAL_RCC_OscConfig+0x12c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d168      	bne.n	800452c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e24c      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x76>
 8004468:	4b80      	ldr	r3, [pc, #512]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a7f      	ldr	r2, [pc, #508]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800446e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e02e      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x98>
 800447e:	4b7b      	ldr	r3, [pc, #492]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7a      	ldr	r2, [pc, #488]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b78      	ldr	r3, [pc, #480]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a77      	ldr	r2, [pc, #476]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e01d      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0xbc>
 80044a2:	4b72      	ldr	r3, [pc, #456]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a71      	ldr	r2, [pc, #452]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b6f      	ldr	r3, [pc, #444]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a6e      	ldr	r2, [pc, #440]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e00b      	b.n	80044d4 <HAL_RCC_OscConfig+0xd4>
 80044bc:	4b6b      	ldr	r3, [pc, #428]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6a      	ldr	r2, [pc, #424]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b68      	ldr	r3, [pc, #416]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a67      	ldr	r2, [pc, #412]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d013      	beq.n	8004504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe fbd8 	bl	8002c90 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fe fbd4 	bl	8002c90 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e200      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b5d      	ldr	r3, [pc, #372]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0xe4>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fe fbc4 	bl	8002c90 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450c:	f7fe fbc0 	bl	8002c90 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e1ec      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x10c>
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d063      	beq.n	8004602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800453a:	4b4c      	ldr	r3, [pc, #304]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004546:	4b49      	ldr	r3, [pc, #292]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b08      	cmp	r3, #8
 8004550:	d11c      	bne.n	800458c <HAL_RCC_OscConfig+0x18c>
 8004552:	4b46      	ldr	r3, [pc, #280]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d116      	bne.n	800458c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455e:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_RCC_OscConfig+0x176>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d001      	beq.n	8004576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e1c0      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004576:	4b3d      	ldr	r3, [pc, #244]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4939      	ldr	r1, [pc, #228]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458a:	e03a      	b.n	8004602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d020      	beq.n	80045d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004594:	4b36      	ldr	r3, [pc, #216]	; (8004670 <HAL_RCC_OscConfig+0x270>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fe fb79 	bl	8002c90 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a2:	f7fe fb75 	bl	8002c90 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e1a1      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c0:	4b2a      	ldr	r3, [pc, #168]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4927      	ldr	r1, [pc, #156]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	600b      	str	r3, [r1, #0]
 80045d4:	e015      	b.n	8004602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d6:	4b26      	ldr	r3, [pc, #152]	; (8004670 <HAL_RCC_OscConfig+0x270>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fe fb58 	bl	8002c90 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fe fb54 	bl	8002c90 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e180      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d03a      	beq.n	8004684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d019      	beq.n	800464a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461c:	f7fe fb38 	bl	8002c90 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004624:	f7fe fb34 	bl	8002c90 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e160      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <HAL_RCC_OscConfig+0x26c>)
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004642:	2001      	movs	r0, #1
 8004644:	f000 fad8 	bl	8004bf8 <RCC_Delay>
 8004648:	e01c      	b.n	8004684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004650:	f7fe fb1e 	bl	8002c90 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004656:	e00f      	b.n	8004678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004658:	f7fe fb1a 	bl	8002c90 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d908      	bls.n	8004678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e146      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	42420000 	.word	0x42420000
 8004674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b92      	ldr	r3, [pc, #584]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e9      	bne.n	8004658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a6 	beq.w	80047de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b8b      	ldr	r3, [pc, #556]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	4b88      	ldr	r3, [pc, #544]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	4a87      	ldr	r2, [pc, #540]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	61d3      	str	r3, [r2, #28]
 80046ae:	4b85      	ldr	r3, [pc, #532]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b82      	ldr	r3, [pc, #520]	; (80048c8 <HAL_RCC_OscConfig+0x4c8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d118      	bne.n	80046fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ca:	4b7f      	ldr	r3, [pc, #508]	; (80048c8 <HAL_RCC_OscConfig+0x4c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a7e      	ldr	r2, [pc, #504]	; (80048c8 <HAL_RCC_OscConfig+0x4c8>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fe fadb 	bl	8002c90 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fe fad7 	bl	8002c90 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	; 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e103      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	4b75      	ldr	r3, [pc, #468]	; (80048c8 <HAL_RCC_OscConfig+0x4c8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x312>
 8004704:	4b6f      	ldr	r3, [pc, #444]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	4a6e      	ldr	r2, [pc, #440]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6213      	str	r3, [r2, #32]
 8004710:	e02d      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0x334>
 800471a:	4b6a      	ldr	r3, [pc, #424]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	4a69      	ldr	r2, [pc, #420]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	6213      	str	r3, [r2, #32]
 8004726:	4b67      	ldr	r3, [pc, #412]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4a66      	ldr	r2, [pc, #408]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	6213      	str	r3, [r2, #32]
 8004732:	e01c      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b05      	cmp	r3, #5
 800473a:	d10c      	bne.n	8004756 <HAL_RCC_OscConfig+0x356>
 800473c:	4b61      	ldr	r3, [pc, #388]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	4a60      	ldr	r2, [pc, #384]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004742:	f043 0304 	orr.w	r3, r3, #4
 8004746:	6213      	str	r3, [r2, #32]
 8004748:	4b5e      	ldr	r3, [pc, #376]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4a5d      	ldr	r2, [pc, #372]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6213      	str	r3, [r2, #32]
 8004754:	e00b      	b.n	800476e <HAL_RCC_OscConfig+0x36e>
 8004756:	4b5b      	ldr	r3, [pc, #364]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4a5a      	ldr	r2, [pc, #360]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	6213      	str	r3, [r2, #32]
 8004762:	4b58      	ldr	r3, [pc, #352]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4a57      	ldr	r2, [pc, #348]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	f023 0304 	bic.w	r3, r3, #4
 800476c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d015      	beq.n	80047a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004776:	f7fe fa8b 	bl	8002c90 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fe fa87 	bl	8002c90 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	f241 3288 	movw	r2, #5000	; 0x1388
 800478c:	4293      	cmp	r3, r2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e0b1      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004794:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ee      	beq.n	800477e <HAL_RCC_OscConfig+0x37e>
 80047a0:	e014      	b.n	80047cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a2:	f7fe fa75 	bl	8002c90 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fe fa71 	bl	8002c90 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e09b      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c0:	4b40      	ldr	r3, [pc, #256]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ee      	bne.n	80047aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d2:	4b3c      	ldr	r3, [pc, #240]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	4a3b      	ldr	r2, [pc, #236]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8087 	beq.w	80048f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e8:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d061      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d146      	bne.n	800488a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b33      	ldr	r3, [pc, #204]	; (80048cc <HAL_RCC_OscConfig+0x4cc>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fe fa45 	bl	8002c90 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe fa41 	bl	8002c90 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e06d      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481c:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d108      	bne.n	8004844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4921      	ldr	r1, [pc, #132]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004844:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a19      	ldr	r1, [r3, #32]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	430b      	orrs	r3, r1
 8004856:	491b      	ldr	r1, [pc, #108]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_RCC_OscConfig+0x4cc>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fe fa15 	bl	8002c90 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486a:	f7fe fa11 	bl	8002c90 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e03d      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800487c:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x46a>
 8004888:	e035      	b.n	80048f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_RCC_OscConfig+0x4cc>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fe f9fe 	bl	8002c90 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fe f9fa 	bl	8002c90 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e026      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x498>
 80048b6:	e01e      	b.n	80048f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e019      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40007000 	.word	0x40007000
 80048cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x500>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d106      	bne.n	80048f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d001      	beq.n	80048f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000

08004904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0d0      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4b6a      	ldr	r3, [pc, #424]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d910      	bls.n	8004948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b67      	ldr	r3, [pc, #412]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 0207 	bic.w	r2, r3, #7
 800492e:	4965      	ldr	r1, [pc, #404]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b63      	ldr	r3, [pc, #396]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b8      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004960:	4b59      	ldr	r3, [pc, #356]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a58      	ldr	r2, [pc, #352]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800496a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004978:	4b53      	ldr	r3, [pc, #332]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a52      	ldr	r2, [pc, #328]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	494d      	ldr	r1, [pc, #308]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d040      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d115      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d107      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c2:	4b41      	ldr	r3, [pc, #260]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e073      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d2:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06b      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e2:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f023 0203 	bic.w	r2, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	4936      	ldr	r1, [pc, #216]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f4:	f7fe f94c 	bl	8002c90 <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fc:	f7fe f948 	bl	8002c90 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e053      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 020c 	and.w	r2, r3, #12
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1eb      	bne.n	80049fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d210      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 0207 	bic.w	r2, r3, #7
 8004a3a:	4922      	ldr	r1, [pc, #136]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e032      	b.n	8004aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4916      	ldr	r1, [pc, #88]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	490a      	ldr	r1, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe f8aa 	bl	8002c0c <HAL_InitTick>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40022000 	.word	0x40022000
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	08006738 	.word	0x08006738
 8004ad0:	20000064 	.word	0x20000064
 8004ad4:	20000068 	.word	0x20000068

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	b490      	push	{r4, r7}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ade:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ae0:	1d3c      	adds	r4, r7, #4
 8004ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ae8:	f240 2301 	movw	r3, #513	; 0x201
 8004aec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b02:	4b21      	ldr	r3, [pc, #132]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d002      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x40>
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d003      	beq.n	8004b1e <HAL_RCC_GetSysClockFreq+0x46>
 8004b16:	e02b      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b18:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b1a:	623b      	str	r3, [r7, #32]
      break;
 8004b1c:	e02b      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	0c9b      	lsrs	r3, r3, #18
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	3328      	adds	r3, #40	; 0x28
 8004b28:	443b      	add	r3, r7
 8004b2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d012      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	0c5b      	lsrs	r3, r3, #17
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	3328      	adds	r3, #40	; 0x28
 8004b46:	443b      	add	r3, r7
 8004b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b52:	fb03 f202 	mul.w	r2, r3, r2
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	e004      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	623b      	str	r3, [r7, #32]
      break;
 8004b6e:	e002      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b72:	623b      	str	r3, [r7, #32]
      break;
 8004b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b76:	6a3b      	ldr	r3, [r7, #32]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	; 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc90      	pop	{r4, r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	08006728 	.word	0x08006728
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	007a1200 	.word	0x007a1200
 8004b90:	003d0900 	.word	0x003d0900

08004b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b02      	ldr	r3, [pc, #8]	; (8004ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	20000064 	.word	0x20000064

08004ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bac:	f7ff fff2 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	4903      	ldr	r1, [pc, #12]	; (8004bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	08006748 	.word	0x08006748

08004bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bd4:	f7ff ffde 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	0adb      	lsrs	r3, r3, #11
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	4903      	ldr	r1, [pc, #12]	; (8004bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	08006748 	.word	0x08006748

08004bf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <RCC_Delay+0x34>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <RCC_Delay+0x38>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	0a5b      	lsrs	r3, r3, #9
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c14:	bf00      	nop
  }
  while (Delay --);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1e5a      	subs	r2, r3, #1
 8004c1a:	60fa      	str	r2, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f9      	bne.n	8004c14 <RCC_Delay+0x1c>
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	20000064 	.word	0x20000064
 8004c30:	10624dd3 	.word	0x10624dd3

08004c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e041      	b.n	8004cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fd fe00 	bl	8002860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fc56 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d001      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e03a      	b.n	8004d62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIM_Base_Start_IT+0x98>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x58>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x58>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x58>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d111      	bne.n	8004d50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d010      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e007      	b.n	8004d60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800

08004d78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_TIM_Base_Stop_IT+0x48>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	f240 4344 	movw	r3, #1092	; 0x444
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_Base_Stop_IT+0x48>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e041      	b.n	8004e6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f839 	bl	8004e72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f000 fb86 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x24>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e022      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d109      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x3e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e015      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start+0x58>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e008      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e05e      	b.n	8004fb4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x82>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f04:	e013      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_PWM_Start+0x92>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0xa2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	e003      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2201      	movs	r2, #1
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fd74 	bl	8005a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <HAL_TIM_PWM_Start+0x138>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d107      	bne.n	8004f56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_TIM_PWM_Start+0x138>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_TIM_PWM_Start+0xfa>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d009      	beq.n	8004f7e <HAL_TIM_PWM_Start+0xfa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <HAL_TIM_PWM_Start+0x13c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_TIM_PWM_Start+0xfa>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <HAL_TIM_PWM_Start+0x140>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d111      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b06      	cmp	r3, #6
 8004f8e:	d010      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa0:	e007      	b.n	8004fb2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800

08004fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0202 	mvn.w	r2, #2
 8004ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa6f 	bl	80054ee <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa62 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fa71 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0204 	mvn.w	r2, #4
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa45 	bl	80054ee <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa38 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fa47 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b08      	cmp	r3, #8
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b08      	cmp	r3, #8
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0208 	mvn.w	r2, #8
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2204      	movs	r2, #4
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa1b 	bl	80054ee <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa0e 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fa1d 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d122      	bne.n	8005120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0210 	mvn.w	r2, #16
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2208      	movs	r2, #8
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f9f1 	bl	80054ee <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9e4 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f9f3 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d10e      	bne.n	800514c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d107      	bne.n	800514c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0201 	mvn.w	r2, #1
 8005144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc fa9e 	bl	8001688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b80      	cmp	r3, #128	; 0x80
 8005158:	d10e      	bne.n	8005178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005164:	2b80      	cmp	r3, #128	; 0x80
 8005166:	d107      	bne.n	8005178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fd32 	bl	8005bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d10e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	d107      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f9b7 	bl	8005512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d10e      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d107      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0220 	mvn.w	r2, #32
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fcfd 	bl	8005bca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e0ac      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x174>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	f200 809f 	bhi.w	8005340 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	0800523d 	.word	0x0800523d
 800520c:	08005341 	.word	0x08005341
 8005210:	08005341 	.word	0x08005341
 8005214:	08005341 	.word	0x08005341
 8005218:	0800527d 	.word	0x0800527d
 800521c:	08005341 	.word	0x08005341
 8005220:	08005341 	.word	0x08005341
 8005224:	08005341 	.word	0x08005341
 8005228:	080052bf 	.word	0x080052bf
 800522c:	08005341 	.word	0x08005341
 8005230:	08005341 	.word	0x08005341
 8005234:	08005341 	.word	0x08005341
 8005238:	080052ff 	.word	0x080052ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f9d0 	bl	80055e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0208 	orr.w	r2, r2, #8
 8005256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0204 	bic.w	r2, r2, #4
 8005266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6999      	ldr	r1, [r3, #24]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	619a      	str	r2, [r3, #24]
      break;
 800527a:	e062      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fa16 	bl	80056b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6999      	ldr	r1, [r3, #24]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	021a      	lsls	r2, r3, #8
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	619a      	str	r2, [r3, #24]
      break;
 80052bc:	e041      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fa5f 	bl	8005788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0208 	orr.w	r2, r2, #8
 80052d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0204 	bic.w	r2, r2, #4
 80052e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69d9      	ldr	r1, [r3, #28]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	61da      	str	r2, [r3, #28]
      break;
 80052fc:	e021      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	4618      	mov	r0, r3
 8005306:	f000 faa9 	bl	800585c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69d9      	ldr	r1, [r3, #28]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	021a      	lsls	r2, r3, #8
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	61da      	str	r2, [r3, #28]
      break;
 800533e:	e000      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005340:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIM_ConfigClockSource+0x18>
 8005368:	2302      	movs	r3, #2
 800536a:	e0b3      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x180>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800538a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005392:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a4:	d03e      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0xd0>
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053aa:	f200 8087 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x168>
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	f000 8085 	beq.w	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	d87f      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x168>
 80053bc:	2b70      	cmp	r3, #112	; 0x70
 80053be:	d01a      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0xa2>
 80053c0:	2b70      	cmp	r3, #112	; 0x70
 80053c2:	d87b      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x168>
 80053c4:	2b60      	cmp	r3, #96	; 0x60
 80053c6:	d050      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x116>
 80053c8:	2b60      	cmp	r3, #96	; 0x60
 80053ca:	d877      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x168>
 80053cc:	2b50      	cmp	r3, #80	; 0x50
 80053ce:	d03c      	beq.n	800544a <HAL_TIM_ConfigClockSource+0xf6>
 80053d0:	2b50      	cmp	r3, #80	; 0x50
 80053d2:	d873      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x168>
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d058      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x136>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d86f      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x168>
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d064      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x156>
 80053e0:	2b30      	cmp	r3, #48	; 0x30
 80053e2:	d86b      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x168>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d060      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x156>
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d867      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x168>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d05c      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x156>
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d05a      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053f4:	e062      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6899      	ldr	r1, [r3, #8]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f000 faee 	bl	80059e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005418:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	609a      	str	r2, [r3, #8]
      break;
 8005422:	e04e      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6899      	ldr	r1, [r3, #8]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f000 fad7 	bl	80059e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005446:	609a      	str	r2, [r3, #8]
      break;
 8005448:	e03b      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	461a      	mov	r2, r3
 8005458:	f000 fa4e 	bl	80058f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2150      	movs	r1, #80	; 0x50
 8005462:	4618      	mov	r0, r3
 8005464:	f000 faa5 	bl	80059b2 <TIM_ITRx_SetConfig>
      break;
 8005468:	e02b      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	461a      	mov	r2, r3
 8005478:	f000 fa6c 	bl	8005954 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2160      	movs	r1, #96	; 0x60
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fa95 	bl	80059b2 <TIM_ITRx_SetConfig>
      break;
 8005488:	e01b      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	461a      	mov	r2, r3
 8005498:	f000 fa2e 	bl	80058f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fa85 	bl	80059b2 <TIM_ITRx_SetConfig>
      break;
 80054a8:	e00b      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f000 fa7c 	bl	80059b2 <TIM_ITRx_SetConfig>
        break;
 80054ba:	e002      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a29      	ldr	r2, [pc, #164]	; (80055dc <TIM_Base_SetConfig+0xb8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00b      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005542:	d007      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a26      	ldr	r2, [pc, #152]	; (80055e0 <TIM_Base_SetConfig+0xbc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <TIM_Base_SetConfig+0xc0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d108      	bne.n	8005566 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <TIM_Base_SetConfig+0xb8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <TIM_Base_SetConfig+0xbc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <TIM_Base_SetConfig+0xc0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a07      	ldr	r2, [pc, #28]	; (80055dc <TIM_Base_SetConfig+0xb8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	615a      	str	r2, [r3, #20]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800

080055e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 0302 	bic.w	r3, r3, #2
 8005630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <TIM_OC1_SetConfig+0xc8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10c      	bne.n	800565e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0308 	bic.w	r3, r3, #8
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 0304 	bic.w	r3, r3, #4
 800565c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <TIM_OC1_SetConfig+0xc8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d111      	bne.n	800568a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800566c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40012c00 	.word	0x40012c00

080056b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0210 	bic.w	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 0320 	bic.w	r3, r3, #32
 80056fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <TIM_OC2_SetConfig+0xd0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d10d      	bne.n	8005730 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a14      	ldr	r2, [pc, #80]	; (8005784 <TIM_OC2_SetConfig+0xd0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d113      	bne.n	8005760 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800573e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	40012c00 	.word	0x40012c00

08005788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <TIM_OC3_SetConfig+0xd0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10d      	bne.n	8005802 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a14      	ldr	r2, [pc, #80]	; (8005858 <TIM_OC3_SetConfig+0xd0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d113      	bne.n	8005832 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	621a      	str	r2, [r3, #32]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00

0800585c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	031b      	lsls	r3, r3, #12
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a0f      	ldr	r2, [pc, #60]	; (80058f4 <TIM_OC4_SetConfig+0x98>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d109      	bne.n	80058d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	019b      	lsls	r3, r3, #6
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	40012c00 	.word	0x40012c00

080058f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 030a 	bic.w	r3, r3, #10
 8005934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f023 0210 	bic.w	r2, r3, #16
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800597e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	031b      	lsls	r3, r3, #12
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005990:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f043 0307 	orr.w	r3, r3, #7
 80059d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b087      	sub	sp, #28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	021a      	lsls	r2, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	609a      	str	r2, [r3, #8]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	2201      	movs	r2, #1
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1a      	ldr	r2, [r3, #32]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	401a      	ands	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1a      	ldr	r2, [r3, #32]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	621a      	str	r2, [r3, #32]
}
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e046      	b.n	8005b12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d009      	beq.n	8005ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a10      	ldr	r2, [pc, #64]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d10c      	bne.n	8005b00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800

08005b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e03d      	b.n	8005bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e03f      	b.n	8005c80 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fc ff5b 	bl	8002ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2224      	movs	r2, #36	; 0x24
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fc84 	bl	8006540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d17c      	bne.n	8005da2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_UART_Transmit+0x2c>
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e075      	b.n	8005da4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Transmit+0x3e>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e06e      	b.n	8005da4 <HAL_UART_Transmit+0x11c>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2221      	movs	r2, #33	; 0x21
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cdc:	f7fc ffd8 	bl	8002c90 <HAL_GetTick>
 8005ce0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf6:	d108      	bne.n	8005d0a <HAL_UART_Transmit+0x82>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	e003      	b.n	8005d12 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d1a:	e02a      	b.n	8005d72 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2200      	movs	r2, #0
 8005d24:	2180      	movs	r1, #128	; 0x80
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fa37 	bl	800619a <UART_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e036      	b.n	8005da4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	3302      	adds	r3, #2
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	e007      	b.n	8005d64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	781a      	ldrb	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3301      	adds	r3, #1
 8005d62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1cf      	bne.n	8005d1c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2200      	movs	r2, #0
 8005d84:	2140      	movs	r1, #64	; 0x40
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fa07 	bl	800619a <UART_WaitOnFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e006      	b.n	8005da4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d11d      	bne.n	8005e02 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_UART_Receive_IT+0x26>
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e016      	b.n	8005e04 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_UART_Receive_IT+0x38>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e00f      	b.n	8005e04 <HAL_UART_Receive_IT+0x58>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	461a      	mov	r2, r3
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fa18 	bl	800622e <UART_Start_Receive_IT>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	e000      	b.n	8005e04 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
  }
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10d      	bne.n	8005e5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_UART_IRQHandler+0x52>
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fac9 	bl	80063ee <UART_Receive_IT>
      return;
 8005e5c:	e17b      	b.n	8006156 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80b1 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x1bc>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <HAL_UART_IRQHandler+0x70>
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80a6 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_UART_IRQHandler+0x90>
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_UART_IRQHandler+0xb0>
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	f043 0202 	orr.w	r2, r3, #2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <HAL_UART_IRQHandler+0xd0>
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f043 0204 	orr.w	r2, r3, #4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00f      	beq.n	8005f06 <HAL_UART_IRQHandler+0xfa>
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <HAL_UART_IRQHandler+0xee>
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0208 	orr.w	r2, r3, #8
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 811e 	beq.w	800614c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <HAL_UART_IRQHandler+0x11e>
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fa62 	bl	80063ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <HAL_UART_IRQHandler+0x146>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d031      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f9a4 	bl	80062a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d023      	beq.n	8005fae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695a      	ldr	r2, [r3, #20]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d013      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	4a76      	ldr	r2, [pc, #472]	; (800615c <HAL_UART_IRQHandler+0x350>)
 8005f84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fc fff6 	bl	8002f7c <HAL_DMA_Abort_IT>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	e00e      	b.n	8005fc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f8e3 	bl	8006172 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	e00a      	b.n	8005fc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8df 	bl	8006172 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	e006      	b.n	8005fc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f8db 	bl	8006172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fc2:	e0c3      	b.n	800614c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	bf00      	nop
    return;
 8005fc6:	e0c1      	b.n	800614c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	f040 80a1 	bne.w	8006114 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 809b 	beq.w	8006114 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8095 	beq.w	8006114 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04e      	beq.n	80060ac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006018:	8a3b      	ldrh	r3, [r7, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8098 	beq.w	8006150 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006024:	8a3a      	ldrh	r2, [r7, #16]
 8006026:	429a      	cmp	r2, r3
 8006028:	f080 8092 	bcs.w	8006150 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8a3a      	ldrh	r2, [r7, #16]
 8006030:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b20      	cmp	r3, #32
 800603a:	d02b      	beq.n	8006094 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800604a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0201 	bic.w	r2, r2, #1
 800605a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800606a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0210 	bic.w	r2, r2, #16
 8006088:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	4618      	mov	r0, r3
 8006090:	f7fc ff39 	bl	8002f06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800609c:	b29b      	uxth	r3, r3
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f86d 	bl	8006184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060aa:	e051      	b.n	8006150 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d047      	beq.n	8006154 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80060c4:	8a7b      	ldrh	r3, [r7, #18]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d044      	beq.n	8006154 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060d8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0210 	bic.w	r2, r2, #16
 8006106:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006108:	8a7b      	ldrh	r3, [r7, #18]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f839 	bl	8006184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006112:	e01f      	b.n	8006154 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <HAL_UART_IRQHandler+0x324>
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8f9 	bl	8006320 <UART_Transmit_IT>
    return;
 800612e:	e012      	b.n	8006156 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <HAL_UART_IRQHandler+0x34a>
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f93a 	bl	80063be <UART_EndTransmit_IT>
    return;
 800614a:	e004      	b.n	8006156 <HAL_UART_IRQHandler+0x34a>
    return;
 800614c:	bf00      	nop
 800614e:	e002      	b.n	8006156 <HAL_UART_IRQHandler+0x34a>
      return;
 8006150:	bf00      	nop
 8006152:	e000      	b.n	8006156 <HAL_UART_IRQHandler+0x34a>
      return;
 8006154:	bf00      	nop
  }
}
 8006156:	3728      	adds	r7, #40	; 0x28
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	080062f9 	.word	0x080062f9

08006160 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr

08006172 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr

08006184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr

0800619a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	4613      	mov	r3, r2
 80061a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061aa:	e02c      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d028      	beq.n	8006206 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0x30>
 80061ba:	f7fc fd69 	bl	8002c90 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d21d      	bcs.n	8006206 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061d8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e00f      	b.n	8006226 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	bf0c      	ite	eq
 8006216:	2301      	moveq	r3, #1
 8006218:	2300      	movne	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	429a      	cmp	r2, r3
 8006222:	d0c3      	beq.n	80061ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	4613      	mov	r3, r2
 800623a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	88fa      	ldrh	r2, [r7, #6]
 800624c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2222      	movs	r2, #34	; 0x22
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006272:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0220 	orr.w	r2, r2, #32
 8006292:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d107      	bne.n	80062e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0210 	bic.w	r2, r2, #16
 80062de:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ff2d 	bl	8006172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b21      	cmp	r3, #33	; 0x21
 8006332:	d13e      	bne.n	80063b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633c:	d114      	bne.n	8006368 <UART_Transmit_IT+0x48>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d110      	bne.n	8006368 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800635a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	621a      	str	r2, [r3, #32]
 8006366:	e008      	b.n	800637a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6211      	str	r1, [r2, #32]
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29b      	uxth	r3, r3
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4619      	mov	r1, r3
 8006388:	84d1      	strh	r1, [r2, #38]	; 0x26
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10f      	bne.n	80063ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800639c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
  }
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr

080063be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff febe 	bl	8006160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b086      	sub	sp, #24
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b22      	cmp	r3, #34	; 0x22
 8006400:	f040 8099 	bne.w	8006536 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d117      	bne.n	800643e <UART_Receive_IT+0x50>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d113      	bne.n	800643e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	b29a      	uxth	r2, r3
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
 800643c:	e026      	b.n	800648c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d007      	beq.n	8006462 <UART_Receive_IT+0x74>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <UART_Receive_IT+0x82>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e008      	b.n	8006482 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	b2da      	uxtb	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4619      	mov	r1, r3
 800649a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800649c:	2b00      	cmp	r3, #0
 800649e:	d148      	bne.n	8006532 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0220 	bic.w	r2, r2, #32
 80064ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0201 	bic.w	r2, r2, #1
 80064ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d123      	bne.n	8006528 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0210 	bic.w	r2, r2, #16
 80064f4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b10      	cmp	r3, #16
 8006502:	d10a      	bne.n	800651a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff fe2f 	bl	8006184 <HAL_UARTEx_RxEventCallback>
 8006526:	e002      	b.n	800652e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fb f971 	bl	8001810 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e002      	b.n	8006538 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	e000      	b.n	8006538 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006536:	2302      	movs	r3, #2
  }
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800657a:	f023 030c 	bic.w	r3, r3, #12
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	430b      	orrs	r3, r1
 8006586:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a2c      	ldr	r2, [pc, #176]	; (8006654 <UART_SetConfig+0x114>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d103      	bne.n	80065b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065a8:	f7fe fb12 	bl	8004bd0 <HAL_RCC_GetPCLK2Freq>
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	e002      	b.n	80065b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065b0:	f7fe fafa 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 80065b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009a      	lsls	r2, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	4a22      	ldr	r2, [pc, #136]	; (8006658 <UART_SetConfig+0x118>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	0119      	lsls	r1, r3, #4
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009a      	lsls	r2, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065ec:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <UART_SetConfig+0x118>)
 80065ee:	fba3 0302 	umull	r0, r3, r3, r2
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	2064      	movs	r0, #100	; 0x64
 80065f6:	fb00 f303 	mul.w	r3, r0, r3
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	3332      	adds	r3, #50	; 0x32
 8006600:	4a15      	ldr	r2, [pc, #84]	; (8006658 <UART_SetConfig+0x118>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800660c:	4419      	add	r1, r3
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009a      	lsls	r2, r3, #2
 8006618:	441a      	add	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	fbb2 f2f3 	udiv	r2, r2, r3
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <UART_SetConfig+0x118>)
 8006626:	fba3 0302 	umull	r0, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2064      	movs	r0, #100	; 0x64
 800662e:	fb00 f303 	mul.w	r3, r0, r3
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	3332      	adds	r3, #50	; 0x32
 8006638:	4a07      	ldr	r2, [pc, #28]	; (8006658 <UART_SetConfig+0x118>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	f003 020f 	and.w	r2, r3, #15
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	440a      	add	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40013800 	.word	0x40013800
 8006658:	51eb851f 	.word	0x51eb851f

0800665c <__libc_init_array>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	2600      	movs	r6, #0
 8006660:	4d0c      	ldr	r5, [pc, #48]	; (8006694 <__libc_init_array+0x38>)
 8006662:	4c0d      	ldr	r4, [pc, #52]	; (8006698 <__libc_init_array+0x3c>)
 8006664:	1b64      	subs	r4, r4, r5
 8006666:	10a4      	asrs	r4, r4, #2
 8006668:	42a6      	cmp	r6, r4
 800666a:	d109      	bne.n	8006680 <__libc_init_array+0x24>
 800666c:	f000 f822 	bl	80066b4 <_init>
 8006670:	2600      	movs	r6, #0
 8006672:	4d0a      	ldr	r5, [pc, #40]	; (800669c <__libc_init_array+0x40>)
 8006674:	4c0a      	ldr	r4, [pc, #40]	; (80066a0 <__libc_init_array+0x44>)
 8006676:	1b64      	subs	r4, r4, r5
 8006678:	10a4      	asrs	r4, r4, #2
 800667a:	42a6      	cmp	r6, r4
 800667c:	d105      	bne.n	800668a <__libc_init_array+0x2e>
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	f855 3b04 	ldr.w	r3, [r5], #4
 8006684:	4798      	blx	r3
 8006686:	3601      	adds	r6, #1
 8006688:	e7ee      	b.n	8006668 <__libc_init_array+0xc>
 800668a:	f855 3b04 	ldr.w	r3, [r5], #4
 800668e:	4798      	blx	r3
 8006690:	3601      	adds	r6, #1
 8006692:	e7f2      	b.n	800667a <__libc_init_array+0x1e>
 8006694:	08006750 	.word	0x08006750
 8006698:	08006750 	.word	0x08006750
 800669c:	08006750 	.word	0x08006750
 80066a0:	08006754 	.word	0x08006754

080066a4 <memset>:
 80066a4:	4603      	mov	r3, r0
 80066a6:	4402      	add	r2, r0
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d100      	bne.n	80066ae <memset+0xa>
 80066ac:	4770      	bx	lr
 80066ae:	f803 1b01 	strb.w	r1, [r3], #1
 80066b2:	e7f9      	b.n	80066a8 <memset+0x4>

080066b4 <_init>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr

080066c0 <_fini>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	bf00      	nop
 80066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c6:	bc08      	pop	{r3}
 80066c8:	469e      	mov	lr, r3
 80066ca:	4770      	bx	lr
