
FINAL_CONFIGURATION_DIMMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f8c  08005f8c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f8c  08005f8c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f8c  08005f8c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  2000007c  08006010  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08006010  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f111  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002333  00000000  00000000  0002f1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00032488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f8  00000000  00000000  00033360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e46  00000000  00000000  0004ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089565  00000000  00000000  0005cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004184  00000000  00000000  000e6154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ef4 	.word	0x08005ef4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005ef4 	.word	0x08005ef4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0318 	add.w	r3, r7, #24
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000160:	4b74      	ldr	r3, [pc, #464]	; (8000334 <MX_GPIO_Init+0x1e8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a73      	ldr	r2, [pc, #460]	; (8000334 <MX_GPIO_Init+0x1e8>)
 8000166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b71      	ldr	r3, [pc, #452]	; (8000334 <MX_GPIO_Init+0x1e8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000174:	617b      	str	r3, [r7, #20]
 8000176:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b6e      	ldr	r3, [pc, #440]	; (8000334 <MX_GPIO_Init+0x1e8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a6d      	ldr	r2, [pc, #436]	; (8000334 <MX_GPIO_Init+0x1e8>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b6b      	ldr	r3, [pc, #428]	; (8000334 <MX_GPIO_Init+0x1e8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	613b      	str	r3, [r7, #16]
 800018e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000190:	4b68      	ldr	r3, [pc, #416]	; (8000334 <MX_GPIO_Init+0x1e8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a67      	ldr	r2, [pc, #412]	; (8000334 <MX_GPIO_Init+0x1e8>)
 8000196:	f043 0310 	orr.w	r3, r3, #16
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b65      	ldr	r3, [pc, #404]	; (8000334 <MX_GPIO_Init+0x1e8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0310 	and.w	r3, r3, #16
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b62      	ldr	r3, [pc, #392]	; (8000334 <MX_GPIO_Init+0x1e8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a61      	ldr	r2, [pc, #388]	; (8000334 <MX_GPIO_Init+0x1e8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b5f      	ldr	r3, [pc, #380]	; (8000334 <MX_GPIO_Init+0x1e8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	60bb      	str	r3, [r7, #8]
 80001be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c0:	4b5c      	ldr	r3, [pc, #368]	; (8000334 <MX_GPIO_Init+0x1e8>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a5b      	ldr	r2, [pc, #364]	; (8000334 <MX_GPIO_Init+0x1e8>)
 80001c6:	f043 0320 	orr.w	r3, r3, #32
 80001ca:	6193      	str	r3, [r2, #24]
 80001cc:	4b59      	ldr	r3, [pc, #356]	; (8000334 <MX_GPIO_Init+0x1e8>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	f003 0320 	and.w	r3, r3, #32
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RELAY2_Pin|RELAY5_Pin|RELAY6_Pin, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2170      	movs	r1, #112	; 0x70
 80001dc:	4856      	ldr	r0, [pc, #344]	; (8000338 <MX_GPIO_Init+0x1ec>)
 80001de:	f002 fcfe 	bl	8002bde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY4_Pin|RELAY3_Pin, GPIO_PIN_RESET);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2130      	movs	r1, #48	; 0x30
 80001e6:	4855      	ldr	r0, [pc, #340]	; (800033c <MX_GPIO_Init+0x1f0>)
 80001e8:	f002 fcf9 	bl	8002bde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY1_Pin|RELAY0_Pin, GPIO_PIN_RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2103      	movs	r1, #3
 80001f0:	4853      	ldr	r0, [pc, #332]	; (8000340 <MX_GPIO_Init+0x1f4>)
 80001f2:	f002 fcf4 	bl	8002bde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001fc:	4851      	ldr	r0, [pc, #324]	; (8000344 <MX_GPIO_Init+0x1f8>)
 80001fe:	f002 fcee 	bl	8002bde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2101      	movs	r1, #1
 8000206:	4850      	ldr	r0, [pc, #320]	; (8000348 <MX_GPIO_Init+0x1fc>)
 8000208:	f002 fce9 	bl	8002bde <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RELAY2_Pin|RELAY5_Pin|RELAY6_Pin;
 800020c:	2370      	movs	r3, #112	; 0x70
 800020e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000210:	2301      	movs	r3, #1
 8000212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000214:	2300      	movs	r3, #0
 8000216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000218:	2302      	movs	r3, #2
 800021a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	4619      	mov	r1, r3
 8000222:	4845      	ldr	r0, [pc, #276]	; (8000338 <MX_GPIO_Init+0x1ec>)
 8000224:	f002 fb40 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_PIN_Pin;
 8000228:	2301      	movs	r3, #1
 800022a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800022c:	4b47      	ldr	r3, [pc, #284]	; (800034c <MX_GPIO_Init+0x200>)
 800022e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INTERRUPT_PIN_GPIO_Port, &GPIO_InitStruct);
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4619      	mov	r1, r3
 800023a:	4842      	ldr	r0, [pc, #264]	; (8000344 <MX_GPIO_Init+0x1f8>)
 800023c:	f002 fb34 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY4_Pin|RELAY3_Pin;
 8000240:	2330      	movs	r3, #48	; 0x30
 8000242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2302      	movs	r3, #2
 800024e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4619      	mov	r1, r3
 8000256:	4839      	ldr	r0, [pc, #228]	; (800033c <MX_GPIO_Init+0x1f0>)
 8000258:	f002 fb26 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY1_Pin|RELAY0_Pin;
 800025c:	2303      	movs	r3, #3
 800025e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000260:	2301      	movs	r3, #1
 8000262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000264:	2300      	movs	r3, #0
 8000266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000268:	2302      	movs	r3, #2
 800026a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4619      	mov	r1, r3
 8000272:	4833      	ldr	r0, [pc, #204]	; (8000340 <MX_GPIO_Init+0x1f4>)
 8000274:	f002 fb18 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH9_Pin;
 8000278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800027c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800027e:	2300      	movs	r3, #0
 8000280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH9_GPIO_Port, &GPIO_InitStruct);
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	4619      	mov	r1, r3
 800028c:	482a      	ldr	r0, [pc, #168]	; (8000338 <MX_GPIO_Init+0x1ec>)
 800028e:	f002 fb0b 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = TOUCH1_Pin|TOUCH10_Pin;
 8000292:	f240 4301 	movw	r3, #1025	; 0x401
 8000296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000298:	2300      	movs	r3, #0
 800029a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800029c:	2302      	movs	r3, #2
 800029e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4619      	mov	r1, r3
 80002a6:	4824      	ldr	r0, [pc, #144]	; (8000338 <MX_GPIO_Init+0x1ec>)
 80002a8:	f002 fafe 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH3_Pin|TOUCH5_Pin|TOUCH0_Pin|TOUCH2_Pin;
 80002ac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002b6:	2302      	movs	r3, #2
 80002b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	4619      	mov	r1, r3
 80002c0:	481f      	ldr	r0, [pc, #124]	; (8000340 <MX_GPIO_Init+0x1f4>)
 80002c2:	f002 faf1 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TOUCH4_Pin|DIMMER_UP_Pin|DIMMERDOWN_Pin|TOUCH6_Pin;
 80002c6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80002ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002d0:	2302      	movs	r3, #2
 80002d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4619      	mov	r1, r3
 80002da:	481b      	ldr	r0, [pc, #108]	; (8000348 <MX_GPIO_Init+0x1fc>)
 80002dc:	f002 fae4 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIMMER_Pin;
 80002e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e6:	2301      	movs	r3, #1
 80002e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ee:	2302      	movs	r3, #2
 80002f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DIMMER_GPIO_Port, &GPIO_InitStruct);
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	4619      	mov	r1, r3
 80002f8:	4812      	ldr	r0, [pc, #72]	; (8000344 <MX_GPIO_Init+0x1f8>)
 80002fa:	f002 fad5 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 80002fe:	2301      	movs	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2302      	movs	r3, #2
 800030c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	4619      	mov	r1, r3
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <MX_GPIO_Init+0x1fc>)
 8000316:	f002 fac7 	bl	80028a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	2006      	movs	r0, #6
 8000320:	f002 f9db 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000324:	2006      	movs	r0, #6
 8000326:	f002 f9f4 	bl	8002712 <HAL_NVIC_EnableIRQ>

}
 800032a:	bf00      	nop
 800032c:	3728      	adds	r7, #40	; 0x28
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000
 8000338:	40011800 	.word	0x40011800
 800033c:	40011000 	.word	0x40011000
 8000340:	40010c00 	.word	0x40010c00
 8000344:	40010800 	.word	0x40010800
 8000348:	40011400 	.word	0x40011400
 800034c:	10110000 	.word	0x10110000

08000350 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_I2C1_Init+0x50>)
 8000356:	4a13      	ldr	r2, [pc, #76]	; (80003a4 <MX_I2C1_Init+0x54>)
 8000358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_I2C1_Init+0x50>)
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <MX_I2C1_Init+0x58>)
 800035e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_I2C1_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_I2C1_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_I2C1_Init+0x50>)
 800036e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <MX_I2C1_Init+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_I2C1_Init+0x50>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <MX_I2C1_Init+0x50>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_I2C1_Init+0x50>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <MX_I2C1_Init+0x50>)
 800038e:	f002 fc57 	bl	8002c40 <HAL_I2C_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000398:	f001 fbc6 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000098 	.word	0x20000098
 80003a4:	40005400 	.word	0x40005400
 80003a8:	000186a0 	.word	0x000186a0

080003ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <HAL_I2C_MspInit+0x70>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d123      	bne.n	8000414 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <HAL_I2C_MspInit+0x74>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a13      	ldr	r2, [pc, #76]	; (8000420 <HAL_I2C_MspInit+0x74>)
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <HAL_I2C_MspInit+0x74>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003e4:	23c0      	movs	r3, #192	; 0xc0
 80003e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003e8:	2312      	movs	r3, #18
 80003ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ec:	2303      	movs	r3, #3
 80003ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	480b      	ldr	r0, [pc, #44]	; (8000424 <HAL_I2C_MspInit+0x78>)
 80003f8:	f002 fa56 	bl	80028a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <HAL_I2C_MspInit+0x74>)
 80003fe:	69db      	ldr	r3, [r3, #28]
 8000400:	4a07      	ldr	r2, [pc, #28]	; (8000420 <HAL_I2C_MspInit+0x74>)
 8000402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000406:	61d3      	str	r3, [r2, #28]
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HAL_I2C_MspInit+0x74>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40005400 	.word	0x40005400
 8000420:	40021000 	.word	0x40021000
 8000424:	40010c00 	.word	0x40010c00

08000428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042e:	f001 fff7 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000432:	f000 f8ab 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000436:	f7ff fe89 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 800043a:	f001 fbf5 	bl	8001c28 <MX_TIM1_Init>
  MX_TIM3_Init();
 800043e:	f001 fd03 	bl	8001e48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000442:	f001 fd97 	bl	8001f74 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000446:	f001 ff39 	bl	80022bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800044a:	f001 fcb1 	bl	8001db0 <MX_TIM2_Init>
  MX_I2C1_Init();
 800044e:	f7ff ff7f 	bl	8000350 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  EEPROM_initial();
 8000452:	f001 fabf 	bl	80019d4 <EEPROM_initial>
  // PWM start for Switch Status indication LEDs
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                      //LED0
 8000456:	2100      	movs	r1, #0
 8000458:	4842      	ldr	r0, [pc, #264]	; (8000564 <main+0x13c>)
 800045a:	f004 f933 	bl	80046c4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);                      //LED1
 800045e:	210c      	movs	r1, #12
 8000460:	4840      	ldr	r0, [pc, #256]	; (8000564 <main+0x13c>)
 8000462:	f004 f92f 	bl	80046c4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);						 //LED2
 8000466:	210c      	movs	r1, #12
 8000468:	483f      	ldr	r0, [pc, #252]	; (8000568 <main+0x140>)
 800046a:	f004 f92b 	bl	80046c4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);                      //LED3
 800046e:	2108      	movs	r1, #8
 8000470:	483c      	ldr	r0, [pc, #240]	; (8000564 <main+0x13c>)
 8000472:	f004 f927 	bl	80046c4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);						 //LED4
 8000476:	2108      	movs	r1, #8
 8000478:	483b      	ldr	r0, [pc, #236]	; (8000568 <main+0x140>)
 800047a:	f004 f923 	bl	80046c4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);                      //LED5
 800047e:	2104      	movs	r1, #4
 8000480:	4838      	ldr	r0, [pc, #224]	; (8000564 <main+0x13c>)
 8000482:	f004 f91f 	bl	80046c4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);					     //LED6
 8000486:	2104      	movs	r1, #4
 8000488:	4837      	ldr	r0, [pc, #220]	; (8000568 <main+0x140>)
 800048a:	f004 f91b 	bl	80046c4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                      //LED7
 800048e:	2100      	movs	r1, #0
 8000490:	4835      	ldr	r0, [pc, #212]	; (8000568 <main+0x140>)
 8000492:	f004 f917 	bl	80046c4 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);                      //LED8
 8000496:	2100      	movs	r1, #0
 8000498:	4834      	ldr	r0, [pc, #208]	; (800056c <main+0x144>)
 800049a:	f004 f913 	bl	80046c4 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);                      //indication_LED
 800049e:	2104      	movs	r1, #4
 80004a0:	4832      	ldr	r0, [pc, #200]	; (800056c <main+0x144>)
 80004a2:	f004 f90f 	bl	80046c4 <HAL_TIM_PWM_Start>

      //LESS STARTING WITH MIN_POWER

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);          //LED0
 80004a6:	4b32      	ldr	r3, [pc, #200]	; (8000570 <main+0x148>)
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	4b2e      	ldr	r3, [pc, #184]	; (8000564 <main+0x13c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);          //LED1
 80004b0:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <main+0x148>)
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <main+0x13c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);          //LED2
 80004ba:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <main+0x148>)
 80004bc:	781a      	ldrb	r2, [r3, #0]
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <main+0x140>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);          //LED3
 80004c4:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <main+0x148>)
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <main+0x13c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);          //LED4
 80004ce:	4b28      	ldr	r3, [pc, #160]	; (8000570 <main+0x148>)
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <main+0x140>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);          //LED5
 80004d8:	4b25      	ldr	r3, [pc, #148]	; (8000570 <main+0x148>)
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <main+0x13c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MIN_PWM);          //LED6
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <main+0x148>)
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <main+0x140>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);          //LED7
 80004ec:	4b20      	ldr	r3, [pc, #128]	; (8000570 <main+0x148>)
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <main+0x140>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);          //LED8
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <main+0x148>)
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <main+0x144>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Z_PWM);            //indication
 8000500:	4b1a      	ldr	r3, [pc, #104]	; (800056c <main+0x144>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2200      	movs	r2, #0
 8000506:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	       HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 8000508:	2201      	movs	r2, #1
 800050a:	491a      	ldr	r1, [pc, #104]	; (8000574 <main+0x14c>)
 800050c:	481a      	ldr	r0, [pc, #104]	; (8000578 <main+0x150>)
 800050e:	f005 f86d 	bl	80055ec <HAL_UART_Receive_IT>
	  	   Touch_Read();
 8000512:	f000 f893 	bl	800063c <Touch_Read>
	  	   Uart_Read_data();
 8000516:	f000 fdbb 	bl	8001090 <Uart_Read_data>
	  	   Rx_Data_evaluation();
 800051a:	f000 fe49 	bl	80011b0 <Rx_Data_evaluation>
	  	   Indication();
 800051e:	f000 ffad 	bl	800147c <Indication>
	  	   if( Tuya_flag == 1)
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <main+0x154>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d1ee      	bne.n	8000508 <main+0xe0>
	  	   {
	  		   uint32_t Now = HAL_GetTick();
 800052a:	f001 ffd1 	bl	80024d0 <HAL_GetTick>
 800052e:	6078      	str	r0, [r7, #4]
	  		   if(Tuya_Heart_Flag == 1)
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <main+0x158>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d103      	bne.n	8000540 <main+0x118>
	  		   {
	  			   Tuya_Heart_Flag = 0;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <main+0x158>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	e7e3      	b.n	8000508 <main+0xe0>
	  		   }
	  		   else
	  		   {
	  			   if((Now - Tuya_Start_Time) > 45000)
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <main+0x15c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 800054c:	4293      	cmp	r3, r2
 800054e:	d9db      	bls.n	8000508 <main+0xe0>
	  			   {
	  				   Tuya_Start_Time = Now;
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <main+0x15c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6013      	str	r3, [r2, #0]
	  				   Tuya_Reset_Flag = 1;
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <main+0x160>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
	  				   Tuya_Reset();
 800055c:	f000 f852 	bl	8000604 <Tuya_Reset>
	       HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 8000560:	e7d2      	b.n	8000508 <main+0xe0>
 8000562:	bf00      	nop
 8000564:	20000328 	.word	0x20000328
 8000568:	20000370 	.word	0x20000370
 800056c:	20000298 	.word	0x20000298
 8000570:	20000004 	.word	0x20000004
 8000574:	20000265 	.word	0x20000265
 8000578:	200003b8 	.word	0x200003b8
 800057c:	20000278 	.word	0x20000278
 8000580:	20000270 	.word	0x20000270
 8000584:	20000274 	.word	0x20000274
 8000588:	20000271 	.word	0x20000271

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b090      	sub	sp, #64	; 0x40
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	2228      	movs	r2, #40	; 0x28
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 fca2 	bl	8005ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	2301      	movs	r3, #1
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b6:	2310      	movs	r3, #16
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fb3c 	bl	8003c40 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005ce:	f001 faab 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fdaa 	bl	8004144 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005f6:	f001 fa97 	bl	8001b28 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3740      	adds	r7, #64	; 0x40
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <Tuya_Reset>:

/* USER CODE BEGIN 4 */
///////////STM32RESTART//////////////
void Tuya_Reset()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
      if(Tuya_Reset_Flag == 1)
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <Tuya_Reset+0x30>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d10f      	bne.n	8000630 <Tuya_Reset+0x2c>
      {
         Tuya_Reset_Flag = 0;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <Tuya_Reset+0x30>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
         HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2101      	movs	r1, #1
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <Tuya_Reset+0x34>)
 800061c:	f002 fadf 	bl	8002bde <HAL_GPIO_WritePin>
         HAL_Delay(Delay);
 8000620:	2032      	movs	r0, #50	; 0x32
 8000622:	f001 ff5f 	bl	80024e4 <HAL_Delay>
         HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2101      	movs	r1, #1
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <Tuya_Reset+0x34>)
 800062c:	f002 fad7 	bl	8002bde <HAL_GPIO_WritePin>
      }
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000271 	.word	0x20000271
 8000638:	40011400 	.word	0x40011400

0800063c <Touch_Read>:
/***********************SWITCH_OPERATION**************************/
void Touch_Read(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	/*********************************** SWITCH1 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH0_GPIO_Port,TOUCH0_Pin))
 8000642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000646:	489c      	ldr	r0, [pc, #624]	; (80008b8 <Touch_Read+0x27c>)
 8000648:	f002 fab2 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d047      	beq.n	80006e2 <Touch_Read+0xa6>
 8000652:	2b01      	cmp	r3, #1
 8000654:	d155      	bne.n	8000702 <Touch_Read+0xc6>
	{
			static uint32_t Start_Time = 0;
			static uint8_t long_press = 0;
		case GPIO_PIN_SET:
			if(Touch_Flag[0] == 0)             //OFF _CHECKING
 8000656:	4b99      	ldr	r3, [pc, #612]	; (80008bc <Touch_Read+0x280>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10c      	bne.n	8000678 <Touch_Read+0x3c>
			{
				switch_operation(Switch_1,SW_ON);
 800065e:	2101      	movs	r1, #1
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fa41 	bl	8000ae8 <switch_operation>
				Start_Time=HAL_GetTick();
 8000666:	f001 ff33 	bl	80024d0 <HAL_GetTick>
 800066a:	4603      	mov	r3, r0
 800066c:	4a94      	ldr	r2, [pc, #592]	; (80008c0 <Touch_Read+0x284>)
 800066e:	6013      	str	r3, [r2, #0]
				long_press = 0;
 8000670:	4b94      	ldr	r3, [pc, #592]	; (80008c4 <Touch_Read+0x288>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e00f      	b.n	8000698 <Touch_Read+0x5c>
			}
			else if(Touch_Flag[0] == 2)          //ON
 8000678:	4b90      	ldr	r3, [pc, #576]	; (80008bc <Touch_Read+0x280>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d10b      	bne.n	8000698 <Touch_Read+0x5c>
			{
				switch_operation(Switch_1,SW_OFF);
 8000680:	2100      	movs	r1, #0
 8000682:	2001      	movs	r0, #1
 8000684:	f000 fa30 	bl	8000ae8 <switch_operation>
				Start_Time=HAL_GetTick();
 8000688:	f001 ff22 	bl	80024d0 <HAL_GetTick>
 800068c:	4603      	mov	r3, r0
 800068e:	4a8c      	ldr	r2, [pc, #560]	; (80008c0 <Touch_Read+0x284>)
 8000690:	6013      	str	r3, [r2, #0]
				long_press = 0;
 8000692:	4b8c      	ldr	r3, [pc, #560]	; (80008c4 <Touch_Read+0x288>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
			}
			if((HAL_GPIO_ReadPin(TOUCH0_GPIO_Port,TOUCH0_Pin)==GPIO_PIN_SET))
 8000698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069c:	4886      	ldr	r0, [pc, #536]	; (80008b8 <Touch_Read+0x27c>)
 800069e:	f002 fa87 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d12e      	bne.n	8000706 <Touch_Read+0xca>
			{
				if(Touch_Flag[0]==1||Touch_Flag[0]==3)
 80006a8:	4b84      	ldr	r3, [pc, #528]	; (80008bc <Touch_Read+0x280>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d003      	beq.n	80006b8 <Touch_Read+0x7c>
 80006b0:	4b82      	ldr	r3, [pc, #520]	; (80008bc <Touch_Read+0x280>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	d126      	bne.n	8000706 <Touch_Read+0xca>
				{
					if(long_press==0)
 80006b8:	4b82      	ldr	r3, [pc, #520]	; (80008c4 <Touch_Read+0x288>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d122      	bne.n	8000706 <Touch_Read+0xca>
					{
					   uint32_t now_time = HAL_GetTick();
 80006c0:	f001 ff06 	bl	80024d0 <HAL_GetTick>
 80006c4:	6078      	str	r0, [r7, #4]

						if((now_time-Start_Time) > 5000)
 80006c6:	4b7e      	ldr	r3, [pc, #504]	; (80008c0 <Touch_Read+0x284>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d917      	bls.n	8000706 <Touch_Read+0xca>
						{
							long_press=1;
 80006d6:	4b7b      	ldr	r3, [pc, #492]	; (80008c4 <Touch_Read+0x288>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
							switch_long_press();	/////////LONG_PRESS_FOR WIFI/////////////
 80006dc:	f000 fc16 	bl	8000f0c <switch_long_press>

						}
					 }
				 }
		    }
			break;
 80006e0:	e011      	b.n	8000706 <Touch_Read+0xca>
		case GPIO_PIN_RESET:
			if(Touch_Flag[0] == 1)
 80006e2:	4b76      	ldr	r3, [pc, #472]	; (80008bc <Touch_Read+0x280>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d103      	bne.n	80006f2 <Touch_Read+0xb6>
			{
				Touch_Flag[0] = 2;
 80006ea:	4b74      	ldr	r3, [pc, #464]	; (80008bc <Touch_Read+0x280>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	701a      	strb	r2, [r3, #0]
			}
			else if(Touch_Flag[0] == 3)
			{
				Touch_Flag[0] = 0;
			}
		break;
 80006f0:	e00b      	b.n	800070a <Touch_Read+0xce>
			else if(Touch_Flag[0] == 3)
 80006f2:	4b72      	ldr	r3, [pc, #456]	; (80008bc <Touch_Read+0x280>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d107      	bne.n	800070a <Touch_Read+0xce>
				Touch_Flag[0] = 0;
 80006fa:	4b70      	ldr	r3, [pc, #448]	; (80008bc <Touch_Read+0x280>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
		break;
 8000700:	e003      	b.n	800070a <Touch_Read+0xce>
	default:
		break;
 8000702:	bf00      	nop
 8000704:	e002      	b.n	800070c <Touch_Read+0xd0>
			break;
 8000706:	bf00      	nop
 8000708:	e000      	b.n	800070c <Touch_Read+0xd0>
		break;
 800070a:	bf00      	nop
	}
/*********************************** SWITCH 2 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH1_GPIO_Port,TOUCH1_Pin))
 800070c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000710:	486d      	ldr	r0, [pc, #436]	; (80008c8 <Touch_Read+0x28c>)
 8000712:	f002 fa4d 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d03f      	beq.n	800079c <Touch_Read+0x160>
 800071c:	2b01      	cmp	r3, #1
 800071e:	d14d      	bne.n	80007bc <Touch_Read+0x180>
	{
			static uint32_t Start_Time = 0;
			static uint8_t long_press = 0;
		case GPIO_PIN_SET:
			if(Touch_Flag[1]==0)
 8000720:	4b66      	ldr	r3, [pc, #408]	; (80008bc <Touch_Read+0x280>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10c      	bne.n	8000742 <Touch_Read+0x106>
			{
				switch_operation(Switch_2, SW_ON);
 8000728:	2101      	movs	r1, #1
 800072a:	2002      	movs	r0, #2
 800072c:	f000 f9dc 	bl	8000ae8 <switch_operation>
				long_press = 0;
 8000730:	4b66      	ldr	r3, [pc, #408]	; (80008cc <Touch_Read+0x290>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
				Start_Time = HAL_GetTick();
 8000736:	f001 fecb 	bl	80024d0 <HAL_GetTick>
 800073a:	4603      	mov	r3, r0
 800073c:	4a64      	ldr	r2, [pc, #400]	; (80008d0 <Touch_Read+0x294>)
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	e00f      	b.n	8000762 <Touch_Read+0x126>
			}
			else if(Touch_Flag[1]==2)
 8000742:	4b5e      	ldr	r3, [pc, #376]	; (80008bc <Touch_Read+0x280>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d10b      	bne.n	8000762 <Touch_Read+0x126>
			{
				switch_operation(Switch_2, SW_OFF);
 800074a:	2100      	movs	r1, #0
 800074c:	2002      	movs	r0, #2
 800074e:	f000 f9cb 	bl	8000ae8 <switch_operation>
				long_press = 0;
 8000752:	4b5e      	ldr	r3, [pc, #376]	; (80008cc <Touch_Read+0x290>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
				 Start_Time = HAL_GetTick();
 8000758:	f001 feba 	bl	80024d0 <HAL_GetTick>
 800075c:	4603      	mov	r3, r0
 800075e:	4a5c      	ldr	r2, [pc, #368]	; (80008d0 <Touch_Read+0x294>)
 8000760:	6013      	str	r3, [r2, #0]
			}
			if(HAL_GPIO_ReadPin(TOUCH1_GPIO_Port,TOUCH1_Pin)==GPIO_PIN_SET)
 8000762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000766:	4858      	ldr	r0, [pc, #352]	; (80008c8 <Touch_Read+0x28c>)
 8000768:	f002 fa22 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d126      	bne.n	80007c0 <Touch_Read+0x184>
			{
				if(long_press==0)
 8000772:	4b56      	ldr	r3, [pc, #344]	; (80008cc <Touch_Read+0x290>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d122      	bne.n	80007c0 <Touch_Read+0x184>
				{
					uint32_t  now_time=HAL_GetTick();
 800077a:	f001 fea9 	bl	80024d0 <HAL_GetTick>
 800077e:	6038      	str	r0, [r7, #0]

					if((now_time-Start_Time)>5000)
 8000780:	4b53      	ldr	r3, [pc, #332]	; (80008d0 <Touch_Read+0x294>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	f241 3288 	movw	r2, #5000	; 0x1388
 800078c:	4293      	cmp	r3, r2
 800078e:	d917      	bls.n	80007c0 <Touch_Read+0x184>
					{
						long_press=1;
 8000790:	4b4e      	ldr	r3, [pc, #312]	; (80008cc <Touch_Read+0x290>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
						switch_long_press();             /////////LONG_PRESS_FOR WIFI/////////////
 8000796:	f000 fbb9 	bl	8000f0c <switch_long_press>

					}

				}
			}
			break;
 800079a:	e011      	b.n	80007c0 <Touch_Read+0x184>

		case GPIO_PIN_RESET:
			if(Touch_Flag[1]==1) //off
 800079c:	4b47      	ldr	r3, [pc, #284]	; (80008bc <Touch_Read+0x280>)
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d103      	bne.n	80007ac <Touch_Read+0x170>
			{
				Touch_Flag[1]=2;
 80007a4:	4b45      	ldr	r3, [pc, #276]	; (80008bc <Touch_Read+0x280>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	705a      	strb	r2, [r3, #1]
			}
			else if(Touch_Flag[1]==3) //on
			{
				Touch_Flag[1]=0;
			}
			break;
 80007aa:	e00b      	b.n	80007c4 <Touch_Read+0x188>
			else if(Touch_Flag[1]==3) //on
 80007ac:	4b43      	ldr	r3, [pc, #268]	; (80008bc <Touch_Read+0x280>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d107      	bne.n	80007c4 <Touch_Read+0x188>
				Touch_Flag[1]=0;
 80007b4:	4b41      	ldr	r3, [pc, #260]	; (80008bc <Touch_Read+0x280>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	705a      	strb	r2, [r3, #1]
			break;
 80007ba:	e003      	b.n	80007c4 <Touch_Read+0x188>
		default:
			break;
 80007bc:	bf00      	nop
 80007be:	e002      	b.n	80007c6 <Touch_Read+0x18a>
			break;
 80007c0:	bf00      	nop
 80007c2:	e000      	b.n	80007c6 <Touch_Read+0x18a>
			break;
 80007c4:	bf00      	nop
	}
	/*********************************** SWITCH 3 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH2_GPIO_Port,TOUCH2_Pin))
 80007c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ca:	483b      	ldr	r0, [pc, #236]	; (80008b8 <Touch_Read+0x27c>)
 80007cc:	f002 f9f0 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d012      	beq.n	80007fc <Touch_Read+0x1c0>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d11f      	bne.n	800081a <Touch_Read+0x1de>
	{
		case GPIO_PIN_SET:
			 if(Touch_Flag[2]==0)      /************0,1,2,3**************/
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <Touch_Read+0x280>)
 80007dc:	789b      	ldrb	r3, [r3, #2]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d103      	bne.n	80007ea <Touch_Read+0x1ae>
				 {

				  switch_operation(Switch_3, SW_ON);
 80007e2:	2101      	movs	r1, #1
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f97f 	bl	8000ae8 <switch_operation>

				 }
			 if(Touch_Flag[2]==2)
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <Touch_Read+0x280>)
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d115      	bne.n	800081e <Touch_Read+0x1e2>
				 {
				  switch_operation(Switch_3, SW_OFF);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f977 	bl	8000ae8 <switch_operation>

				 }
			 break;
 80007fa:	e010      	b.n	800081e <Touch_Read+0x1e2>
		case GPIO_PIN_RESET:
				 if(Touch_Flag[2]==1)
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <Touch_Read+0x280>)
 80007fe:	789b      	ldrb	r3, [r3, #2]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d102      	bne.n	800080a <Touch_Read+0x1ce>
				 {
					 Touch_Flag[2]=2;
 8000804:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <Touch_Read+0x280>)
 8000806:	2202      	movs	r2, #2
 8000808:	709a      	strb	r2, [r3, #2]

				 }
				 if(Touch_Flag[2]==3)
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <Touch_Read+0x280>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d107      	bne.n	8000822 <Touch_Read+0x1e6>
				 {
			        Touch_Flag[2]=0;
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <Touch_Read+0x280>)
 8000814:	2200      	movs	r2, #0
 8000816:	709a      	strb	r2, [r3, #2]
				 }
				 break;
 8000818:	e003      	b.n	8000822 <Touch_Read+0x1e6>
	   default:
			break;
 800081a:	bf00      	nop
 800081c:	e002      	b.n	8000824 <Touch_Read+0x1e8>
			 break;
 800081e:	bf00      	nop
 8000820:	e000      	b.n	8000824 <Touch_Read+0x1e8>
				 break;
 8000822:	bf00      	nop

	}
	/*********************************** SWITCH 4 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH3_GPIO_Port,TOUCH3_Pin))
 8000824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000828:	4823      	ldr	r0, [pc, #140]	; (80008b8 <Touch_Read+0x27c>)
 800082a:	f002 f9c1 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d012      	beq.n	800085a <Touch_Read+0x21e>
 8000834:	2b01      	cmp	r3, #1
 8000836:	d11f      	bne.n	8000878 <Touch_Read+0x23c>
	{
	  case GPIO_PIN_SET:
		 if(Touch_Flag[3]==0)
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <Touch_Read+0x280>)
 800083a:	78db      	ldrb	r3, [r3, #3]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d103      	bne.n	8000848 <Touch_Read+0x20c>
		 	 {
			 switch_operation(Switch_4, SW_ON);
 8000840:	2101      	movs	r1, #1
 8000842:	2004      	movs	r0, #4
 8000844:	f000 f950 	bl	8000ae8 <switch_operation>

		 	 }
		 if(Touch_Flag[3]==2)
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <Touch_Read+0x280>)
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d115      	bne.n	800087c <Touch_Read+0x240>
			 {
				 switch_operation(Switch_4, SW_OFF);
 8000850:	2100      	movs	r1, #0
 8000852:	2004      	movs	r0, #4
 8000854:	f000 f948 	bl	8000ae8 <switch_operation>
			 }
		 break;
 8000858:	e010      	b.n	800087c <Touch_Read+0x240>
	 case GPIO_PIN_RESET:
			 if(Touch_Flag[3]==1)
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <Touch_Read+0x280>)
 800085c:	78db      	ldrb	r3, [r3, #3]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d102      	bne.n	8000868 <Touch_Read+0x22c>
			 {
				 Touch_Flag[3]=2;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <Touch_Read+0x280>)
 8000864:	2202      	movs	r2, #2
 8000866:	70da      	strb	r2, [r3, #3]

			 }
			 if(Touch_Flag[3]==3)
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <Touch_Read+0x280>)
 800086a:	78db      	ldrb	r3, [r3, #3]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d107      	bne.n	8000880 <Touch_Read+0x244>
			 {
		         Touch_Flag[3]=0;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <Touch_Read+0x280>)
 8000872:	2200      	movs	r2, #0
 8000874:	70da      	strb	r2, [r3, #3]
			 }
		break;
 8000876:	e003      	b.n	8000880 <Touch_Read+0x244>
	default:
		break;
 8000878:	bf00      	nop
 800087a:	e002      	b.n	8000882 <Touch_Read+0x246>
		 break;
 800087c:	bf00      	nop
 800087e:	e000      	b.n	8000882 <Touch_Read+0x246>
		break;
 8000880:	bf00      	nop

	}
	/*********************************** SWITCH 5 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH4_GPIO_Port,TOUCH4_Pin))
 8000882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <Touch_Read+0x298>)
 8000888:	f002 f992 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d022      	beq.n	80008d8 <Touch_Read+0x29c>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d12f      	bne.n	80008f6 <Touch_Read+0x2ba>
	{
	case GPIO_PIN_SET:
		 if(Touch_Flag[4]==0)
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <Touch_Read+0x280>)
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <Touch_Read+0x26a>
		 	  {
			      switch_operation(Switch_5, SW_ON);
 800089e:	2101      	movs	r1, #1
 80008a0:	2005      	movs	r0, #5
 80008a2:	f000 f921 	bl	8000ae8 <switch_operation>
		 	  }
		 if(Touch_Flag[4]==2)
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <Touch_Read+0x280>)
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d125      	bne.n	80008fa <Touch_Read+0x2be>
		 	{
		 		 switch_operation(Switch_5, SW_OFF);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2005      	movs	r0, #5
 80008b2:	f000 f919 	bl	8000ae8 <switch_operation>
		 	}
		 break;
 80008b6:	e020      	b.n	80008fa <Touch_Read+0x2be>
 80008b8:	40010c00 	.word	0x40010c00
 80008bc:	200000ec 	.word	0x200000ec
 80008c0:	20000284 	.word	0x20000284
 80008c4:	20000288 	.word	0x20000288
 80008c8:	40011800 	.word	0x40011800
 80008cc:	20000289 	.word	0x20000289
 80008d0:	2000028c 	.word	0x2000028c
 80008d4:	40011400 	.word	0x40011400
	case GPIO_PIN_RESET:
			 if(Touch_Flag[4]==1)
 80008d8:	4b79      	ldr	r3, [pc, #484]	; (8000ac0 <Touch_Read+0x484>)
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d102      	bne.n	80008e6 <Touch_Read+0x2aa>
			 {
				 Touch_Flag[4]=2;
 80008e0:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <Touch_Read+0x484>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	711a      	strb	r2, [r3, #4]

			 }
			 if(Touch_Flag[4]==3)
 80008e6:	4b76      	ldr	r3, [pc, #472]	; (8000ac0 <Touch_Read+0x484>)
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d107      	bne.n	80008fe <Touch_Read+0x2c2>
			 {
		        Touch_Flag[4]=0;
 80008ee:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <Touch_Read+0x484>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	711a      	strb	r2, [r3, #4]
			 }
			 break;
 80008f4:	e003      	b.n	80008fe <Touch_Read+0x2c2>
	default:
		break;
 80008f6:	bf00      	nop
 80008f8:	e002      	b.n	8000900 <Touch_Read+0x2c4>
		 break;
 80008fa:	bf00      	nop
 80008fc:	e000      	b.n	8000900 <Touch_Read+0x2c4>
			 break;
 80008fe:	bf00      	nop

	}
	/*********************************** SWITCH 6 ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH5_GPIO_Port,TOUCH5_Pin))
 8000900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000904:	486f      	ldr	r0, [pc, #444]	; (8000ac4 <Touch_Read+0x488>)
 8000906:	f002 f953 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d012      	beq.n	8000936 <Touch_Read+0x2fa>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d11f      	bne.n	8000954 <Touch_Read+0x318>
		{
		case GPIO_PIN_SET:
			 if(Touch_Flag[5]==0)
 8000914:	4b6a      	ldr	r3, [pc, #424]	; (8000ac0 <Touch_Read+0x484>)
 8000916:	795b      	ldrb	r3, [r3, #5]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d103      	bne.n	8000924 <Touch_Read+0x2e8>
			 	  {
				      switch_operation(Switch_6, SW_ON);
 800091c:	2101      	movs	r1, #1
 800091e:	2006      	movs	r0, #6
 8000920:	f000 f8e2 	bl	8000ae8 <switch_operation>
			 	  }
			 if(Touch_Flag[5]==2)
 8000924:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <Touch_Read+0x484>)
 8000926:	795b      	ldrb	r3, [r3, #5]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d115      	bne.n	8000958 <Touch_Read+0x31c>
			 	{
			 			 switch_operation(Switch_6, SW_OFF);
 800092c:	2100      	movs	r1, #0
 800092e:	2006      	movs	r0, #6
 8000930:	f000 f8da 	bl	8000ae8 <switch_operation>
			 	}
			 break;
 8000934:	e010      	b.n	8000958 <Touch_Read+0x31c>
		case GPIO_PIN_RESET:
				 if(Touch_Flag[5]==1)
 8000936:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <Touch_Read+0x484>)
 8000938:	795b      	ldrb	r3, [r3, #5]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d102      	bne.n	8000944 <Touch_Read+0x308>
				 {
					 Touch_Flag[5]=2;
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <Touch_Read+0x484>)
 8000940:	2202      	movs	r2, #2
 8000942:	715a      	strb	r2, [r3, #5]

				 }
				 if(Touch_Flag[5]==3)
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <Touch_Read+0x484>)
 8000946:	795b      	ldrb	r3, [r3, #5]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d107      	bne.n	800095c <Touch_Read+0x320>
				 {
			         Touch_Flag[5]=0;
 800094c:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <Touch_Read+0x484>)
 800094e:	2200      	movs	r2, #0
 8000950:	715a      	strb	r2, [r3, #5]

				 }
				 break;
 8000952:	e003      	b.n	800095c <Touch_Read+0x320>
		default:
			break;
 8000954:	bf00      	nop
 8000956:	e002      	b.n	800095e <Touch_Read+0x322>
			 break;
 8000958:	bf00      	nop
 800095a:	e000      	b.n	800095e <Touch_Read+0x322>
				 break;
 800095c:	bf00      	nop

		}
	/***********************************  DIMMER SWITCH  ****************************/
	switch(HAL_GPIO_ReadPin(TOUCH6_GPIO_Port,TOUCH6_Pin))
 800095e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000962:	4859      	ldr	r0, [pc, #356]	; (8000ac8 <Touch_Read+0x48c>)
 8000964:	f002 f924 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d012      	beq.n	8000994 <Touch_Read+0x358>
 800096e:	2b01      	cmp	r3, #1
 8000970:	d11f      	bne.n	80009b2 <Touch_Read+0x376>
	{
	 case GPIO_PIN_SET:
		 if(Touch_Flag[6]==0)      //OFF
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <Touch_Read+0x484>)
 8000974:	799b      	ldrb	r3, [r3, #6]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <Touch_Read+0x346>
		 {
		  switch_operation(Switch_7, SW_ON);
 800097a:	2101      	movs	r1, #1
 800097c:	2007      	movs	r0, #7
 800097e:	f000 f8b3 	bl	8000ae8 <switch_operation>

		 }
		 if(Touch_Flag[6]==2)     //ON
 8000982:	4b4f      	ldr	r3, [pc, #316]	; (8000ac0 <Touch_Read+0x484>)
 8000984:	799b      	ldrb	r3, [r3, #6]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d115      	bne.n	80009b6 <Touch_Read+0x37a>
		 		 {

			     switch_operation(Switch_7, SW_OFF);
 800098a:	2100      	movs	r1, #0
 800098c:	2007      	movs	r0, #7
 800098e:	f000 f8ab 	bl	8000ae8 <switch_operation>

		 		 }
		 break;
 8000992:	e010      	b.n	80009b6 <Touch_Read+0x37a>
	 case GPIO_PIN_RESET:
			 if(Touch_Flag[6]==1)
 8000994:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <Touch_Read+0x484>)
 8000996:	799b      	ldrb	r3, [r3, #6]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d102      	bne.n	80009a2 <Touch_Read+0x366>
			 {
				 Touch_Flag[6]=2;
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <Touch_Read+0x484>)
 800099e:	2202      	movs	r2, #2
 80009a0:	719a      	strb	r2, [r3, #6]

			 }
			 if(Touch_Flag[6]==3)
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <Touch_Read+0x484>)
 80009a4:	799b      	ldrb	r3, [r3, #6]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d107      	bne.n	80009ba <Touch_Read+0x37e>
			 {
		        Touch_Flag[6]=0;
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <Touch_Read+0x484>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	719a      	strb	r2, [r3, #6]

			 }
			 break;
 80009b0:	e003      	b.n	80009ba <Touch_Read+0x37e>
	default:
		break;
 80009b2:	bf00      	nop
 80009b4:	e002      	b.n	80009bc <Touch_Read+0x380>
		 break;
 80009b6:	bf00      	nop
 80009b8:	e000      	b.n	80009bc <Touch_Read+0x380>
			 break;
 80009ba:	bf00      	nop

	}
	//DIMMER SWITCH OPERATIONS

	if(DIMMER_FLAG==1)
 80009bc:	4b43      	ldr	r3, [pc, #268]	; (8000acc <Touch_Read+0x490>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d172      	bne.n	8000aaa <Touch_Read+0x46e>

		{
		switch(HAL_GPIO_ReadPin(DIMMER_UP_GPIO_Port, DIMMER_UP_Pin))    /***************DIMMMER SWITCH_1 UP*******************/
 80009c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c8:	483f      	ldr	r0, [pc, #252]	; (8000ac8 <Touch_Read+0x48c>)
 80009ca:	f002 f8f1 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d021      	beq.n	8000a18 <Touch_Read+0x3dc>
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d12c      	bne.n	8000a32 <Touch_Read+0x3f6>
			{
		case GPIO_PIN_SET:

		 if(Touch_Flag[7]==0)
 80009d8:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <Touch_Read+0x484>)
 80009da:	79db      	ldrb	r3, [r3, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d12a      	bne.n	8000a36 <Touch_Read+0x3fa>
		 {
			 Touch_Flag[7]=1;
 80009e0:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <Touch_Read+0x484>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	71da      	strb	r2, [r3, #7]

			 if(DIMMER_COUNT <=75)
 80009e6:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <Touch_Read+0x494>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b4b      	cmp	r3, #75	; 0x4b
 80009ec:	d807      	bhi.n	80009fe <Touch_Read+0x3c2>
				{
					DIMMER_COUNT+= 10;
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <Touch_Read+0x494>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	330a      	adds	r3, #10
 80009f4:	4a36      	ldr	r2, [pc, #216]	; (8000ad0 <Touch_Read+0x494>)
 80009f6:	6013      	str	r3, [r2, #0]
					a=1;
 80009f8:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <Touch_Read+0x498>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
				}
			 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM);
 80009fe:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <Touch_Read+0x49c>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <Touch_Read+0x4a0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
			 DIMMER_TX(DIMMER_1,DIMMER_COUNT);
 8000a08:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <Touch_Read+0x494>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 fac9 	bl	8000fa8 <DIMMER_TX>

		 }

		break;
 8000a16:	e00e      	b.n	8000a36 <Touch_Read+0x3fa>
		case GPIO_PIN_RESET:
			if(Touch_Flag[7]==1)
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <Touch_Read+0x484>)
 8000a1a:	79db      	ldrb	r3, [r3, #7]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10c      	bne.n	8000a3a <Touch_Read+0x3fe>
			{

				Touch_Flag[7]=0;
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <Touch_Read+0x484>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	71da      	strb	r2, [r3, #7]
				//a=0;
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 8000a26:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <Touch_Read+0x4a4>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <Touch_Read+0x4a0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8000a30:	e003      	b.n	8000a3a <Touch_Read+0x3fe>
		default:
			break;
 8000a32:	bf00      	nop
 8000a34:	e002      	b.n	8000a3c <Touch_Read+0x400>
		break;
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <Touch_Read+0x400>
			break;
 8000a3a:	bf00      	nop
		}

		switch(HAL_GPIO_ReadPin(DIMMERDOWN_GPIO_Port, DIMMERDOWN_Pin))                    /***************DIMMMER SWITCH_2 DOWN*******************/
 8000a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a40:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <Touch_Read+0x48c>)
 8000a42:	f002 f8b5 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d021      	beq.n	8000a90 <Touch_Read+0x454>
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d12e      	bne.n	8000aae <Touch_Read+0x472>
			{
				case GPIO_PIN_SET:

				 if(Touch_Flag[8]==0)
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <Touch_Read+0x484>)
 8000a52:	7a1b      	ldrb	r3, [r3, #8]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d12c      	bne.n	8000ab2 <Touch_Read+0x476>
				 {

					 Touch_Flag[8]=1;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <Touch_Read+0x484>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	721a      	strb	r2, [r3, #8]


					 if(DIMMER_COUNT > 0)
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <Touch_Read+0x494>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d007      	beq.n	8000a76 <Touch_Read+0x43a>
					 {
						 DIMMER_COUNT-=10;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <Touch_Read+0x494>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3b0a      	subs	r3, #10
 8000a6c:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <Touch_Read+0x494>)
 8000a6e:	6013      	str	r3, [r2, #0]

						 a=1;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <Touch_Read+0x498>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]

					 }

					 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MAX_PWM);
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <Touch_Read+0x49c>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <Touch_Read+0x4a8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
					  DIMMER_TX(DIMMER_2,DIMMER_COUNT);
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <Touch_Read+0x494>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f000 fa8d 	bl	8000fa8 <DIMMER_TX>
//					 //Tx_Switch_Satus(Switch_6,SW_ON);
				 }
				break;
 8000a8e:	e010      	b.n	8000ab2 <Touch_Read+0x476>
				case GPIO_PIN_RESET:
					if(Touch_Flag[8]==1)
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <Touch_Read+0x484>)
 8000a92:	7a1b      	ldrb	r3, [r3, #8]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d10e      	bne.n	8000ab6 <Touch_Read+0x47a>
					{
						Touch_Flag[8]=0;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <Touch_Read+0x484>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	721a      	strb	r2, [r3, #8]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <Touch_Read+0x4a4>)
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <Touch_Read+0x4a8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	635a      	str	r2, [r3, #52]	; 0x34
					//	a=0;
					}
					break;
 8000aa8:	e005      	b.n	8000ab6 <Touch_Read+0x47a>
				default:
					break;
				}
		}
 8000aaa:	bf00      	nop
 8000aac:	e004      	b.n	8000ab8 <Touch_Read+0x47c>
					break;
 8000aae:	bf00      	nop
 8000ab0:	e002      	b.n	8000ab8 <Touch_Read+0x47c>
				break;
 8000ab2:	bf00      	nop
 8000ab4:	e000      	b.n	8000ab8 <Touch_Read+0x47c>
					break;
 8000ab6:	bf00      	nop
	//}
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000ec 	.word	0x200000ec
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	40011400 	.word	0x40011400
 8000acc:	200000f5 	.word	0x200000f5
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	2000027c 	.word	0x2000027c
 8000ad8:	20000005 	.word	0x20000005
 8000adc:	20000370 	.word	0x20000370
 8000ae0:	20000004 	.word	0x20000004
 8000ae4:	20000298 	.word	0x20000298

08000ae8 <switch_operation>:



void switch_operation(uint8_t SW_NO,uint8_t SW_STS)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af04      	add	r7, sp, #16
 8000aee:	4603      	mov	r3, r0
 8000af0:	460a      	mov	r2, r1
 8000af2:	71fb      	strb	r3, [r7, #7]
 8000af4:	4613      	mov	r3, r2
 8000af6:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, SW_NO,I2C_MEMADD_SIZE_16BIT, &SW_STS, 1, 100)==HAL_OK)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	2301      	movs	r3, #1
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2310      	movs	r3, #16
 8000b0a:	21a0      	movs	r1, #160	; 0xa0
 8000b0c:	48b2      	ldr	r0, [pc, #712]	; (8000dd8 <switch_operation+0x2f0>)
 8000b0e:	f002 f9db 	bl	8002ec8 <HAL_I2C_Mem_Write>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <switch_operation+0x36>
	{
		HAL_Delay(20);
 8000b18:	2014      	movs	r0, #20
 8000b1a:	f001 fce3 	bl	80024e4 <HAL_Delay>
	}
	/*********************************** SWITCH 1 ****************************/
	switch(SW_NO)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	f200 818f 	bhi.w	8000e46 <switch_operation+0x35e>
 8000b28:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <switch_operation+0x48>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b4d 	.word	0x08000b4d
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000c11 	.word	0x08000c11
 8000b3c:	08000c73 	.word	0x08000c73
 8000b40:	08000cd5 	.word	0x08000cd5
 8000b44:	08000d37 	.word	0x08000d37
 8000b48:	08000dab 	.word	0x08000dab
		{
	case Switch_1:
		if(SW_STS==0x01)
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d114      	bne.n	8000b7c <switch_operation+0x94>
		{
			Touch_Flag[0]=1;
 8000b52:	4ba2      	ldr	r3, [pc, #648]	; (8000ddc <switch_operation+0x2f4>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MAX_PWM);      //LED0
 8000b58:	4ba1      	ldr	r3, [pc, #644]	; (8000de0 <switch_operation+0x2f8>)
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4ba1      	ldr	r3, [pc, #644]	; (8000de4 <switch_operation+0x2fc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_SET); //RELAY0 SET PB1
 8000b62:	2201      	movs	r2, #1
 8000b64:	2102      	movs	r1, #2
 8000b66:	48a0      	ldr	r0, [pc, #640]	; (8000de8 <switch_operation+0x300>)
 8000b68:	f002 f839 	bl	8002bde <HAL_GPIO_WritePin>
			Tx_Switch_Satus(Switch_1,SW_ON);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 f9da 	bl	8000f28 <Tx_Switch_Satus>
			HAL_Delay(Delay);
 8000b74:	2032      	movs	r0, #50	; 0x32
 8000b76:	f001 fcb5 	bl	80024e4 <HAL_Delay>
			HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_RESET);//RELAY OFF
			Tx_Switch_Satus(Switch_1,SW_OFF);
			HAL_Delay(Delay);
		}

	break;
 8000b7a:	e166      	b.n	8000e4a <switch_operation+0x362>
		else if(SW_STS==0x00)
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8163 	bne.w	8000e4a <switch_operation+0x362>
			 Touch_Flag[0]=3;
 8000b84:	4b95      	ldr	r3, [pc, #596]	; (8000ddc <switch_operation+0x2f4>)
 8000b86:	2203      	movs	r2, #3
 8000b88:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);         //LED0RESET
 8000b8a:	4b98      	ldr	r3, [pc, #608]	; (8000dec <switch_operation+0x304>)
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	4b95      	ldr	r3, [pc, #596]	; (8000de4 <switch_operation+0x2fc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(RELAY0_GPIO_Port,RELAY0_Pin,GPIO_PIN_RESET);//RELAY OFF
 8000b94:	2200      	movs	r2, #0
 8000b96:	2102      	movs	r1, #2
 8000b98:	4893      	ldr	r0, [pc, #588]	; (8000de8 <switch_operation+0x300>)
 8000b9a:	f002 f820 	bl	8002bde <HAL_GPIO_WritePin>
			Tx_Switch_Satus(Switch_1,SW_OFF);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 f9c1 	bl	8000f28 <Tx_Switch_Satus>
			HAL_Delay(Delay);
 8000ba6:	2032      	movs	r0, #50	; 0x32
 8000ba8:	f001 fc9c 	bl	80024e4 <HAL_Delay>
	break;
 8000bac:	e14d      	b.n	8000e4a <switch_operation+0x362>
	/*********************************** SWITCH 2 ****************************/
	case Switch_2:
		if(SW_STS==0x01)
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d114      	bne.n	8000bde <switch_operation+0xf6>
				{
					Touch_Flag[1]=1;
 8000bb4:	4b89      	ldr	r3, [pc, #548]	; (8000ddc <switch_operation+0x2f4>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	705a      	strb	r2, [r3, #1]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MAX_PWM);      //LED1
 8000bba:	4b89      	ldr	r3, [pc, #548]	; (8000de0 <switch_operation+0x2f8>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <switch_operation+0x2fc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_SET); //RELAY2
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4887      	ldr	r0, [pc, #540]	; (8000de8 <switch_operation+0x300>)
 8000bca:	f002 f808 	bl	8002bde <HAL_GPIO_WritePin>
					Tx_Switch_Satus(Switch_2,SW_ON);
 8000bce:	2101      	movs	r1, #1
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f000 f9a9 	bl	8000f28 <Tx_Switch_Satus>
					HAL_Delay(Delay);
 8000bd6:	2032      	movs	r0, #50	; 0x32
 8000bd8:	f001 fc84 	bl	80024e4 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);         //LED_RESET
					HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_RESET);//RELAY_OFF
					Tx_Switch_Satus(Switch_2,SW_OFF);
					HAL_Delay(Delay);
				}
		break;
 8000bdc:	e137      	b.n	8000e4e <switch_operation+0x366>
				else if(SW_STS==0x00)
 8000bde:	79bb      	ldrb	r3, [r7, #6]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f040 8134 	bne.w	8000e4e <switch_operation+0x366>
					 Touch_Flag[1]=3;
 8000be6:	4b7d      	ldr	r3, [pc, #500]	; (8000ddc <switch_operation+0x2f4>)
 8000be8:	2203      	movs	r2, #3
 8000bea:	705a      	strb	r2, [r3, #1]
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);         //LED_RESET
 8000bec:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <switch_operation+0x304>)
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	4b7c      	ldr	r3, [pc, #496]	; (8000de4 <switch_operation+0x2fc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_GPIO_WritePin(RELAY1_GPIO_Port,RELAY1_Pin,GPIO_PIN_RESET);//RELAY_OFF
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	487b      	ldr	r0, [pc, #492]	; (8000de8 <switch_operation+0x300>)
 8000bfc:	f001 ffef 	bl	8002bde <HAL_GPIO_WritePin>
					Tx_Switch_Satus(Switch_2,SW_OFF);
 8000c00:	2100      	movs	r1, #0
 8000c02:	2002      	movs	r0, #2
 8000c04:	f000 f990 	bl	8000f28 <Tx_Switch_Satus>
					HAL_Delay(Delay);
 8000c08:	2032      	movs	r0, #50	; 0x32
 8000c0a:	f001 fc6b 	bl	80024e4 <HAL_Delay>
		break;
 8000c0e:	e11e      	b.n	8000e4e <switch_operation+0x366>
		/*********************************** SWITCH 3 ****************************/
	case Switch_3:
		                if(SW_STS==0x01)
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d114      	bne.n	8000c40 <switch_operation+0x158>
						{
							Touch_Flag[2]=1;
 8000c16:	4b71      	ldr	r3, [pc, #452]	; (8000ddc <switch_operation+0x2f4>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	709a      	strb	r2, [r3, #2]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MAX_PWM);      //LED2
 8000c1c:	4b70      	ldr	r3, [pc, #448]	; (8000de0 <switch_operation+0x2f8>)
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	4b73      	ldr	r3, [pc, #460]	; (8000df0 <switch_operation+0x308>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_SET);  //RELAY3
 8000c26:	2201      	movs	r2, #1
 8000c28:	2110      	movs	r1, #16
 8000c2a:	4872      	ldr	r0, [pc, #456]	; (8000df4 <switch_operation+0x30c>)
 8000c2c:	f001 ffd7 	bl	8002bde <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_3,SW_ON);
 8000c30:	2101      	movs	r1, #1
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f978 	bl	8000f28 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8000c38:	2032      	movs	r0, #50	; 0x32
 8000c3a:	f001 fc53 	bl	80024e4 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);         //LED_RESET
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_3,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8000c3e:	e108      	b.n	8000e52 <switch_operation+0x36a>
						else if(SW_STS==0x00)
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8105 	bne.w	8000e52 <switch_operation+0x36a>
							 Touch_Flag[2]=3;
 8000c48:	4b64      	ldr	r3, [pc, #400]	; (8000ddc <switch_operation+0x2f4>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	709a      	strb	r2, [r3, #2]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);         //LED_RESET
 8000c4e:	4b67      	ldr	r3, [pc, #412]	; (8000dec <switch_operation+0x304>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b67      	ldr	r3, [pc, #412]	; (8000df0 <switch_operation+0x308>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(RELAY2_GPIO_Port,RELAY2_Pin,GPIO_PIN_RESET);//RELAY_OFF
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4865      	ldr	r0, [pc, #404]	; (8000df4 <switch_operation+0x30c>)
 8000c5e:	f001 ffbe 	bl	8002bde <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_3,SW_OFF);
 8000c62:	2100      	movs	r1, #0
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f95f 	bl	8000f28 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8000c6a:	2032      	movs	r0, #50	; 0x32
 8000c6c:	f001 fc3a 	bl	80024e4 <HAL_Delay>
				break;
 8000c70:	e0ef      	b.n	8000e52 <switch_operation+0x36a>
		/*********************************** SWITCH 4 ****************************/
	case Switch_4:
		                if(SW_STS==0x01)
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d114      	bne.n	8000ca2 <switch_operation+0x1ba>
						{
							Touch_Flag[3]=1;
 8000c78:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <switch_operation+0x2f4>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	70da      	strb	r2, [r3, #3]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MAX_PWM);      //LED3
 8000c7e:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <switch_operation+0x2f8>)
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	4b58      	ldr	r3, [pc, #352]	; (8000de4 <switch_operation+0x2fc>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY3_GPIO_Port,RELAY3_Pin,GPIO_PIN_SET); //RELAY4
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <switch_operation+0x310>)
 8000c8e:	f001 ffa6 	bl	8002bde <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_4,SW_ON);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2004      	movs	r0, #4
 8000c96:	f000 f947 	bl	8000f28 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8000c9a:	2032      	movs	r0, #50	; 0x32
 8000c9c:	f001 fc22 	bl	80024e4 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);         //LED_RESET
							HAL_GPIO_WritePin(RELAY3_GPIO_Port,RELAY3_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_4,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8000ca0:	e0d9      	b.n	8000e56 <switch_operation+0x36e>
						else if(SW_STS==0x00)
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f040 80d6 	bne.w	8000e56 <switch_operation+0x36e>
							 Touch_Flag[3]=3;
 8000caa:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <switch_operation+0x2f4>)
 8000cac:	2203      	movs	r2, #3
 8000cae:	70da      	strb	r2, [r3, #3]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);         //LED_RESET
 8000cb0:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <switch_operation+0x304>)
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <switch_operation+0x2fc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY3_GPIO_Port,RELAY3_Pin,GPIO_PIN_RESET);//RELAY_OFF
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	484e      	ldr	r0, [pc, #312]	; (8000df8 <switch_operation+0x310>)
 8000cc0:	f001 ff8d 	bl	8002bde <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_4,SW_OFF);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2004      	movs	r0, #4
 8000cc8:	f000 f92e 	bl	8000f28 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8000ccc:	2032      	movs	r0, #50	; 0x32
 8000cce:	f001 fc09 	bl	80024e4 <HAL_Delay>
				break;
 8000cd2:	e0c0      	b.n	8000e56 <switch_operation+0x36e>
	/*********************************** SWITCH 5 ****************************/
	case Switch_5:
		               if(SW_STS==0x01)
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d114      	bne.n	8000d04 <switch_operation+0x21c>
						{
							Touch_Flag[4]=1;
 8000cda:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <switch_operation+0x2f4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	711a      	strb	r2, [r3, #4]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM);      //LED4
 8000ce0:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <switch_operation+0x2f8>)
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <switch_operation+0x308>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY4_GPIO_Port,RELAY4_Pin,GPIO_PIN_SET); //RELAY5
 8000cea:	2201      	movs	r2, #1
 8000cec:	2110      	movs	r1, #16
 8000cee:	4842      	ldr	r0, [pc, #264]	; (8000df8 <switch_operation+0x310>)
 8000cf0:	f001 ff75 	bl	8002bde <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_5,SW_ON);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	2005      	movs	r0, #5
 8000cf8:	f000 f916 	bl	8000f28 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8000cfc:	2032      	movs	r0, #50	; 0x32
 8000cfe:	f001 fbf1 	bl	80024e4 <HAL_Delay>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);         //LED_RESET
							HAL_GPIO_WritePin(RELAY4_GPIO_Port,RELAY4_Pin,GPIO_PIN_RESET);//RELAY_OFF
							Tx_Switch_Satus(Switch_5,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8000d02:	e0aa      	b.n	8000e5a <switch_operation+0x372>
						else if(SW_STS==0x00)
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 80a7 	bne.w	8000e5a <switch_operation+0x372>
							 Touch_Flag[4]=3;
 8000d0c:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <switch_operation+0x2f4>)
 8000d0e:	2203      	movs	r2, #3
 8000d10:	711a      	strb	r2, [r3, #4]
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);         //LED_RESET
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <switch_operation+0x304>)
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <switch_operation+0x308>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c
							HAL_GPIO_WritePin(RELAY4_GPIO_Port,RELAY4_Pin,GPIO_PIN_RESET);//RELAY_OFF
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4835      	ldr	r0, [pc, #212]	; (8000df8 <switch_operation+0x310>)
 8000d22:	f001 ff5c 	bl	8002bde <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_5,SW_OFF);
 8000d26:	2100      	movs	r1, #0
 8000d28:	2005      	movs	r0, #5
 8000d2a:	f000 f8fd 	bl	8000f28 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8000d2e:	2032      	movs	r0, #50	; 0x32
 8000d30:	f001 fbd8 	bl	80024e4 <HAL_Delay>
				break;
 8000d34:	e091      	b.n	8000e5a <switch_operation+0x372>
				/*********************************** SWITCH 6 ****************************/
	case Switch_6:
					   if(SW_STS==0x01)
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d119      	bne.n	8000d70 <switch_operation+0x288>
						{
							Touch_Flag[5]=1;
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <switch_operation+0x2f4>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	715a      	strb	r2, [r3, #5]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MAX_PWM);      //LED5
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <switch_operation+0x2f8>)
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <switch_operation+0x2fc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	639a      	str	r2, [r3, #56]	; 0x38
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_SET); //RELAY5
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4828      	ldr	r0, [pc, #160]	; (8000df4 <switch_operation+0x30c>)
 8000d52:	f001 ff44 	bl	8002bde <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_SET); //RELAY6
 8000d56:	2201      	movs	r2, #1
 8000d58:	2140      	movs	r1, #64	; 0x40
 8000d5a:	4826      	ldr	r0, [pc, #152]	; (8000df4 <switch_operation+0x30c>)
 8000d5c:	f001 ff3f 	bl	8002bde <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_6,SW_ON);
 8000d60:	2101      	movs	r1, #1
 8000d62:	2006      	movs	r0, #6
 8000d64:	f000 f8e0 	bl	8000f28 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8000d68:	2032      	movs	r0, #50	; 0x32
 8000d6a:	f001 fbbb 	bl	80024e4 <HAL_Delay>
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_RESET);//RELAY_OFF
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_RESET); //RELAY6
							Tx_Switch_Satus(Switch_6,SW_OFF);
							HAL_Delay(Delay);
						}
				break;
 8000d6e:	e076      	b.n	8000e5e <switch_operation+0x376>
						else if(SW_STS==0x00)
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d173      	bne.n	8000e5e <switch_operation+0x376>
							 Touch_Flag[5]=3;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <switch_operation+0x2f4>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	715a      	strb	r2, [r3, #5]
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);         //LED_RESET
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <switch_operation+0x304>)
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <switch_operation+0x2fc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
							HAL_GPIO_WritePin(RELAY5_GPIO_Port,RELAY5_Pin,GPIO_PIN_RESET);//RELAY_OFF
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	481a      	ldr	r0, [pc, #104]	; (8000df4 <switch_operation+0x30c>)
 8000d8c:	f001 ff27 	bl	8002bde <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(RELAY6_GPIO_Port,RELAY6_Pin,GPIO_PIN_RESET); //RELAY6
 8000d90:	2200      	movs	r2, #0
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	4817      	ldr	r0, [pc, #92]	; (8000df4 <switch_operation+0x30c>)
 8000d96:	f001 ff22 	bl	8002bde <HAL_GPIO_WritePin>
							Tx_Switch_Satus(Switch_6,SW_OFF);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2006      	movs	r0, #6
 8000d9e:	f000 f8c3 	bl	8000f28 <Tx_Switch_Satus>
							HAL_Delay(Delay);
 8000da2:	2032      	movs	r0, #50	; 0x32
 8000da4:	f001 fb9e 	bl	80024e4 <HAL_Delay>
				break;
 8000da8:	e059      	b.n	8000e5e <switch_operation+0x376>

				/********************DIMMER_SWITCH_OPERATION*********************/
	case Switch_7:
			               if(SW_STS==0x01)
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d127      	bne.n	8000e00 <switch_operation+0x318>
							{
								Touch_Flag[6]=1;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <switch_operation+0x2f4>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	719a      	strb	r2, [r3, #6]
								DIMMER_FLAG=1;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <switch_operation+0x314>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
								//  a=1;
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MAX_PWM);      //LED6
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <switch_operation+0x2f8>)
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <switch_operation+0x308>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	639a      	str	r2, [r3, #56]	; 0x38
								Tx_Switch_Satus(Switch_7,SW_ON);
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	2007      	movs	r0, #7
 8000dca:	f000 f8ad 	bl	8000f28 <Tx_Switch_Satus>
								HAL_Delay(Delay);
 8000dce:	2032      	movs	r0, #50	; 0x32
 8000dd0:	f001 fb88 	bl	80024e4 <HAL_Delay>
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
								 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
								Tx_Switch_Satus(Switch_7,SW_OFF);
								HAL_Delay(Delay);
							}
					break;
 8000dd4:	e045      	b.n	8000e62 <switch_operation+0x37a>
 8000dd6:	bf00      	nop
 8000dd8:	20000098 	.word	0x20000098
 8000ddc:	200000ec 	.word	0x200000ec
 8000de0:	20000005 	.word	0x20000005
 8000de4:	20000328 	.word	0x20000328
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	20000004 	.word	0x20000004
 8000df0:	20000370 	.word	0x20000370
 8000df4:	40011800 	.word	0x40011800
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	200000f5 	.word	0x200000f5
							else if(SW_STS==0x00)
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d12d      	bne.n	8000e62 <switch_operation+0x37a>
								 Touch_Flag[6]=3;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <switch_operation+0x384>)
 8000e08:	2203      	movs	r2, #3
 8000e0a:	719a      	strb	r2, [r3, #6]
									DIMMER_FLAG=0;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <switch_operation+0x388>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
									a=0;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <switch_operation+0x38c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
								__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MIN_PWM);         //LED_RESET
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <switch_operation+0x390>)
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <switch_operation+0x394>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	639a      	str	r2, [r3, #56]	; 0x38
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <switch_operation+0x390>)
 8000e24:	781a      	ldrb	r2, [r3, #0]
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <switch_operation+0x394>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34
								 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <switch_operation+0x390>)
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <switch_operation+0x398>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
								Tx_Switch_Satus(Switch_7,SW_OFF);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2007      	movs	r0, #7
 8000e3a:	f000 f875 	bl	8000f28 <Tx_Switch_Satus>
								HAL_Delay(Delay);
 8000e3e:	2032      	movs	r0, #50	; 0x32
 8000e40:	f001 fb50 	bl	80024e4 <HAL_Delay>
					break;
 8000e44:	e00d      	b.n	8000e62 <switch_operation+0x37a>
	default:
		break;
 8000e46:	bf00      	nop
 8000e48:	e00c      	b.n	8000e64 <switch_operation+0x37c>
	break;
 8000e4a:	bf00      	nop
 8000e4c:	e00a      	b.n	8000e64 <switch_operation+0x37c>
		break;
 8000e4e:	bf00      	nop
 8000e50:	e008      	b.n	8000e64 <switch_operation+0x37c>
				break;
 8000e52:	bf00      	nop
 8000e54:	e006      	b.n	8000e64 <switch_operation+0x37c>
				break;
 8000e56:	bf00      	nop
 8000e58:	e004      	b.n	8000e64 <switch_operation+0x37c>
				break;
 8000e5a:	bf00      	nop
 8000e5c:	e002      	b.n	8000e64 <switch_operation+0x37c>
				break;
 8000e5e:	bf00      	nop
 8000e60:	e000      	b.n	8000e64 <switch_operation+0x37c>
					break;
 8000e62:	bf00      	nop
										}
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000ec 	.word	0x200000ec
 8000e70:	200000f5 	.word	0x200000f5
 8000e74:	2000027c 	.word	0x2000027c
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	20000370 	.word	0x20000370
 8000e80:	20000298 	.word	0x20000298

08000e84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INTERRUPT_PIN_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d112      	bne.n	8000eba <HAL_GPIO_EXTI_Callback+0x36>
    {
    	if( a == 1 )
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_GPIO_EXTI_Callback+0x30>
    	{
    	     a =0;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]

    	   __HAL_TIM_SET_AUTORELOAD(&htim2, DIMMER_COUNT);
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x48>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x48>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000eb2:	60d3      	str	r3, [r2, #12]

    	}
    	 HAL_TIM_Base_Start_IT(&htim2);
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000eb6:	f003 fb2d 	bl	8004514 <HAL_TIM_Base_Start_IT>
    }
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000027c 	.word	0x2000027c
 8000ec8:	200002e0 	.word	0x200002e0
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	 HAL_TIM_Base_Stop_IT(&htim2);
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000eda:	f003 fb6d 	bl	80045b8 <HAL_TIM_Base_Stop_IT>
	 HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin,GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ee6:	f001 fe7a 	bl	8002bde <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000eea:	2005      	movs	r0, #5
 8000eec:	f001 fafa 	bl	80024e4 <HAL_Delay>
     HAL_GPIO_WritePin(DIMMER_GPIO_Port, DIMMER_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ef8:	f001 fe71 	bl	8002bde <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200002e0 	.word	0x200002e0
 8000f08:	40010800 	.word	0x40010800

08000f0c <switch_long_press>:
void switch_long_press(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
       HAL_UART_Transmit(&huart2,Longpress_Tx_Buff,sizeof(Longpress_Tx_Buff),100);
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	220a      	movs	r2, #10
 8000f14:	4902      	ldr	r1, [pc, #8]	; (8000f20 <switch_long_press+0x14>)
 8000f16:	4803      	ldr	r0, [pc, #12]	; (8000f24 <switch_long_press+0x18>)
 8000f18:	f004 fad6 	bl	80054c8 <HAL_UART_Transmit>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000004c 	.word	0x2000004c
 8000f24:	200003b8 	.word	0x200003b8

08000f28 <Tx_Switch_Satus>:
void Tx_Switch_Satus(uint8_t SW_NO, uint8_t SW_STS)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	    *  Switch_Touch_Tx_Buff[8] and Switch_Touch_Tx_Buff[9] Data Length
	    *  Switch_Touch_Tx_Buff[10] Switch Status
	    *  Switch_Touch_Tx_Buff[11] CRC {CRC is remainder  sum of all byte divided by 256 }
		*/

		uint8_t Switch_Touch_Tx_Buff[12] = {0x55,0xAA,0x03,0x07,0x00,0x05,0x01,0x01,0x00,0x01,0x00,0x00};  //Data frame for sending Switch Status
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <Tx_Switch_Satus+0x78>)
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}


		uint8_t Check_Sum = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	76bb      	strb	r3, [r7, #26]
		if(SW_NO == Switch_6)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d101      	bne.n	8000f52 <Tx_Switch_Satus+0x2a>
				{
					Switch_Touch_Tx_Buff[6] = 0x06;
 8000f4e:	2306      	movs	r3, #6
 8000f50:	74bb      	strb	r3, [r7, #18]

				}

		Switch_Touch_Tx_Buff[6] = SW_NO; //SWITCH_NUMBER
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	74bb      	strb	r3, [r7, #18]
		Switch_Touch_Tx_Buff[10] = SW_STS; //SWITCH ON AND OFF
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	75bb      	strb	r3, [r7, #22]

		uint32_t Tx_Data_Sum = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
	    for(uint8_t i =0;i < sizeof(Switch_Touch_Tx_Buff); i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	76fb      	strb	r3, [r7, #27]
 8000f62:	e00b      	b.n	8000f7c <Tx_Switch_Satus+0x54>
	    {
	       Tx_Data_Sum += Switch_Touch_Tx_Buff[i];
 8000f64:	7efb      	ldrb	r3, [r7, #27]
 8000f66:	3320      	adds	r3, #32
 8000f68:	443b      	add	r3, r7
 8000f6a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	4413      	add	r3, r2
 8000f74:	61fb      	str	r3, [r7, #28]
	    for(uint8_t i =0;i < sizeof(Switch_Touch_Tx_Buff); i++)
 8000f76:	7efb      	ldrb	r3, [r7, #27]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	76fb      	strb	r3, [r7, #27]
 8000f7c:	7efb      	ldrb	r3, [r7, #27]
 8000f7e:	2b0b      	cmp	r3, #11
 8000f80:	d9f0      	bls.n	8000f64 <Tx_Switch_Satus+0x3c>
	    }

	    Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	76bb      	strb	r3, [r7, #26]
	    Switch_Touch_Tx_Buff[11] = Check_Sum ;
 8000f86:	7ebb      	ldrb	r3, [r7, #26]
 8000f88:	75fb      	strb	r3, [r7, #23]

	    HAL_UART_Transmit(&huart2,Switch_Touch_Tx_Buff,sizeof(Switch_Touch_Tx_Buff),100);
 8000f8a:	f107 010c 	add.w	r1, r7, #12
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	220c      	movs	r2, #12
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <Tx_Switch_Satus+0x7c>)
 8000f94:	f004 fa98 	bl	80054c8 <HAL_UART_Transmit>

}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	08005f0c 	.word	0x08005f0c
 8000fa4:	200003b8 	.word	0x200003b8

08000fa8 <DIMMER_TX>:
void DIMMER_TX(uint8_t DIM, uint8_t DIMMER_COUNT)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]

	uint8_t DIMMER_Tx_Buff[15] = {0x55,0xAA,0x03,0x07,0x00,0x08,0x01,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00};  //Data frame for sending DIMMER Status
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <DIMMER_TX+0x80>)
 8000fba:	f107 0408 	add.w	r4, r7, #8
 8000fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc0:	c407      	stmia	r4!, {r0, r1, r2}
 8000fc2:	8023      	strh	r3, [r4, #0]
 8000fc4:	3402      	adds	r4, #2
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	7023      	strb	r3, [r4, #0]

			uint8_t Check_Sum = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	76bb      	strb	r3, [r7, #26]

				//Switch_Touch_Tx_Buff[10] = DIMMER_COUNT;
			    DIMMER_Tx_Buff[6]=DIM;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	73bb      	strb	r3, [r7, #14]
				DIMMER_Tx_Buff[10]= DIMMER_COUNT>>24 & 0xFF;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	74bb      	strb	r3, [r7, #18]
				DIMMER_Tx_Buff[11]= DIMMER_COUNT>>16 & 0xFF;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	74fb      	strb	r3, [r7, #19]
				DIMMER_Tx_Buff[12]= DIMMER_COUNT>>8 & 0xFF;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	753b      	strb	r3, [r7, #20]
				DIMMER_Tx_Buff[13]= DIMMER_COUNT>>0 & 0xFF;
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	757b      	strb	r3, [r7, #21]
			uint32_t Tx_Data_Sum = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
			  for(uint8_t i =0;i < sizeof(DIMMER_Tx_Buff); i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	76fb      	strb	r3, [r7, #27]
 8000fea:	e00b      	b.n	8001004 <DIMMER_TX+0x5c>
				    {
				       Tx_Data_Sum += DIMMER_Tx_Buff[i];
 8000fec:	7efb      	ldrb	r3, [r7, #27]
 8000fee:	3320      	adds	r3, #32
 8000ff0:	443b      	add	r3, r7
 8000ff2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	61fb      	str	r3, [r7, #28]
			  for(uint8_t i =0;i < sizeof(DIMMER_Tx_Buff); i++)
 8000ffe:	7efb      	ldrb	r3, [r7, #27]
 8001000:	3301      	adds	r3, #1
 8001002:	76fb      	strb	r3, [r7, #27]
 8001004:	7efb      	ldrb	r3, [r7, #27]
 8001006:	2b0e      	cmp	r3, #14
 8001008:	d9f0      	bls.n	8000fec <DIMMER_TX+0x44>
				    }
			  Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	76bb      	strb	r3, [r7, #26]
			  DIMMER_Tx_Buff[14] = Check_Sum ;
 800100e:	7ebb      	ldrb	r3, [r7, #26]
 8001010:	75bb      	strb	r3, [r7, #22]
			  HAL_UART_Transmit(&huart2,DIMMER_Tx_Buff,sizeof(DIMMER_Tx_Buff),100);
 8001012:	f107 0108 	add.w	r1, r7, #8
 8001016:	2364      	movs	r3, #100	; 0x64
 8001018:	220f      	movs	r2, #15
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <DIMMER_TX+0x84>)
 800101c:	f004 fa54 	bl	80054c8 <HAL_UART_Transmit>

}
 8001020:	bf00      	nop
 8001022:	3724      	adds	r7, #36	; 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	08005f18 	.word	0x08005f18
 800102c:	200003b8 	.word	0x200003b8

08001030 <HAL_UART_RxCpltCallback>:
//Interrupt callback routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
     Cyclic_Buffer[wrI]=RX_Buffer;
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_UART_RxCpltCallback+0x4c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_UART_RxCpltCallback+0x50>)
 8001040:	7819      	ldrb	r1, [r3, #0]
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_UART_RxCpltCallback+0x54>)
 8001044:	5499      	strb	r1, [r3, r2]
	 wrI=( wrI + 1 )%256;
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_UART_RxCpltCallback+0x4c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	425a      	negs	r2, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	bf58      	it	pl
 8001054:	4253      	negpl	r3, r2
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_UART_RxCpltCallback+0x4c>)
 800105a:	701a      	strb	r2, [r3, #0]
	 Count++;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_UART_RxCpltCallback+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_UART_RxCpltCallback+0x58>)
 8001066:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_IT(&huart2, &RX_Buffer,1);
 8001068:	2201      	movs	r2, #1
 800106a:	4905      	ldr	r1, [pc, #20]	; (8001080 <HAL_UART_RxCpltCallback+0x50>)
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <HAL_UART_RxCpltCallback+0x5c>)
 800106e:	f004 fabd 	bl	80055ec <HAL_UART_Receive_IT>
	 //HAL_UART_Transmit(&huart2, "vishnu", 6, 100);

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000f6 	.word	0x200000f6
 8001080:	20000265 	.word	0x20000265
 8001084:	200000fc 	.word	0x200000fc
 8001088:	200000f8 	.word	0x200000f8
 800108c:	200003b8 	.word	0x200003b8

08001090 <Uart_Read_data>:
/****************USART_READ****************/
void Uart_Read_data()
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
 if(Count !=0)
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <Uart_Read_data+0xf0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d06c      	beq.n	8001176 <Uart_Read_data+0xe6>
		 {
	        RX_Buffer =  Cyclic_Buffer[rdI];
 800109c:	4b39      	ldr	r3, [pc, #228]	; (8001184 <Uart_Read_data+0xf4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <Uart_Read_data+0xf8>)
 80010a4:	5c9a      	ldrb	r2, [r3, r2]
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <Uart_Read_data+0xfc>)
 80010a8:	701a      	strb	r2, [r3, #0]
	        rdI=( rdI + 1 )%256;
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <Uart_Read_data+0xf4>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	425a      	negs	r2, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	bf58      	it	pl
 80010b8:	4253      	negpl	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <Uart_Read_data+0xf4>)
 80010be:	701a      	strb	r2, [r3, #0]
	 		 Count--;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <Uart_Read_data+0xf0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <Uart_Read_data+0xf0>)
 80010ca:	701a      	strb	r2, [r3, #0]
	 		 if(Count == 0)
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <Uart_Read_data+0xf0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <Uart_Read_data+0x4c>
	 			       {
	 				       rdI = wrI;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <Uart_Read_data+0x100>)
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <Uart_Read_data+0xf4>)
 80010da:	701a      	strb	r2, [r3, #0]
	 			       }

	 		         Rx_Second_byte	 =RX_Buffer;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <Uart_Read_data+0xfc>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <Uart_Read_data+0x104>)
 80010e2:	701a      	strb	r2, [r3, #0]
	 		      if((Rx_Second_byte == 0xAA) && (Rx_First_byte == 0x55))
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <Uart_Read_data+0x104>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2baa      	cmp	r3, #170	; 0xaa
 80010ea:	d116      	bne.n	800111a <Uart_Read_data+0x8a>
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <Uart_Read_data+0x108>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b55      	cmp	r3, #85	; 0x55
 80010f2:	d112      	bne.n	800111a <Uart_Read_data+0x8a>
	 			       {
	 			           RX_data_Count = 0;
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <Uart_Read_data+0x10c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
	 			           RX_Data_Start_Flag = 1;
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <Uart_Read_data+0x110>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
	 			           RX_Data[RX_data_Count] = Rx_First_byte;
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <Uart_Read_data+0x10c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <Uart_Read_data+0x108>)
 8001108:	7819      	ldrb	r1, [r3, #0]
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <Uart_Read_data+0x114>)
 800110c:	5499      	strb	r1, [r3, r2]
	 			           RX_data_Count++;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <Uart_Read_data+0x10c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <Uart_Read_data+0x10c>)
 8001118:	701a      	strb	r2, [r3, #0]
	 			       }
	 			       if(RX_Data_Start_Flag == 1)
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <Uart_Read_data+0x110>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d125      	bne.n	800116e <Uart_Read_data+0xde>
	 			       {
	 			           RX_Data[RX_data_Count] = RX_Buffer;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <Uart_Read_data+0x10c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <Uart_Read_data+0xfc>)
 800112a:	7819      	ldrb	r1, [r3, #0]
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <Uart_Read_data+0x114>)
 800112e:	5499      	strb	r1, [r3, r2]
	 			           if(RX_data_Count == 5)
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <Uart_Read_data+0x10c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d106      	bne.n	8001146 <Uart_Read_data+0xb6>
	 			           {
	 			        	  RX_data_length = RX_Data[RX_data_Count];
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <Uart_Read_data+0x10c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <Uart_Read_data+0x114>)
 8001140:	5c9a      	ldrb	r2, [r3, r2]
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <Uart_Read_data+0x118>)
 8001144:	701a      	strb	r2, [r3, #0]

	 			           }
	 			           if(RX_data_Count == (6 + RX_data_length))
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <Uart_Read_data+0x10c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <Uart_Read_data+0x118>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	3306      	adds	r3, #6
 8001152:	429a      	cmp	r2, r3
 8001154:	d105      	bne.n	8001162 <Uart_Read_data+0xd2>
	 			           {

	 			               RX_Data_Start_Flag = 0;
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <Uart_Read_data+0x110>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
	 			               RX_Complete_flag = 1;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <Uart_Read_data+0x11c>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
	 			             //HAL_UART_Transmit(&huart2, "URD", 3, 100);
	 			           }
	 			          RX_data_Count++;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <Uart_Read_data+0x10c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <Uart_Read_data+0x10c>)
 800116c:	701a      	strb	r2, [r3, #0]
	 			       }
	 			       Rx_First_byte  = Rx_Second_byte;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <Uart_Read_data+0x104>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <Uart_Read_data+0x108>)
 8001174:	701a      	strb	r2, [r3, #0]
		 }
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200000f8 	.word	0x200000f8
 8001184:	200000f7 	.word	0x200000f7
 8001188:	200000fc 	.word	0x200000fc
 800118c:	20000265 	.word	0x20000265
 8001190:	200000f6 	.word	0x200000f6
 8001194:	200001fd 	.word	0x200001fd
 8001198:	200001fc 	.word	0x200001fc
 800119c:	20000264 	.word	0x20000264
 80011a0:	20000267 	.word	0x20000267
 80011a4:	20000200 	.word	0x20000200
 80011a8:	20000266 	.word	0x20000266
 80011ac:	20000268 	.word	0x20000268

080011b0 <Rx_Data_evaluation>:
void Rx_Data_evaluation(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
	if(RX_Complete_flag==1)
 80011b6:	4b9a      	ldr	r3, [pc, #616]	; (8001420 <Rx_Data_evaluation+0x270>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	f040 812b 	bne.w	8001416 <Rx_Data_evaluation+0x266>
	{

		        uint32_t Rx_Data_Sum = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]

			    uint8_t Check_Sum = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	72bb      	strb	r3, [r7, #10]

			    RX_Complete_flag = 0;
 80011c8:	4b95      	ldr	r3, [pc, #596]	; (8001420 <Rx_Data_evaluation+0x270>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]

			    for(uint8_t i=0 ; i< (RX_data_Count - 1);i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	72fb      	strb	r3, [r7, #11]
 80011d2:	e009      	b.n	80011e8 <Rx_Data_evaluation+0x38>
			    {
			    	Rx_Data_Sum +=	RX_Data[i];
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	4a93      	ldr	r2, [pc, #588]	; (8001424 <Rx_Data_evaluation+0x274>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
			    for(uint8_t i=0 ; i< (RX_data_Count - 1);i++)
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	3301      	adds	r3, #1
 80011e6:	72fb      	strb	r3, [r7, #11]
 80011e8:	7afa      	ldrb	r2, [r7, #11]
 80011ea:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <Rx_Data_evaluation+0x278>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbef      	blt.n	80011d4 <Rx_Data_evaluation+0x24>
			    }

			    Check_Sum = (uint8_t)((Rx_Data_Sum)%(256));
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	72bb      	strb	r3, [r7, #10]

			    if( Check_Sum == RX_Data[(RX_data_Count - 1)])
 80011f8:	4b8b      	ldr	r3, [pc, #556]	; (8001428 <Rx_Data_evaluation+0x278>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a89      	ldr	r2, [pc, #548]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	7aba      	ldrb	r2, [r7, #10]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8103 	bne.w	8001410 <Rx_Data_evaluation+0x260>
			    {
				 if(RX_data_Count >= 5)
 800120a:	4b87      	ldr	r3, [pc, #540]	; (8001428 <Rx_Data_evaluation+0x278>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b04      	cmp	r3, #4
 8001210:	f240 80fe 	bls.w	8001410 <Rx_Data_evaluation+0x260>
				 {
			    	/*******************HEART_BEAT_sending**************/
			    	if(RX_Data[3]==0x00)
 8001214:	4b83      	ldr	r3, [pc, #524]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001216:	78db      	ldrb	r3, [r3, #3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d13f      	bne.n	800129c <Rx_Data_evaluation+0xec>
			    	{
			    		 if(Rx_CNT == 0)
 800121c:	4b83      	ldr	r3, [pc, #524]	; (800142c <Rx_Data_evaluation+0x27c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10e      	bne.n	8001242 <Rx_Data_evaluation+0x92>
						   {
							   HAL_UART_Transmit(&huart2, Hbt, sizeof(Hbt), 100);
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	2208      	movs	r2, #8
 8001228:	4981      	ldr	r1, [pc, #516]	; (8001430 <Rx_Data_evaluation+0x280>)
 800122a:	4882      	ldr	r0, [pc, #520]	; (8001434 <Rx_Data_evaluation+0x284>)
 800122c:	f004 f94c 	bl	80054c8 <HAL_UART_Transmit>
							 //  HAL_UART_Transmit(&huart2, "Hbt", 3, 100);
							   Rx_CNT = 1;
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <Rx_Data_evaluation+0x27c>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
							   timer_val = HAL_GetTick();
 8001236:	f001 f94b 	bl	80024d0 <HAL_GetTick>
 800123a:	4603      	mov	r3, r0
 800123c:	4a7e      	ldr	r2, [pc, #504]	; (8001438 <Rx_Data_evaluation+0x288>)
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e023      	b.n	800128a <Rx_Data_evaluation+0xda>
						   }

			    		 else
			    		 {
			    			 uint32_t  Now = HAL_GetTick();
 8001242:	f001 f945 	bl	80024d0 <HAL_GetTick>
 8001246:	6078      	str	r0, [r7, #4]
								 if(Now - timer_val < 2000)
 8001248:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <Rx_Data_evaluation+0x288>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001254:	d20c      	bcs.n	8001270 <Rx_Data_evaluation+0xc0>
								 {
									 Rx_CNT = 0;
 8001256:	4b75      	ldr	r3, [pc, #468]	; (800142c <Rx_Data_evaluation+0x27c>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
									 HAL_UART_Transmit(&huart2, Hbt, sizeof(Hbt), 100);
 800125c:	2364      	movs	r3, #100	; 0x64
 800125e:	2208      	movs	r2, #8
 8001260:	4973      	ldr	r1, [pc, #460]	; (8001430 <Rx_Data_evaluation+0x280>)
 8001262:	4874      	ldr	r0, [pc, #464]	; (8001434 <Rx_Data_evaluation+0x284>)
 8001264:	f004 f930 	bl	80054c8 <HAL_UART_Transmit>
									 Now=timer_val;
 8001268:	4b73      	ldr	r3, [pc, #460]	; (8001438 <Rx_Data_evaluation+0x288>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	e00c      	b.n	800128a <Rx_Data_evaluation+0xda>

								 }
								 else if(Rx_CNT==1)
 8001270:	4b6e      	ldr	r3, [pc, #440]	; (800142c <Rx_Data_evaluation+0x27c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d108      	bne.n	800128a <Rx_Data_evaluation+0xda>
								 {
									 HAL_UART_Transmit(&huart2, Hbt1, sizeof(Hbt1), 100);
 8001278:	2364      	movs	r3, #100	; 0x64
 800127a:	2208      	movs	r2, #8
 800127c:	496f      	ldr	r1, [pc, #444]	; (800143c <Rx_Data_evaluation+0x28c>)
 800127e:	486d      	ldr	r0, [pc, #436]	; (8001434 <Rx_Data_evaluation+0x284>)
 8001280:	f004 f922 	bl	80054c8 <HAL_UART_Transmit>
									 Now=timer_val;
 8001284:	4b6c      	ldr	r3, [pc, #432]	; (8001438 <Rx_Data_evaluation+0x288>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	607b      	str	r3, [r7, #4]
								 }

			    	     }
			    		   Tuya_Heart_Flag = 1;
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <Rx_Data_evaluation+0x290>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
			    		   Tuya_Start_Time = HAL_GetTick();
 8001290:	f001 f91e 	bl	80024d0 <HAL_GetTick>
 8001294:	4603      	mov	r3, r0
 8001296:	4a6b      	ldr	r2, [pc, #428]	; (8001444 <Rx_Data_evaluation+0x294>)
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e0b9      	b.n	8001410 <Rx_Data_evaluation+0x260>
			         }
	             	/******************PID_SENDING*********************/
			    	else if(RX_Data[3]==0x01)
 800129c:	4b61      	ldr	r3, [pc, #388]	; (8001424 <Rx_Data_evaluation+0x274>)
 800129e:	78db      	ldrb	r3, [r3, #3]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d109      	bne.n	80012b8 <Rx_Data_evaluation+0x108>
			    	{

			    		HAL_UART_Transmit(&huart2, PID, sizeof(PID), 100);
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	2232      	movs	r2, #50	; 0x32
 80012a8:	4967      	ldr	r1, [pc, #412]	; (8001448 <Rx_Data_evaluation+0x298>)
 80012aa:	4862      	ldr	r0, [pc, #392]	; (8001434 <Rx_Data_evaluation+0x284>)
 80012ac:	f004 f90c 	bl	80054c8 <HAL_UART_Transmit>
			    		//HAL_UART_Transmit(&huart2, "PID", 3, 100);
			    		 Tuya_flag = 1;
 80012b0:	4b66      	ldr	r3, [pc, #408]	; (800144c <Rx_Data_evaluation+0x29c>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e0ab      	b.n	8001410 <Rx_Data_evaluation+0x260>
			    	}
			    	/*************WORKING_MODE********************/
			    	 else if(RX_Data[3] == 0x02)
 80012b8:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <Rx_Data_evaluation+0x274>)
 80012ba:	78db      	ldrb	r3, [r3, #3]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d106      	bne.n	80012ce <Rx_Data_evaluation+0x11e>
					{
						HAL_UART_Transmit(&huart2, Work_Mode, sizeof(Work_Mode), 100);
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	2207      	movs	r2, #7
 80012c4:	4962      	ldr	r1, [pc, #392]	; (8001450 <Rx_Data_evaluation+0x2a0>)
 80012c6:	485b      	ldr	r0, [pc, #364]	; (8001434 <Rx_Data_evaluation+0x284>)
 80012c8:	f004 f8fe 	bl	80054c8 <HAL_UART_Transmit>
 80012cc:	e0a0      	b.n	8001410 <Rx_Data_evaluation+0x260>
						//HAL_UART_Transmit(&huart2, "WM", 3, 100);
					}
			    	/*****************WI_FI_CONNECTION*********************/
			    	 else if(RX_Data[3] == 0x03)
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <Rx_Data_evaluation+0x274>)
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d126      	bne.n	8001324 <Rx_Data_evaluation+0x174>
			    	 {
			    		 /*******AUTO-CONFIGURATION*********/
						 if(RX_Data[6] == 0x00)
 80012d6:	4b53      	ldr	r3, [pc, #332]	; (8001424 <Rx_Data_evaluation+0x274>)
 80012d8:	799b      	ldrb	r3, [r3, #6]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <Rx_Data_evaluation+0x134>
						 {
							 Idication_Flag = 2;
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <Rx_Data_evaluation+0x2a4>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	701a      	strb	r2, [r3, #0]
							// HAL_UART_Transmit(&huart2, "au", 2, 100);
						 }
						 /***************AP-MODE-INDICATION********************/
						 if(RX_Data[6] == 0x01)
 80012e4:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <Rx_Data_evaluation+0x274>)
 80012e6:	799b      	ldrb	r3, [r3, #6]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d103      	bne.n	80012f4 <Rx_Data_evaluation+0x144>
						 {
							 Idication_Flag = 3;
 80012ec:	4b59      	ldr	r3, [pc, #356]	; (8001454 <Rx_Data_evaluation+0x2a4>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e010      	b.n	8001316 <Rx_Data_evaluation+0x166>
							//HAL_UART_Transmit(&huart2, "ap", 2, 100);
						 }
						else if (RX_Data[6] == 0x02)
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <Rx_Data_evaluation+0x274>)
 80012f6:	799b      	ldrb	r3, [r3, #6]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d103      	bne.n	8001304 <Rx_Data_evaluation+0x154>
						{
							Idication_Flag = 1;
 80012fc:	4b55      	ldr	r3, [pc, #340]	; (8001454 <Rx_Data_evaluation+0x2a4>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e008      	b.n	8001316 <Rx_Data_evaluation+0x166>
							// HAL_UART_Transmit(&huart2, "D1", 2, 100);
						}
						else if (RX_Data[6] == 0x04)
 8001304:	4b47      	ldr	r3, [pc, #284]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001306:	799b      	ldrb	r3, [r3, #6]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d104      	bne.n	8001316 <Rx_Data_evaluation+0x166>
						{
							Stop_Indication();
 800130c:	f000 f958 	bl	80015c0 <Stop_Indication>
							Idication_Flag = 0;
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <Rx_Data_evaluation+0x2a4>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
							//HAL_UART_Transmit(&huart2, "D2", 2, 100);
						}
						 HAL_UART_Transmit(&huart2,WiFi_Status, sizeof(WiFi_Status), 100);
 8001316:	2364      	movs	r3, #100	; 0x64
 8001318:	2207      	movs	r2, #7
 800131a:	494f      	ldr	r1, [pc, #316]	; (8001458 <Rx_Data_evaluation+0x2a8>)
 800131c:	4845      	ldr	r0, [pc, #276]	; (8001434 <Rx_Data_evaluation+0x284>)
 800131e:	f004 f8d3 	bl	80054c8 <HAL_UART_Transmit>
 8001322:	e075      	b.n	8001410 <Rx_Data_evaluation+0x260>

			    	 }

			    	  else if (RX_Data[3] == 0x06)
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001326:	78db      	ldrb	r3, [r3, #3]
 8001328:	2b06      	cmp	r3, #6
 800132a:	d16b      	bne.n	8001404 <Rx_Data_evaluation+0x254>
					{

						if (RX_Data[6] == 0x0D)
 800132c:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <Rx_Data_evaluation+0x274>)
 800132e:	799b      	ldrb	r3, [r3, #6]
 8001330:	2b0d      	cmp	r3, #13
 8001332:	d105      	bne.n	8001340 <Rx_Data_evaluation+0x190>
						{
							Master_Switch(RX_Data[10]);
 8001334:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001336:	7a9b      	ldrb	r3, [r3, #10]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f94d 	bl	80015d8 <Master_Switch>
 800133e:	e067      	b.n	8001410 <Rx_Data_evaluation+0x260>
						}
						else if (RX_Data[6] == 0x6F)
 8001340:	4b38      	ldr	r3, [pc, #224]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001342:	799b      	ldrb	r3, [r3, #6]
 8001344:	2b6f      	cmp	r3, #111	; 0x6f
 8001346:	d105      	bne.n	8001354 <Rx_Data_evaluation+0x1a4>
						{
							set_max_pwm(RX_Data[13]);
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <Rx_Data_evaluation+0x274>)
 800134a:	7b5b      	ldrb	r3, [r3, #13]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f9b5 	bl	80016bc <set_max_pwm>
 8001352:	e05d      	b.n	8001410 <Rx_Data_evaluation+0x260>
						}
						else if (RX_Data[6] == 0x70)
 8001354:	4b33      	ldr	r3, [pc, #204]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001356:	799b      	ldrb	r3, [r3, #6]
 8001358:	2b70      	cmp	r3, #112	; 0x70
 800135a:	d105      	bne.n	8001368 <Rx_Data_evaluation+0x1b8>
						{
							set_min_pwm(RX_Data[13]);
 800135c:	4b31      	ldr	r3, [pc, #196]	; (8001424 <Rx_Data_evaluation+0x274>)
 800135e:	7b5b      	ldrb	r3, [r3, #13]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fa27 	bl	80017b4 <set_min_pwm>
 8001366:	e053      	b.n	8001410 <Rx_Data_evaluation+0x260>
						}
						else if((RX_Data[5]==0x08) && DIMMER_FLAG==1)
 8001368:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <Rx_Data_evaluation+0x274>)
 800136a:	795b      	ldrb	r3, [r3, #5]
 800136c:	2b08      	cmp	r3, #8
 800136e:	d13c      	bne.n	80013ea <Rx_Data_evaluation+0x23a>
 8001370:	4b3a      	ldr	r3, [pc, #232]	; (800145c <Rx_Data_evaluation+0x2ac>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d138      	bne.n	80013ea <Rx_Data_evaluation+0x23a>
						{

								 DIMMER_COUNTER = ((RX_Data[10]<<0 | RX_Data[11]<<8 | RX_Data[12]<<16 | RX_Data[13]<<24));
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <Rx_Data_evaluation+0x274>)
 800137a:	7a9b      	ldrb	r3, [r3, #10]
 800137c:	461a      	mov	r2, r3
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001380:	7adb      	ldrb	r3, [r3, #11]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	431a      	orrs	r2, r3
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001388:	7b1b      	ldrb	r3, [r3, #12]
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	431a      	orrs	r2, r3
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001390:	7b5b      	ldrb	r3, [r3, #13]
 8001392:	061b      	lsls	r3, r3, #24
 8001394:	4313      	orrs	r3, r2
 8001396:	461a      	mov	r2, r3
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <Rx_Data_evaluation+0x2b0>)
 800139a:	601a      	str	r2, [r3, #0]

								 DIMMER_COUNT = output_start + ((output_end - output_start) / (input_end - input_start)) * (DIMMER_COUNTER - input_start);
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <Rx_Data_evaluation+0x2b4>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <Rx_Data_evaluation+0x2b8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <Rx_Data_evaluation+0x2b4>)
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	4a2f      	ldr	r2, [pc, #188]	; (800146c <Rx_Data_evaluation+0x2bc>)
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <Rx_Data_evaluation+0x2c0>)
 80013b4:	7812      	ldrb	r2, [r2, #0]
 80013b6:	1a8a      	subs	r2, r1, r2
 80013b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <Rx_Data_evaluation+0x2b0>)
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	492b      	ldr	r1, [pc, #172]	; (8001470 <Rx_Data_evaluation+0x2c0>)
 80013c2:	7809      	ldrb	r1, [r1, #0]
 80013c4:	1a52      	subs	r2, r2, r1
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4403      	add	r3, r0
 80013cc:	4a29      	ldr	r2, [pc, #164]	; (8001474 <Rx_Data_evaluation+0x2c4>)
 80013ce:	6013      	str	r3, [r2, #0]
								 a=1;
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <Rx_Data_evaluation+0x2c8>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
								 DIMMER_TX(RX_Data[6],DIMMER_COUNT);
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <Rx_Data_evaluation+0x274>)
 80013d8:	799b      	ldrb	r3, [r3, #6]
 80013da:	4a26      	ldr	r2, [pc, #152]	; (8001474 <Rx_Data_evaluation+0x2c4>)
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fde0 	bl	8000fa8 <DIMMER_TX>
 80013e8:	e012      	b.n	8001410 <Rx_Data_evaluation+0x260>

						}
						else if(RX_Data[5]!=0x08)
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <Rx_Data_evaluation+0x274>)
 80013ec:	795b      	ldrb	r3, [r3, #5]
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d00e      	beq.n	8001410 <Rx_Data_evaluation+0x260>
						{
						 switch_operation (RX_Data[6],RX_Data[10]);
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <Rx_Data_evaluation+0x274>)
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <Rx_Data_evaluation+0x274>)
 80013f8:	7a92      	ldrb	r2, [r2, #10]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fb73 	bl	8000ae8 <switch_operation>
 8001402:	e005      	b.n	8001410 <Rx_Data_evaluation+0x260>
						}
					}
				   else if(RX_Data[3] == 0x08)
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <Rx_Data_evaluation+0x274>)
 8001406:	78db      	ldrb	r3, [r3, #3]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d101      	bne.n	8001410 <Rx_Data_evaluation+0x260>
					{
						 Status_ReadData();
 800140c:	f000 fa4e 	bl	80018ac <Status_ReadData>
					}
			   }
		}
			    RX_data_Count = 0;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <Rx_Data_evaluation+0x278>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
  }
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000268 	.word	0x20000268
 8001424:	20000200 	.word	0x20000200
 8001428:	20000264 	.word	0x20000264
 800142c:	20000269 	.word	0x20000269
 8001430:	20000058 	.word	0x20000058
 8001434:	200003b8 	.word	0x200003b8
 8001438:	2000026c 	.word	0x2000026c
 800143c:	20000060 	.word	0x20000060
 8001440:	20000270 	.word	0x20000270
 8001444:	20000274 	.word	0x20000274
 8001448:	20000008 	.word	0x20000008
 800144c:	20000278 	.word	0x20000278
 8001450:	2000003c 	.word	0x2000003c
 8001454:	20000279 	.word	0x20000279
 8001458:	20000044 	.word	0x20000044
 800145c:	200000f5 	.word	0x200000f5
 8001460:	20000280 	.word	0x20000280
 8001464:	2000027e 	.word	0x2000027e
 8001468:	2000006c 	.word	0x2000006c
 800146c:	20000068 	.word	0x20000068
 8001470:	2000027d 	.word	0x2000027d
 8001474:	20000000 	.word	0x20000000
 8001478:	2000027c 	.word	0x2000027c

0800147c <Indication>:

void Indication(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
	      static uint32_t Indication_Start_Time = 0;
		  static uint8_t Breath = 0;
		  static uint8_t Breath_Flag = 0;
		  uint32_t Now = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
		  if(Idication_Flag == 1)
 8001486:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <Indication+0x12c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d136      	bne.n	80014fc <Indication+0x80>
		  {
			  Now = HAL_GetTick();
 800148e:	f001 f81f 	bl	80024d0 <HAL_GetTick>
 8001492:	6078      	str	r0, [r7, #4]

			  if( Now - Indication_Start_Time > 50 )
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <Indication+0x130>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b32      	cmp	r3, #50	; 0x32
 800149e:	d97e      	bls.n	800159e <Indication+0x122>
			{
				  Indication_Start_Time = Now;
 80014a0:	4a42      	ldr	r2, [pc, #264]	; (80015ac <Indication+0x130>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,(Breath * 2));      //LED7
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <Indication+0x134>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	005a      	lsls	r2, r3, #1
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <Indication+0x138>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38

				  	  if(Breath == 50)
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <Indication+0x134>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b32      	cmp	r3, #50	; 0x32
 80014b8:	d103      	bne.n	80014c2 <Indication+0x46>
					 {
						 Breath_Flag = 1;
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <Indication+0x13c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	e006      	b.n	80014d0 <Indication+0x54>
					 }
					 else if (Breath == 1)
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <Indication+0x134>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <Indication+0x54>
					 {
						 Breath_Flag = 0;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <Indication+0x13c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
					 }

					 if (Breath_Flag == 0)
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <Indication+0x13c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d106      	bne.n	80014e6 <Indication+0x6a>
					 {
						 Breath++;
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <Indication+0x134>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <Indication+0x134>)
 80014e2:	701a      	strb	r2, [r3, #0]
					   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
				   }
				}

		  	   }
}
 80014e4:	e05b      	b.n	800159e <Indication+0x122>
					 else if (Breath_Flag == 1)
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <Indication+0x13c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d157      	bne.n	800159e <Indication+0x122>
						 Breath--;
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <Indication+0x134>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <Indication+0x134>)
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	e050      	b.n	800159e <Indication+0x122>
		  else if(Idication_Flag == 2)                 /****************AUTO****************/
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <Indication+0x12c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <Indication+0xd0>
			  Now = HAL_GetTick();
 8001504:	f000 ffe4 	bl	80024d0 <HAL_GetTick>
 8001508:	6078      	str	r0, [r7, #4]
			 if( Now - Indication_Start_Time > 250 )
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <Indication+0x130>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2bfa      	cmp	r3, #250	; 0xfa
 8001514:	d943      	bls.n	800159e <Indication+0x122>
				Indication_Start_Time =  Now ;
 8001516:	4a25      	ldr	r2, [pc, #148]	; (80015ac <Indication+0x130>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6013      	str	r3, [r2, #0]
		  if(Idication_Control_Flag  == 0)
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <Indication+0x140>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d107      	bne.n	8001534 <Indication+0xb8>
				Idication_Control_Flag = 1;
 8001524:	4b25      	ldr	r3, [pc, #148]	; (80015bc <Indication+0x140>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,H_PWM);      //LED7    /*************TOGGLE-LED*************/
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <Indication+0x138>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2264      	movs	r2, #100	; 0x64
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001532:	e034      	b.n	800159e <Indication+0x122>
			else if(Idication_Control_Flag  == 1)
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <Indication+0x140>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d130      	bne.n	800159e <Indication+0x122>
				Idication_Control_Flag = 0;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <Indication+0x140>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <Indication+0x138>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2214      	movs	r2, #20
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
}
 800154a:	e028      	b.n	800159e <Indication+0x122>
		  else if(Idication_Flag == 3)
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <Indication+0x12c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d124      	bne.n	800159e <Indication+0x122>
				Now = HAL_GetTick();
 8001554:	f000 ffbc 	bl	80024d0 <HAL_GetTick>
 8001558:	6078      	str	r0, [r7, #4]
				if( Now - Indication_Start_Time > 1500 )
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <Indication+0x130>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001566:	4293      	cmp	r3, r2
 8001568:	d919      	bls.n	800159e <Indication+0x122>
				   Indication_Start_Time =  Now ;
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <Indication+0x130>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6013      	str	r3, [r2, #0]
				   if(Idication_Control_Flag  == 0)
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <Indication+0x140>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d107      	bne.n	8001588 <Indication+0x10c>
					   Idication_Control_Flag = 1;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <Indication+0x140>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
					   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,H_PWM);      //LED7
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <Indication+0x138>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2264      	movs	r2, #100	; 0x64
 8001584:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001586:	e00a      	b.n	800159e <Indication+0x122>
				   else if(Idication_Control_Flag  == 1)
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <Indication+0x140>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d106      	bne.n	800159e <Indication+0x122>
					   Idication_Control_Flag = 0;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <Indication+0x140>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
					   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,L_PWM);      //LED7
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <Indication+0x138>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2214      	movs	r2, #20
 800159c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000279 	.word	0x20000279
 80015ac:	20000290 	.word	0x20000290
 80015b0:	20000294 	.word	0x20000294
 80015b4:	20000298 	.word	0x20000298
 80015b8:	20000295 	.word	0x20000295
 80015bc:	2000027a 	.word	0x2000027a

080015c0 <Stop_Indication>:
void Stop_Indication(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Z_PWM);      //LED7
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <Stop_Indication+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
		Status_ReadData();
 80015cc:	f000 f96e 	bl	80018ac <Status_ReadData>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000298 	.word	0x20000298

080015d8 <Master_Switch>:
/***************MASTER_SWITCH_APP_SIDE***********************/
void Master_Switch(uint8_t SW_STS)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
	 uint8_t Master_Switch[12] = {0x55,0xAA,0x03,0x07,0x00,0x05,0x0D,0x01,0x00,0x01,0x00,0x00};
 80015e2:	4a34      	ldr	r2, [pc, #208]	; (80016b4 <Master_Switch+0xdc>)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t Check_Sum = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]

	Master_Switch[10] = SW_STS;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	74bb      	strb	r3, [r7, #18]

	if(Master_Switch[10]==0x01)
 80015f6:	7cbb      	ldrb	r3, [r7, #18]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d11c      	bne.n	8001636 <Master_Switch+0x5e>
	{
		switch_operation(Switch_1, SW_ON);
 80015fc:	2101      	movs	r1, #1
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fa72 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_2, SW_ON);
 8001604:	2101      	movs	r1, #1
 8001606:	2002      	movs	r0, #2
 8001608:	f7ff fa6e 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_3, SW_ON);
 800160c:	2101      	movs	r1, #1
 800160e:	2003      	movs	r0, #3
 8001610:	f7ff fa6a 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_4, SW_ON);
 8001614:	2101      	movs	r1, #1
 8001616:	2004      	movs	r0, #4
 8001618:	f7ff fa66 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_5, SW_ON);
 800161c:	2101      	movs	r1, #1
 800161e:	2005      	movs	r0, #5
 8001620:	f7ff fa62 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_6, SW_ON);
 8001624:	2101      	movs	r1, #1
 8001626:	2006      	movs	r0, #6
 8001628:	f7ff fa5e 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_7, SW_ON);
 800162c:	2101      	movs	r1, #1
 800162e:	2007      	movs	r0, #7
 8001630:	f7ff fa5a 	bl	8000ae8 <switch_operation>
 8001634:	e01b      	b.n	800166e <Master_Switch+0x96>
	}
	else
	{
		switch_operation(Switch_1, SW_OFF);
 8001636:	2100      	movs	r1, #0
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff fa55 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_2, SW_OFF);
 800163e:	2100      	movs	r1, #0
 8001640:	2002      	movs	r0, #2
 8001642:	f7ff fa51 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_3, SW_OFF);
 8001646:	2100      	movs	r1, #0
 8001648:	2003      	movs	r0, #3
 800164a:	f7ff fa4d 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_4, SW_OFF);
 800164e:	2100      	movs	r1, #0
 8001650:	2004      	movs	r0, #4
 8001652:	f7ff fa49 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_5, SW_OFF);
 8001656:	2100      	movs	r1, #0
 8001658:	2005      	movs	r0, #5
 800165a:	f7ff fa45 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_6, SW_OFF);
 800165e:	2100      	movs	r1, #0
 8001660:	2006      	movs	r0, #6
 8001662:	f7ff fa41 	bl	8000ae8 <switch_operation>
		switch_operation(Switch_7, SW_OFF);
 8001666:	2100      	movs	r1, #0
 8001668:	2007      	movs	r0, #7
 800166a:	f7ff fa3d 	bl	8000ae8 <switch_operation>
	}
	 uint32_t Tx_Data_Sum = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]

		for(int i=0;i <= sizeof(Master_Switch) ;i++)
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	e00b      	b.n	8001690 <Master_Switch+0xb8>
		{

			Tx_Data_Sum+=Master_Switch[i];
 8001678:	f107 0208 	add.w	r2, r7, #8
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	61fb      	str	r3, [r7, #28]
		for(int i=0;i <= sizeof(Master_Switch) ;i++)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	3301      	adds	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d9f0      	bls.n	8001678 <Master_Switch+0xa0>
		}
		Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	75fb      	strb	r3, [r7, #23]

		Master_Switch[11] = Check_Sum ;
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	74fb      	strb	r3, [r7, #19]

		HAL_UART_Transmit(&huart2, Master_Switch, sizeof(Master_Switch), 100);
 800169e:	f107 0108 	add.w	r1, r7, #8
 80016a2:	2364      	movs	r3, #100	; 0x64
 80016a4:	220c      	movs	r2, #12
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <Master_Switch+0xe0>)
 80016a8:	f003 ff0e 	bl	80054c8 <HAL_UART_Transmit>
}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08005f28 	.word	0x08005f28
 80016b8:	200003b8 	.word	0x200003b8

080016bc <set_max_pwm>:

void set_max_pwm(uint8_t max_val)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af04      	add	r7, sp, #16
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	MAX_PWM=max_val;
 80016c6:	4a35      	ldr	r2, [pc, #212]	; (800179c <set_max_pwm+0xe0>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	7013      	strb	r3, [r2, #0]
	 if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 100) == HAL_OK)
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	2301      	movs	r3, #1
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <set_max_pwm+0xe0>)
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2310      	movs	r3, #16
 80016da:	2215      	movs	r2, #21
 80016dc:	21a0      	movs	r1, #160	; 0xa0
 80016de:	4830      	ldr	r0, [pc, #192]	; (80017a0 <set_max_pwm+0xe4>)
 80016e0:	f001 fbf2 	bl	8002ec8 <HAL_I2C_Mem_Write>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <set_max_pwm+0x34>
	        {
	            HAL_Delay(20);
 80016ea:	2014      	movs	r0, #20
 80016ec:	f000 fefa 	bl	80024e4 <HAL_Delay>
	        }
	        if(Touch_Flag[0] == 2)                   //SWITCH_ON CASE
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <set_max_pwm+0xe8>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d104      	bne.n	8001702 <set_max_pwm+0x46>
	        {
	             __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MAX_PWM);
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <set_max_pwm+0xe0>)
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <set_max_pwm+0xec>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
	        }
	        if(Touch_Flag[1] == 2)
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <set_max_pwm+0xe8>)
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d104      	bne.n	8001714 <set_max_pwm+0x58>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MAX_PWM);
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <set_max_pwm+0xe0>)
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <set_max_pwm+0xec>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
	        }
	        if(Touch_Flag[2] == 2)
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <set_max_pwm+0xe8>)
 8001716:	789b      	ldrb	r3, [r3, #2]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d104      	bne.n	8001726 <set_max_pwm+0x6a>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MAX_PWM);
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <set_max_pwm+0xe0>)
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <set_max_pwm+0xf0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
	        }
	        if(Touch_Flag[3] == 2)
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <set_max_pwm+0xe8>)
 8001728:	78db      	ldrb	r3, [r3, #3]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d104      	bne.n	8001738 <set_max_pwm+0x7c>
	        {
	        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MAX_PWM);
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <set_max_pwm+0xe0>)
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <set_max_pwm+0xec>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
	        }
	        if(Touch_Flag[4] == 2)
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <set_max_pwm+0xe8>)
 800173a:	791b      	ldrb	r3, [r3, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d104      	bne.n	800174a <set_max_pwm+0x8e>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM);
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <set_max_pwm+0xe0>)
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <set_max_pwm+0xf0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c
	        }
	        if(Touch_Flag[5] == 2)
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <set_max_pwm+0xe8>)
 800174c:	795b      	ldrb	r3, [r3, #5]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d104      	bne.n	800175c <set_max_pwm+0xa0>
	        {
	            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MAX_PWM);
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <set_max_pwm+0xe0>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <set_max_pwm+0xec>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	639a      	str	r2, [r3, #56]	; 0x38
	        }
	        if(Touch_Flag[6] == 2)
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <set_max_pwm+0xe8>)
 800175e:	799b      	ldrb	r3, [r3, #6]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d104      	bne.n	800176e <set_max_pwm+0xb2>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MAX_PWM);
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <set_max_pwm+0xe0>)
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <set_max_pwm+0xf0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
	        }
	        if(Touch_Flag[7] == 2)
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <set_max_pwm+0xe8>)
 8001770:	79db      	ldrb	r3, [r3, #7]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d104      	bne.n	8001780 <set_max_pwm+0xc4>
	        {
	            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <set_max_pwm+0xe0>)
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <set_max_pwm+0xf0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	635a      	str	r2, [r3, #52]	; 0x34
	        }
	        if(Touch_Flag[8] == 2)
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <set_max_pwm+0xe8>)
 8001782:	7a1b      	ldrb	r3, [r3, #8]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d104      	bne.n	8001792 <set_max_pwm+0xd6>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MAX_PWM);
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <set_max_pwm+0xe0>)
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <set_max_pwm+0xf4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
			}

}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000005 	.word	0x20000005
 80017a0:	20000098 	.word	0x20000098
 80017a4:	200000ec 	.word	0x200000ec
 80017a8:	20000328 	.word	0x20000328
 80017ac:	20000370 	.word	0x20000370
 80017b0:	20000298 	.word	0x20000298

080017b4 <set_min_pwm>:
void set_min_pwm(uint8_t min_val)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	MIN_PWM=min_val;
 80017be:	4a35      	ldr	r2, [pc, #212]	; (8001894 <set_min_pwm+0xe0>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	7013      	strb	r3, [r2, #0]
	 if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 100) == HAL_OK)
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	9302      	str	r3, [sp, #8]
 80017c8:	2301      	movs	r3, #1
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	4b31      	ldr	r3, [pc, #196]	; (8001894 <set_min_pwm+0xe0>)
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2310      	movs	r3, #16
 80017d2:	2214      	movs	r2, #20
 80017d4:	21a0      	movs	r1, #160	; 0xa0
 80017d6:	4830      	ldr	r0, [pc, #192]	; (8001898 <set_min_pwm+0xe4>)
 80017d8:	f001 fb76 	bl	8002ec8 <HAL_I2C_Mem_Write>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <set_min_pwm+0x34>
	        {
	            HAL_Delay(20);
 80017e2:	2014      	movs	r0, #20
 80017e4:	f000 fe7e 	bl	80024e4 <HAL_Delay>
	        }
	            if(Touch_Flag[0] == 0)                   //SWITCH_ON CASE
 80017e8:	4b2c      	ldr	r3, [pc, #176]	; (800189c <set_min_pwm+0xe8>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <set_min_pwm+0x46>
		        {
		             __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,MIN_PWM);
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <set_min_pwm+0xe0>)
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <set_min_pwm+0xec>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34
		        }
		        if(Touch_Flag[1] == 0)
 80017fa:	4b28      	ldr	r3, [pc, #160]	; (800189c <set_min_pwm+0xe8>)
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d104      	bne.n	800180c <set_min_pwm+0x58>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4,MIN_PWM);
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <set_min_pwm+0xe0>)
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <set_min_pwm+0xec>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	641a      	str	r2, [r3, #64]	; 0x40
		        }
		        if(Touch_Flag[2] == 0)
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <set_min_pwm+0xe8>)
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <set_min_pwm+0x6a>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,MIN_PWM);
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <set_min_pwm+0xe0>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <set_min_pwm+0xf0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
		        }
		        if(Touch_Flag[3] == 0)
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <set_min_pwm+0xe8>)
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d104      	bne.n	8001830 <set_min_pwm+0x7c>
		        {
		        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,MIN_PWM);
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <set_min_pwm+0xe0>)
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <set_min_pwm+0xec>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
		        }
		        if(Touch_Flag[4] == 0)
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <set_min_pwm+0xe8>)
 8001832:	791b      	ldrb	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <set_min_pwm+0x8e>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM);
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <set_min_pwm+0xe0>)
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <set_min_pwm+0xf0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	63da      	str	r2, [r3, #60]	; 0x3c
		        }
		        if(Touch_Flag[5] == 0)
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <set_min_pwm+0xe8>)
 8001844:	795b      	ldrb	r3, [r3, #5]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d104      	bne.n	8001854 <set_min_pwm+0xa0>
		        {
		            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,MIN_PWM);
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <set_min_pwm+0xe0>)
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <set_min_pwm+0xec>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
		        }
		        if(Touch_Flag[6] == 0)
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <set_min_pwm+0xe8>)
 8001856:	799b      	ldrb	r3, [r3, #6]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <set_min_pwm+0xb2>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,MIN_PWM);
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <set_min_pwm+0xe0>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <set_min_pwm+0xf0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
		        }
		        if(Touch_Flag[7] == 0)
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <set_min_pwm+0xe8>)
 8001868:	79db      	ldrb	r3, [r3, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d104      	bne.n	8001878 <set_min_pwm+0xc4>
		        {
		            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <set_min_pwm+0xe0>)
 8001870:	781a      	ldrb	r2, [r3, #0]
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <set_min_pwm+0xf0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	635a      	str	r2, [r3, #52]	; 0x34
		        }
		        if(Touch_Flag[8] == 0)
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <set_min_pwm+0xe8>)
 800187a:	7a1b      	ldrb	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d104      	bne.n	800188a <set_min_pwm+0xd6>
				{
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,MIN_PWM);
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <set_min_pwm+0xe0>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <set_min_pwm+0xf4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	635a      	str	r2, [r3, #52]	; 0x34
				}

}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000004 	.word	0x20000004
 8001898:	20000098 	.word	0x20000098
 800189c:	200000ec 	.word	0x200000ec
 80018a0:	20000328 	.word	0x20000328
 80018a4:	20000370 	.word	0x20000370
 80018a8:	20000298 	.word	0x20000298

080018ac <Status_ReadData>:
void Status_ReadData()
{
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b096      	sub	sp, #88	; 0x58
 80018b0:	af04      	add	r7, sp, #16
	uint8_t  Status_Tx_Buff[47]={0x55,0xAA,0x03,0x07,0x00,0x28,0x01,0x01,0x00,0x01,0x00,0x02,0x01,0x00,0x01,0x00,0x03,0x01,0x00,0x01,0x00,0x04,0x01,0x00,0x01,0x00,0x05,0x01,0x00,0x01,0x00,0x06,0x01,0x00,0x01,0x00,0x65,0x01,0x00,0x01,0x00,0x66,0x01,0x00,0x01,0x00,0x00};
 80018b2:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <Status_ReadData+0x11c>)
 80018b4:	f107 0410 	add.w	r4, r7, #16
 80018b8:	461d      	mov	r5, r3
 80018ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018c6:	c407      	stmia	r4!, {r0, r1, r2}
 80018c8:	8023      	strh	r3, [r4, #0]
 80018ca:	3402      	adds	r4, #2
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	7023      	strb	r3, [r4, #0]
	uint8_t  Switch_StatusNew[8];
	uint8_t  Check_Sum = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	uint32_t Tx_Data_Sum = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t  SW_State=0;
 80018da:	2300      	movs	r3, #0
 80018dc:	71fb      	strb	r3, [r7, #7]
	uint8_t  k =0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	for(uint8_t j=1;j<=NUMBER_OF_SWITCHES;j++)
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80018ea:	e024      	b.n	8001936 <Status_ReadData+0x8a>
	{
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, j, I2C_MEMADD_SIZE_16BIT, &SW_State, 1, 10) == HAL_OK)
 80018ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	230a      	movs	r3, #10
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	2301      	movs	r3, #1
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2310      	movs	r3, #16
 8001900:	21a0      	movs	r1, #160	; 0xa0
 8001902:	4832      	ldr	r0, [pc, #200]	; (80019cc <Status_ReadData+0x120>)
 8001904:	f001 fbda 	bl	80030bc <HAL_I2C_Mem_Read>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10e      	bne.n	800192c <Status_ReadData+0x80>
		{
			  HAL_Delay(20);
 800190e:	2014      	movs	r0, #20
 8001910:	f000 fde8 	bl	80024e4 <HAL_Delay>
			  Switch_StatusNew[k]= SW_State;
 8001914:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001918:	79fa      	ldrb	r2, [r7, #7]
 800191a:	3348      	adds	r3, #72	; 0x48
 800191c:	443b      	add	r3, r7
 800191e:	f803 2c40 	strb.w	r2, [r3, #-64]
			  k++;
 8001922:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001926:	3301      	adds	r3, #1
 8001928:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for(uint8_t j=1;j<=NUMBER_OF_SWITCHES;j++)
 800192c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001930:	3301      	adds	r3, #1
 8001932:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001936:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800193a:	2b08      	cmp	r3, #8
 800193c:	d9d6      	bls.n	80018ec <Status_ReadData+0x40>
		}
	}

	Status_Tx_Buff[10] =   Switch_StatusNew[0];
 800193e:	7a3b      	ldrb	r3, [r7, #8]
 8001940:	76bb      	strb	r3, [r7, #26]
	Status_Tx_Buff[15] =   Switch_StatusNew[1];
 8001942:	7a7b      	ldrb	r3, [r7, #9]
 8001944:	77fb      	strb	r3, [r7, #31]
	Status_Tx_Buff[20] =   Switch_StatusNew[2];
 8001946:	7abb      	ldrb	r3, [r7, #10]
 8001948:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Status_Tx_Buff[25] =   Switch_StatusNew[3];
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Status_Tx_Buff[30] =   Switch_StatusNew[4];
 8001952:	7b3b      	ldrb	r3, [r7, #12]
 8001954:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	Status_Tx_Buff[35] =   Switch_StatusNew[5];
 8001958:	7b7b      	ldrb	r3, [r7, #13]
 800195a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Status_Tx_Buff[40] =   Switch_StatusNew[6];
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	Status_Tx_Buff[45] =   Switch_StatusNew[7];
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	for(uint8_t i = 0; i <= 45; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001970:	e00e      	b.n	8001990 <Status_ReadData+0xe4>
	{
	   Tx_Data_Sum += Status_Tx_Buff[i];
 8001972:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001976:	3348      	adds	r3, #72	; 0x48
 8001978:	443b      	add	r3, r7
 800197a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800197e:	461a      	mov	r2, r3
 8001980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001982:	4413      	add	r3, r2
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t i = 0; i <= 45; i++)
 8001986:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800198a:	3301      	adds	r3, #1
 800198c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001990:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001994:	2b2d      	cmp	r3, #45	; 0x2d
 8001996:	d9ec      	bls.n	8001972 <Status_ReadData+0xc6>
	}

	Check_Sum  = (uint8_t)((Tx_Data_Sum)%256);
 8001998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	Status_Tx_Buff[46] = Check_Sum ;
 800199e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80019a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	HAL_UART_Transmit(&huart2,  Status_Tx_Buff, sizeof(Status_Tx_Buff),100);
 80019a6:	f107 0110 	add.w	r1, r7, #16
 80019aa:	2364      	movs	r3, #100	; 0x64
 80019ac:	222f      	movs	r2, #47	; 0x2f
 80019ae:	4808      	ldr	r0, [pc, #32]	; (80019d0 <Status_ReadData+0x124>)
 80019b0:	f003 fd8a 	bl	80054c8 <HAL_UART_Transmit>
	Check_Sum = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	Tx_Data_Sum = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44

}
 80019be:	bf00      	nop
 80019c0:	3748      	adds	r7, #72	; 0x48
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdb0      	pop	{r4, r5, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08005f34 	.word	0x08005f34
 80019cc:	20000098 	.word	0x20000098
 80019d0:	200003b8 	.word	0x200003b8

080019d4 <EEPROM_initial>:

void EEPROM_initial(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af04      	add	r7, sp, #16
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 22,I2C_MEMADD_SIZE_16BIT, &Temp_var, 1, 100)==HAL_OK)
 80019da:	2364      	movs	r3, #100	; 0x64
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	2301      	movs	r3, #1
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	4b4d      	ldr	r3, [pc, #308]	; (8001b18 <EEPROM_initial+0x144>)
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2310      	movs	r3, #16
 80019e8:	2216      	movs	r2, #22
 80019ea:	21a0      	movs	r1, #160	; 0xa0
 80019ec:	484b      	ldr	r0, [pc, #300]	; (8001b1c <EEPROM_initial+0x148>)
 80019ee:	f001 fb65 	bl	80030bc <HAL_I2C_Mem_Read>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <EEPROM_initial+0x2a>
	{
		HAL_Delay(Delay);
 80019f8:	2032      	movs	r0, #50	; 0x32
 80019fa:	f000 fd73 	bl	80024e4 <HAL_Delay>
	}
	 if(Temp_var!=1)
 80019fe:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <EEPROM_initial+0x144>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d038      	beq.n	8001a78 <EEPROM_initial+0xa4>
		    {
			    Temp_var=1;
 8001a06:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <EEPROM_initial+0x144>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
			    if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 10) == HAL_OK)
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	2301      	movs	r3, #1
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <EEPROM_initial+0x14c>)
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2310      	movs	r3, #16
 8001a1a:	2214      	movs	r2, #20
 8001a1c:	21a0      	movs	r1, #160	; 0xa0
 8001a1e:	483f      	ldr	r0, [pc, #252]	; (8001b1c <EEPROM_initial+0x148>)
 8001a20:	f001 fa52 	bl	8002ec8 <HAL_I2C_Mem_Write>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <EEPROM_initial+0x5c>
			    {
			        HAL_Delay(20);
 8001a2a:	2014      	movs	r0, #20
 8001a2c:	f000 fd5a 	bl	80024e4 <HAL_Delay>
			    }

			    if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 10) == HAL_OK)
 8001a30:	230a      	movs	r3, #10
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2301      	movs	r3, #1
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <EEPROM_initial+0x150>)
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	2215      	movs	r2, #21
 8001a40:	21a0      	movs	r1, #160	; 0xa0
 8001a42:	4836      	ldr	r0, [pc, #216]	; (8001b1c <EEPROM_initial+0x148>)
 8001a44:	f001 fa40 	bl	8002ec8 <HAL_I2C_Mem_Write>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <EEPROM_initial+0x80>
			    {
			        HAL_Delay(20);
 8001a4e:	2014      	movs	r0, #20
 8001a50:	f000 fd48 	bl	80024e4 <HAL_Delay>
			    }

			    if(HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADD,22,I2C_MEMADD_SIZE_16BIT,&Temp_var,1,100)==HAL_OK)
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <EEPROM_initial+0x144>)
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2310      	movs	r3, #16
 8001a62:	2216      	movs	r2, #22
 8001a64:	21a0      	movs	r1, #160	; 0xa0
 8001a66:	482d      	ldr	r0, [pc, #180]	; (8001b1c <EEPROM_initial+0x148>)
 8001a68:	f001 fa2e 	bl	8002ec8 <HAL_I2C_Mem_Write>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <EEPROM_initial+0xa4>
			    {
			        HAL_Delay(20);
 8001a72:	2014      	movs	r0, #20
 8001a74:	f000 fd36 	bl	80024e4 <HAL_Delay>
			    }
		    }

		    if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 20, I2C_MEMADD_SIZE_16BIT, &MIN_PWM, 1, 10) == HAL_OK)
 8001a78:	230a      	movs	r3, #10
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <EEPROM_initial+0x14c>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2310      	movs	r3, #16
 8001a86:	2214      	movs	r2, #20
 8001a88:	21a0      	movs	r1, #160	; 0xa0
 8001a8a:	4824      	ldr	r0, [pc, #144]	; (8001b1c <EEPROM_initial+0x148>)
 8001a8c:	f001 fb16 	bl	80030bc <HAL_I2C_Mem_Read>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <EEPROM_initial+0xc8>
		    {
		        HAL_Delay(20);
 8001a96:	2014      	movs	r0, #20
 8001a98:	f000 fd24 	bl	80024e4 <HAL_Delay>
		    }

		    if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, 21, I2C_MEMADD_SIZE_16BIT, &MAX_PWM, 1, 10) == HAL_OK)
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <EEPROM_initial+0x150>)
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	2215      	movs	r2, #21
 8001aac:	21a0      	movs	r1, #160	; 0xa0
 8001aae:	481b      	ldr	r0, [pc, #108]	; (8001b1c <EEPROM_initial+0x148>)
 8001ab0:	f001 fb04 	bl	80030bc <HAL_I2C_Mem_Read>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <EEPROM_initial+0xec>
		    {
		        HAL_Delay(20);
 8001aba:	2014      	movs	r0, #20
 8001abc:	f000 fd12 	bl	80024e4 <HAL_Delay>
		    }

	        for(uint8_t i=1;i<=NUMBER_OF_SWITCHES;i++)
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	e020      	b.n	8001b08 <EEPROM_initial+0x134>
	        {
	              HAL_Delay(10);
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f000 fd0c 	bl	80024e4 <HAL_Delay>
	              uint8_t  SW_State=0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	71bb      	strb	r3, [r7, #6]
	              if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADD, i, I2C_MEMADD_SIZE_16BIT, &SW_State, 1, 10) == HAL_OK)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	21a0      	movs	r1, #160	; 0xa0
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <EEPROM_initial+0x148>)
 8001ae6:	f001 fae9 	bl	80030bc <HAL_I2C_Mem_Read>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d108      	bne.n	8001b02 <EEPROM_initial+0x12e>
	              {
	                   HAL_Delay(20);
 8001af0:	2014      	movs	r0, #20
 8001af2:	f000 fcf7 	bl	80024e4 <HAL_Delay>
	                   switch_operation(i,SW_State);
 8001af6:	79ba      	ldrb	r2, [r7, #6]
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fff3 	bl	8000ae8 <switch_operation>
	        for(uint8_t i=1;i<=NUMBER_OF_SWITCHES;i++)
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	3301      	adds	r3, #1
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d9db      	bls.n	8001ac6 <EEPROM_initial+0xf2>

	              }
	        }

}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000027b 	.word	0x2000027b
 8001b1c:	20000098 	.word	0x20000098
 8001b20:	20000004 	.word	0x20000004
 8001b24:	20000005 	.word	0x20000005

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <Error_Handler+0x8>
	...

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_MspInit+0x60>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_MspInit+0x60>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bde:	f000 fc65 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_PIN_Pin);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f001 f810 	bl	8002c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <TIM2_IRQHandler+0x10>)
 8001bfa:	f002 fe05 	bl	8004808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200002e0 	.word	0x200002e0

08001c08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <USART2_IRQHandler+0x10>)
 8001c0e:	f003 fd1d 	bl	800564c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200003b8 	.word	0x200003b8

08001c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b096      	sub	sp, #88	; 0x58
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 f93f 	bl	8005ee4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c68:	4a50      	ldr	r2, [pc, #320]	; (8001dac <MX_TIM1_Init+0x184>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001c6c:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c6e:	2214      	movs	r2, #20
 8001c70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001c78:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c7a:	2264      	movs	r2, #100	; 0x64
 8001c7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c84:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c90:	4845      	ldr	r0, [pc, #276]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001c92:	f002 fbef 	bl	8004474 <HAL_TIM_Base_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c9c:	f7ff ff44 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001caa:	4619      	mov	r1, r3
 8001cac:	483e      	ldr	r0, [pc, #248]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001cae:	f002 ff71 	bl	8004b94 <HAL_TIM_ConfigClockSource>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001cb8:	f7ff ff36 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cbc:	483a      	ldr	r0, [pc, #232]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001cbe:	f002 fca9 	bl	8004614 <HAL_TIM_PWM_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001cc8:	f7ff ff2e 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4833      	ldr	r0, [pc, #204]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001cdc:	f003 fae6 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001ce6:	f7ff ff1f 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cea:	2360      	movs	r3, #96	; 0x60
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4826      	ldr	r0, [pc, #152]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d10:	f002 fe82 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d1a:	f7ff ff05 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	2204      	movs	r2, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4820      	ldr	r0, [pc, #128]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d28:	f002 fe76 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001d32:	f7ff fef9 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	481a      	ldr	r0, [pc, #104]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d40:	f002 fe6a 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001d4a:	f7ff feed 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	220c      	movs	r2, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4814      	ldr	r0, [pc, #80]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d58:	f002 fe5e 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8001d62:	f7ff fee1 	bl	8001b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d8a:	f003 faed 	bl	8005368 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001d94:	f7ff fec8 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d98:	4803      	ldr	r0, [pc, #12]	; (8001da8 <MX_TIM1_Init+0x180>)
 8001d9a:	f000 f9e1 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001d9e:	bf00      	nop
 8001da0:	3758      	adds	r7, #88	; 0x58
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000298 	.word	0x20000298
 8001dac:	40012c00 	.word	0x40012c00

08001db0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001dd6:	f240 321f 	movw	r2, #799	; 0x31f
 8001dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001de4:	223b      	movs	r2, #59	; 0x3b
 8001de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001df4:	4813      	ldr	r0, [pc, #76]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001df6:	f002 fb3d 	bl	8004474 <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e00:	f7ff fe92 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001e12:	f002 febf 	bl	8004b94 <HAL_TIM_ConfigClockSource>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e1c:	f7ff fe84 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e28:	463b      	mov	r3, r7
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001e2e:	f003 fa3d 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e38:	f7ff fe76 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200002e0 	.word	0x200002e0

08001e48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	f107 0320 	add.w	r3, r7, #32
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
 8001e74:	615a      	str	r2, [r3, #20]
 8001e76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e78:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001e7a:	4a3d      	ldr	r2, [pc, #244]	; (8001f70 <MX_TIM3_Init+0x128>)
 8001e7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001e80:	2214      	movs	r2, #20
 8001e82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e84:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001e8c:	2264      	movs	r2, #100	; 0x64
 8001e8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e9c:	4833      	ldr	r0, [pc, #204]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001e9e:	f002 fae9 	bl	8004474 <HAL_TIM_Base_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001ea8:	f7ff fe3e 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	482c      	ldr	r0, [pc, #176]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001eba:	f002 fe6b 	bl	8004b94 <HAL_TIM_ConfigClockSource>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ec4:	f7ff fe30 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ec8:	4828      	ldr	r0, [pc, #160]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001eca:	f002 fba3 	bl	8004614 <HAL_TIM_PWM_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001ed4:	f7ff fe28 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4821      	ldr	r0, [pc, #132]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001ee8:	f003 f9e0 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001ef2:	f7ff fe19 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef6:	2360      	movs	r3, #96	; 0x60
 8001ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4817      	ldr	r0, [pc, #92]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001f0e:	f002 fd83 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001f18:	f7ff fe06 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4812      	ldr	r0, [pc, #72]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001f24:	f002 fd78 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001f2e:	f7ff fdfb 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2208      	movs	r2, #8
 8001f36:	4619      	mov	r1, r3
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001f3a:	f002 fd6d 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001f44:	f7ff fdf0 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001f50:	f002 fd62 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001f5a:	f7ff fde5 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM3_Init+0x124>)
 8001f60:	f000 f8fe 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001f64:	bf00      	nop
 8001f66:	3738      	adds	r7, #56	; 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000328 	.word	0x20000328
 8001f70:	40000400 	.word	0x40000400

08001f74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fa4:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <MX_TIM4_Init+0x124>)
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <MX_TIM4_Init+0x128>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20;
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <MX_TIM4_Init+0x124>)
 8001fac:	2214      	movs	r2, #20
 8001fae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b39      	ldr	r3, [pc, #228]	; (8002098 <MX_TIM4_Init+0x124>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <MX_TIM4_Init+0x124>)
 8001fb8:	2264      	movs	r2, #100	; 0x64
 8001fba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b36      	ldr	r3, [pc, #216]	; (8002098 <MX_TIM4_Init+0x124>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <MX_TIM4_Init+0x124>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fc8:	4833      	ldr	r0, [pc, #204]	; (8002098 <MX_TIM4_Init+0x124>)
 8001fca:	f002 fa53 	bl	8004474 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001fd4:	f7ff fda8 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	482c      	ldr	r0, [pc, #176]	; (8002098 <MX_TIM4_Init+0x124>)
 8001fe6:	f002 fdd5 	bl	8004b94 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001ff0:	f7ff fd9a 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ff4:	4828      	ldr	r0, [pc, #160]	; (8002098 <MX_TIM4_Init+0x124>)
 8001ff6:	f002 fb0d 	bl	8004614 <HAL_TIM_PWM_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002000:	f7ff fd92 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800200c:	f107 0320 	add.w	r3, r7, #32
 8002010:	4619      	mov	r1, r3
 8002012:	4821      	ldr	r0, [pc, #132]	; (8002098 <MX_TIM4_Init+0x124>)
 8002014:	f003 f94a 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800201e:	f7ff fd83 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002022:	2360      	movs	r3, #96	; 0x60
 8002024:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	4817      	ldr	r0, [pc, #92]	; (8002098 <MX_TIM4_Init+0x124>)
 800203a:	f002 fced 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002044:	f7ff fd70 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2204      	movs	r2, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4812      	ldr	r0, [pc, #72]	; (8002098 <MX_TIM4_Init+0x124>)
 8002050:	f002 fce2 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800205a:	f7ff fd65 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2208      	movs	r2, #8
 8002062:	4619      	mov	r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <MX_TIM4_Init+0x124>)
 8002066:	f002 fcd7 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002070:	f7ff fd5a 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	220c      	movs	r2, #12
 8002078:	4619      	mov	r1, r3
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <MX_TIM4_Init+0x124>)
 800207c:	f002 fccc 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8002086:	f7ff fd4f 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800208a:	4803      	ldr	r0, [pc, #12]	; (8002098 <MX_TIM4_Init+0x124>)
 800208c:	f000 f868 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8002090:	bf00      	nop
 8002092:	3738      	adds	r7, #56	; 0x38
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000370 	.word	0x20000370
 800209c:	40000800 	.word	0x40000800

080020a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a28      	ldr	r2, [pc, #160]	; (8002150 <HAL_TIM_Base_MspInit+0xb0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10c      	bne.n	80020cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	4a27      	ldr	r2, [pc, #156]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 80020b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020bc:	6193      	str	r3, [r2, #24]
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020ca:	e03c      	b.n	8002146 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	d114      	bne.n	8002100 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	210f      	movs	r1, #15
 80020f2:	201c      	movs	r0, #28
 80020f4:	f000 faf1 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f8:	201c      	movs	r0, #28
 80020fa:	f000 fb0a 	bl	8002712 <HAL_NVIC_EnableIRQ>
}
 80020fe:	e022      	b.n	8002146 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_TIM_Base_MspInit+0xb8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10c      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
}
 8002122:	e010      	b.n	8002146 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d10b      	bne.n	8002146 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	61d3      	str	r3, [r2, #28]
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_TIM_Base_MspInit+0xb4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40021000 	.word	0x40021000
 8002158:	40000400 	.word	0x40000400
 800215c:	40000800 	.word	0x40000800

08002160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a48      	ldr	r2, [pc, #288]	; (800229c <HAL_TIM_MspPostInit+0x13c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d12b      	bne.n	80021d8 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002180:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 8002186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED8_Pin|indication_led_Pin|LED9_Pin|LED10_Pin;
 8002198:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2302      	movs	r3, #2
 80021a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	483d      	ldr	r0, [pc, #244]	; (80022a4 <HAL_TIM_MspPostInit+0x144>)
 80021ae:	f000 fb7b 	bl	80028a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_TIM_MspPostInit+0x148>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	4a35      	ldr	r2, [pc, #212]	; (80022a8 <HAL_TIM_MspPostInit+0x148>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021d6:	e05c      	b.n	8002292 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a33      	ldr	r2, [pc, #204]	; (80022ac <HAL_TIM_MspPostInit+0x14c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12b      	bne.n	800223a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 80021e8:	f043 0310 	orr.w	r3, r3, #16
 80021ec:	6193      	str	r3, [r2, #24]
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED0_Pin|LED5_Pin|LED3_Pin|LED1_Pin;
 80021fa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4828      	ldr	r0, [pc, #160]	; (80022b0 <HAL_TIM_MspPostInit+0x150>)
 8002210:	f000 fb4a 	bl	80028a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_TIM_MspPostInit+0x148>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_TIM_MspPostInit+0x148>)
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	6053      	str	r3, [r2, #4]
}
 8002238:	e02b      	b.n	8002292 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_TIM_MspPostInit+0x154>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d126      	bne.n	8002292 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 800224a:	f043 0320 	orr.w	r3, r3, #32
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_TIM_MspPostInit+0x140>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED7_Pin|LED6_Pin|LED4_Pin|LED2_Pin;
 800225c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2302      	movs	r3, #2
 8002268:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4811      	ldr	r0, [pc, #68]	; (80022b8 <HAL_TIM_MspPostInit+0x158>)
 8002272:	f000 fb19 	bl	80028a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_TIM_MspPostInit+0x148>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <HAL_TIM_MspPostInit+0x148>)
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	6053      	str	r3, [r2, #4]
}
 8002292:	bf00      	nop
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40011800 	.word	0x40011800
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40011400 	.word	0x40011400

080022bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <MX_USART2_UART_Init+0x50>)
 80022c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022e2:	220c      	movs	r2, #12
 80022e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_USART2_UART_Init+0x4c>)
 80022f4:	f003 f89b 	bl	800542e <HAL_UART_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022fe:	f7ff fc13 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200003b8 	.word	0x200003b8
 800230c:	40004400 	.word	0x40004400

08002310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <HAL_UART_MspInit+0xb4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d145      	bne.n	80023bc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_UART_MspInit+0xb8>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <HAL_UART_MspInit+0xb8>)
 8002336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233a:	61d3      	str	r3, [r2, #28]
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_UART_MspInit+0xb8>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002348:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_UART_MspInit+0xb8>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_UART_MspInit+0xb8>)
 800234e:	f043 0320 	orr.w	r3, r3, #32
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_UART_MspInit+0xb8>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STM_TX_Pin;
 8002360:	2320      	movs	r3, #32
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(STM_TX_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4816      	ldr	r0, [pc, #88]	; (80023cc <HAL_UART_MspInit+0xbc>)
 8002374:	f000 fa98 	bl	80028a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_RX_Pin;
 8002378:	2340      	movs	r3, #64	; 0x40
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STM_RX_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	4810      	ldr	r0, [pc, #64]	; (80023cc <HAL_UART_MspInit+0xbc>)
 800238c:	f000 fa8c 	bl	80028a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_UART_MspInit+0xc0>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_UART_MspInit+0xc0>)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	6053      	str	r3, [r2, #4]

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2026      	movs	r0, #38	; 0x26
 80023b2:	f000 f992 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023b6:	2026      	movs	r0, #38	; 0x26
 80023b8:	f000 f9ab 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40004400 	.word	0x40004400
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40011400 	.word	0x40011400
 80023d0:	40010000 	.word	0x40010000

080023d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023d6:	490d      	ldr	r1, [pc, #52]	; (800240c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023ec:	4c0a      	ldr	r4, [pc, #40]	; (8002418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023fa:	f7ff fc0f 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fe:	f003 fd4d 	bl	8005e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002402:	f7fe f811 	bl	8000428 <main>
  bx lr
 8002406:	4770      	bx	lr
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002410:	08005f94 	.word	0x08005f94
  ldr r2, =_sbss
 8002414:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002418:	20000400 	.word	0x20000400

0800241c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_2_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_Init+0x28>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_Init+0x28>)
 800242a:	f043 0310 	orr.w	r3, r3, #16
 800242e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f947 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002436:	200d      	movs	r0, #13
 8002438:	f000 f808 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243c:	f7ff fb7a 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x54>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x58>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f95f 	bl	800272e <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00e      	b.n	8002498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d80a      	bhi.n	8002496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f000 f927 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <HAL_InitTick+0x5c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000070 	.word	0x20000070
 80024a4:	20000078 	.word	0x20000078
 80024a8:	20000074 	.word	0x20000074

080024ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_IncTick+0x1c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_IncTick+0x20>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a03      	ldr	r2, [pc, #12]	; (80024cc <HAL_IncTick+0x20>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	20000078 	.word	0x20000078
 80024cc:	200003fc 	.word	0x200003fc

080024d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <HAL_GetTick+0x10>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	200003fc 	.word	0x200003fc

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d005      	beq.n	800250a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_Delay+0x44>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250a:	bf00      	nop
 800250c:	f7ff ffe0 	bl	80024d0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d8f7      	bhi.n	800250c <HAL_Delay+0x28>
  {
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000078 	.word	0x20000078

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4906      	ldr	r1, [pc, #24]	; (80025c4 <__NVIC_EnableIRQ+0x34>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	; (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff90 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff2d 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff42 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff90 	bl	800261c <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5f 	bl	80025c8 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff35 	bl	8002590 <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa2 	bl	8002680 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002758:	2b02      	cmp	r3, #2
 800275a:	d008      	beq.n	800276e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2204      	movs	r2, #4
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e020      	b.n	80027b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020e 	bic.w	r2, r2, #14
 800277c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d005      	beq.n	80027de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2204      	movs	r2, #4
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e051      	b.n	8002882 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 020e 	bic.w	r2, r2, #14
 80027ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_DMA_Abort_IT+0xd0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d029      	beq.n	800285c <HAL_DMA_Abort_IT+0xa0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <HAL_DMA_Abort_IT+0xd4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d022      	beq.n	8002858 <HAL_DMA_Abort_IT+0x9c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_DMA_Abort_IT+0xd8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d01a      	beq.n	8002852 <HAL_DMA_Abort_IT+0x96>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_DMA_Abort_IT+0xdc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d012      	beq.n	800284c <HAL_DMA_Abort_IT+0x90>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_DMA_Abort_IT+0xe0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00a      	beq.n	8002846 <HAL_DMA_Abort_IT+0x8a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_DMA_Abort_IT+0xe4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d102      	bne.n	8002840 <HAL_DMA_Abort_IT+0x84>
 800283a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800283e:	e00e      	b.n	800285e <HAL_DMA_Abort_IT+0xa2>
 8002840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002844:	e00b      	b.n	800285e <HAL_DMA_Abort_IT+0xa2>
 8002846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800284a:	e008      	b.n	800285e <HAL_DMA_Abort_IT+0xa2>
 800284c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002850:	e005      	b.n	800285e <HAL_DMA_Abort_IT+0xa2>
 8002852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002856:	e002      	b.n	800285e <HAL_DMA_Abort_IT+0xa2>
 8002858:	2310      	movs	r3, #16
 800285a:	e000      	b.n	800285e <HAL_DMA_Abort_IT+0xa2>
 800285c:	2301      	movs	r3, #1
 800285e:	4a11      	ldr	r2, [pc, #68]	; (80028a4 <HAL_DMA_Abort_IT+0xe8>)
 8002860:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
    } 
  }
  return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40020008 	.word	0x40020008
 8002890:	4002001c 	.word	0x4002001c
 8002894:	40020030 	.word	0x40020030
 8002898:	40020044 	.word	0x40020044
 800289c:	40020058 	.word	0x40020058
 80028a0:	4002006c 	.word	0x4002006c
 80028a4:	40020000 	.word	0x40020000

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	e169      	b.n	8002b90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028bc:	2201      	movs	r2, #1
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 8158 	bne.w	8002b8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a9a      	ldr	r2, [pc, #616]	; (8002b48 <HAL_GPIO_Init+0x2a0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d05e      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028e4:	4a98      	ldr	r2, [pc, #608]	; (8002b48 <HAL_GPIO_Init+0x2a0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d875      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 80028ea:	4a98      	ldr	r2, [pc, #608]	; (8002b4c <HAL_GPIO_Init+0x2a4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d058      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028f0:	4a96      	ldr	r2, [pc, #600]	; (8002b4c <HAL_GPIO_Init+0x2a4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d86f      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 80028f6:	4a96      	ldr	r2, [pc, #600]	; (8002b50 <HAL_GPIO_Init+0x2a8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d052      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028fc:	4a94      	ldr	r2, [pc, #592]	; (8002b50 <HAL_GPIO_Init+0x2a8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d869      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 8002902:	4a94      	ldr	r2, [pc, #592]	; (8002b54 <HAL_GPIO_Init+0x2ac>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d04c      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 8002908:	4a92      	ldr	r2, [pc, #584]	; (8002b54 <HAL_GPIO_Init+0x2ac>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d863      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 800290e:	4a92      	ldr	r2, [pc, #584]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d046      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 8002914:	4a90      	ldr	r2, [pc, #576]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d85d      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 800291a:	2b12      	cmp	r3, #18
 800291c:	d82a      	bhi.n	8002974 <HAL_GPIO_Init+0xcc>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d859      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <HAL_GPIO_Init+0x80>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	080029a3 	.word	0x080029a3
 800292c:	0800297d 	.word	0x0800297d
 8002930:	0800298f 	.word	0x0800298f
 8002934:	080029d1 	.word	0x080029d1
 8002938:	080029d7 	.word	0x080029d7
 800293c:	080029d7 	.word	0x080029d7
 8002940:	080029d7 	.word	0x080029d7
 8002944:	080029d7 	.word	0x080029d7
 8002948:	080029d7 	.word	0x080029d7
 800294c:	080029d7 	.word	0x080029d7
 8002950:	080029d7 	.word	0x080029d7
 8002954:	080029d7 	.word	0x080029d7
 8002958:	080029d7 	.word	0x080029d7
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029d7 	.word	0x080029d7
 8002964:	080029d7 	.word	0x080029d7
 8002968:	080029d7 	.word	0x080029d7
 800296c:	08002985 	.word	0x08002985
 8002970:	08002999 	.word	0x08002999
 8002974:	4a79      	ldr	r2, [pc, #484]	; (8002b5c <HAL_GPIO_Init+0x2b4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297a:	e02c      	b.n	80029d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e029      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	3304      	adds	r3, #4
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e024      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	3308      	adds	r3, #8
 8002994:	623b      	str	r3, [r7, #32]
          break;
 8002996:	e01f      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	330c      	adds	r3, #12
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e01a      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029aa:	2304      	movs	r3, #4
 80029ac:	623b      	str	r3, [r7, #32]
          break;
 80029ae:	e013      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b8:	2308      	movs	r3, #8
 80029ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	611a      	str	r2, [r3, #16]
          break;
 80029c2:	e009      	b.n	80029d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	615a      	str	r2, [r3, #20]
          break;
 80029ce:	e003      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          break;
 80029d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2bff      	cmp	r3, #255	; 0xff
 80029dc:	d801      	bhi.n	80029e2 <HAL_GPIO_Init+0x13a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	e001      	b.n	80029e6 <HAL_GPIO_Init+0x13e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2bff      	cmp	r3, #255	; 0xff
 80029ec:	d802      	bhi.n	80029f4 <HAL_GPIO_Init+0x14c>
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x152>
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	3b08      	subs	r3, #8
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	210f      	movs	r1, #15
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b1 	beq.w	8002b8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a28:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a40:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a40      	ldr	r2, [pc, #256]	; (8002b68 <HAL_GPIO_Init+0x2c0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_GPIO_Init+0x1ec>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3f      	ldr	r2, [pc, #252]	; (8002b6c <HAL_GPIO_Init+0x2c4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00d      	beq.n	8002a90 <HAL_GPIO_Init+0x1e8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3e      	ldr	r2, [pc, #248]	; (8002b70 <HAL_GPIO_Init+0x2c8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d007      	beq.n	8002a8c <HAL_GPIO_Init+0x1e4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_GPIO_Init+0x1e0>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	e004      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a94:	2300      	movs	r3, #0
 8002a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a98:	f002 0203 	and.w	r2, r2, #3
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	4093      	lsls	r3, r2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aa6:	492f      	ldr	r1, [pc, #188]	; (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	492c      	ldr	r1, [pc, #176]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	4928      	ldr	r1, [pc, #160]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae8:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4922      	ldr	r1, [pc, #136]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	491e      	ldr	r1, [pc, #120]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4918      	ldr	r1, [pc, #96]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4914      	ldr	r1, [pc, #80]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d021      	beq.n	8002b7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
 8002b44:	e021      	b.n	8002b8a <HAL_GPIO_Init+0x2e2>
 8002b46:	bf00      	nop
 8002b48:	10320000 	.word	0x10320000
 8002b4c:	10310000 	.word	0x10310000
 8002b50:	10220000 	.word	0x10220000
 8002b54:	10210000 	.word	0x10210000
 8002b58:	10120000 	.word	0x10120000
 8002b5c:	10110000 	.word	0x10110000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40010800 	.word	0x40010800
 8002b6c:	40010c00 	.word	0x40010c00
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4909      	ldr	r1, [pc, #36]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f47f ae8e 	bne.w	80028bc <HAL_GPIO_Init+0x14>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	372c      	adds	r7, #44	; 0x2c
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40010400 	.word	0x40010400

08002bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
 8002bea:	4613      	mov	r3, r2
 8002bec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bee:	787b      	ldrb	r3, [r7, #1]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bfa:	e003      	b.n	8002c04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	041a      	lsls	r2, r3, #16
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	611a      	str	r2, [r3, #16]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c26:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe f928 	bl	8000e84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e12b      	b.n	8002eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fd fba0 	bl	80003ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca4:	f001 fba0 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a81      	ldr	r2, [pc, #516]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d807      	bhi.n	8002cc4 <HAL_I2C_Init+0x84>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a80      	ldr	r2, [pc, #512]	; (8002eb8 <HAL_I2C_Init+0x278>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e006      	b.n	8002cd2 <HAL_I2C_Init+0x92>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a7d      	ldr	r2, [pc, #500]	; (8002ebc <HAL_I2C_Init+0x27c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0e7      	b.n	8002eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a78      	ldr	r2, [pc, #480]	; (8002ec0 <HAL_I2C_Init+0x280>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0c9b      	lsrs	r3, r3, #18
 8002ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a6a      	ldr	r2, [pc, #424]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d802      	bhi.n	8002d14 <HAL_I2C_Init+0xd4>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3301      	adds	r3, #1
 8002d12:	e009      	b.n	8002d28 <HAL_I2C_Init+0xe8>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <HAL_I2C_Init+0x284>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	3301      	adds	r3, #1
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	495c      	ldr	r1, [pc, #368]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002d44:	428b      	cmp	r3, r1
 8002d46:	d819      	bhi.n	8002d7c <HAL_I2C_Init+0x13c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e59      	subs	r1, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d56:	1c59      	adds	r1, r3, #1
 8002d58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_I2C_Init+0x138>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1e59      	subs	r1, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d76:	e051      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	e04f      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <HAL_I2C_Init+0x168>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e58      	subs	r0, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e012      	b.n	8002dce <HAL_I2C_Init+0x18e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e58      	subs	r0, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	0099      	lsls	r1, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Init+0x196>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e022      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10e      	bne.n	8002dfc <HAL_I2C_Init+0x1bc>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1e58      	subs	r0, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	440b      	add	r3, r1
 8002dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfa:	e00f      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e58      	subs	r0, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	0099      	lsls	r1, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	6809      	ldr	r1, [r1, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6911      	ldr	r1, [r2, #16]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	000186a0 	.word	0x000186a0
 8002eb8:	001e847f 	.word	0x001e847f
 8002ebc:	003d08ff 	.word	0x003d08ff
 8002ec0:	431bde83 	.word	0x431bde83
 8002ec4:	10624dd3 	.word	0x10624dd3

08002ec8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	817b      	strh	r3, [r7, #10]
 8002eda:	460b      	mov	r3, r1
 8002edc:	813b      	strh	r3, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee2:	f7ff faf5 	bl	80024d0 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	f040 80d9 	bne.w	80030a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	2319      	movs	r3, #25
 8002efc:	2201      	movs	r2, #1
 8002efe:	496d      	ldr	r1, [pc, #436]	; (80030b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fcc1 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0cc      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Mem_Write+0x56>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0c5      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d007      	beq.n	8002f44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2221      	movs	r2, #33	; 0x21
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a4d      	ldr	r2, [pc, #308]	; (80030b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f86:	88f8      	ldrh	r0, [r7, #6]
 8002f88:	893a      	ldrh	r2, [r7, #8]
 8002f8a:	8979      	ldrh	r1, [r7, #10]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4603      	mov	r3, r0
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 faf8 	bl	800358c <I2C_RequestMemoryWrite>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d052      	beq.n	8003048 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e081      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fd42 	bl	8003a34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d11b      	bne.n	8003048 <HAL_I2C_Mem_Write+0x180>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1aa      	bne.n	8002fa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fd2e 	bl	8003ab6 <I2C_WaitOnBTFFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	2b04      	cmp	r3, #4
 8003066:	d107      	bne.n	8003078 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003076:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e016      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	00100002 	.word	0x00100002
 80030b8:	ffff0000 	.word	0xffff0000

080030bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	; 0x30
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030da:	f7ff f9f9 	bl	80024d0 <HAL_GetTick>
 80030de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	f040 8244 	bne.w	8003576 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2319      	movs	r3, #25
 80030f4:	2201      	movs	r2, #1
 80030f6:	4982      	ldr	r1, [pc, #520]	; (8003300 <HAL_I2C_Mem_Read+0x244>)
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fbc5 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
 8003106:	e237      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Mem_Read+0x5a>
 8003112:	2302      	movs	r3, #2
 8003114:	e230      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d007      	beq.n	800313c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2222      	movs	r2, #34	; 0x22
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2240      	movs	r2, #64	; 0x40
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800316c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a62      	ldr	r2, [pc, #392]	; (8003304 <HAL_I2C_Mem_Read+0x248>)
 800317c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800317e:	88f8      	ldrh	r0, [r7, #6]
 8003180:	893a      	ldrh	r2, [r7, #8]
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	4603      	mov	r3, r0
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa92 	bl	80036b8 <I2C_RequestMemoryRead>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e1ec      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d113      	bne.n	80031ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e1c0      	b.n	8003550 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d11e      	bne.n	8003214 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031e6:	b672      	cpsid	i
}
 80031e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003210:	b662      	cpsie	i
}
 8003212:	e035      	b.n	8003280 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	2b02      	cmp	r3, #2
 800321a:	d11e      	bne.n	800325a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800322c:	b672      	cpsid	i
}
 800322e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003254:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003256:	b662      	cpsie	i
}
 8003258:	e012      	b.n	8003280 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003268:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003280:	e166      	b.n	8003550 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	2b03      	cmp	r3, #3
 8003288:	f200 811f 	bhi.w	80034ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	2b01      	cmp	r3, #1
 8003292:	d123      	bne.n	80032dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fc4d 	bl	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e167      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032da:	e139      	b.n	8003550 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d152      	bne.n	800338a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	2200      	movs	r2, #0
 80032ec:	4906      	ldr	r1, [pc, #24]	; (8003308 <HAL_I2C_Mem_Read+0x24c>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 faca 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e13c      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
 80032fe:	bf00      	nop
 8003300:	00100002 	.word	0x00100002
 8003304:	ffff0000 	.word	0xffff0000
 8003308:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003352:	b662      	cpsie	i
}
 8003354:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003388:	e0e2      	b.n	8003550 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2200      	movs	r2, #0
 8003392:	497b      	ldr	r1, [pc, #492]	; (8003580 <HAL_I2C_Mem_Read+0x4c4>)
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fa77 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0e9      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033b4:	b672      	cpsid	i
}
 80033b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ea:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_I2C_Mem_Read+0x4c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	08db      	lsrs	r3, r3, #3
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_I2C_Mem_Read+0x4cc>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a1a      	lsrs	r2, r3, #8
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00da      	lsls	r2, r3, #3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	3b01      	subs	r3, #1
 8003408:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d118      	bne.n	8003442 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003432:	b662      	cpsie	i
}
 8003434:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e09a      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b04      	cmp	r3, #4
 800344e:	d1d9      	bne.n	8003404 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003492:	b662      	cpsie	i
}
 8003494:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034c8:	e042      	b.n	8003550 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fb32 	bl	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e04c      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b04      	cmp	r3, #4
 800351c:	d118      	bne.n	8003550 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f ae94 	bne.w	8003282 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
  }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	00010004 	.word	0x00010004
 8003584:	20000070 	.word	0x20000070
 8003588:	14f8b589 	.word	0x14f8b589

0800358c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4603      	mov	r3, r0
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	460b      	mov	r3, r1
 80035a0:	813b      	strh	r3, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	2200      	movs	r2, #0
 80035be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f960 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d103      	bne.n	80035e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e05f      	b.n	80036aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ea:	897b      	ldrh	r3, [r7, #10]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	492d      	ldr	r1, [pc, #180]	; (80036b4 <I2C_RequestMemoryWrite+0x128>)
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f998 	bl	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e04c      	b.n	80036aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	6a39      	ldr	r1, [r7, #32]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fa02 	bl	8003a34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2b04      	cmp	r3, #4
 800363c:	d107      	bne.n	800364e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e02b      	b.n	80036aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003658:	893b      	ldrh	r3, [r7, #8]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	611a      	str	r2, [r3, #16]
 8003662:	e021      	b.n	80036a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	b29b      	uxth	r3, r3
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003674:	6a39      	ldr	r1, [r7, #32]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f9dc 	bl	8003a34 <I2C_WaitOnTXEFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b04      	cmp	r3, #4
 8003688:	d107      	bne.n	800369a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003698:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e005      	b.n	80036aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800369e:	893b      	ldrh	r3, [r7, #8]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	00010002 	.word	0x00010002

080036b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	460b      	mov	r3, r1
 80036cc:	813b      	strh	r3, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8c2 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003718:	d103      	bne.n	8003722 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e0aa      	b.n	800387c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003726:	897b      	ldrh	r3, [r7, #10]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	6a3a      	ldr	r2, [r7, #32]
 800373a:	4952      	ldr	r1, [pc, #328]	; (8003884 <I2C_RequestMemoryRead+0x1cc>)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f8fa 	bl	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e097      	b.n	800387c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	6a39      	ldr	r1, [r7, #32]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f964 	bl	8003a34 <I2C_WaitOnTXEFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b04      	cmp	r3, #4
 8003778:	d107      	bne.n	800378a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e076      	b.n	800387c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003794:	893b      	ldrh	r3, [r7, #8]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]
 800379e:	e021      	b.n	80037e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037a0:	893b      	ldrh	r3, [r7, #8]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	6a39      	ldr	r1, [r7, #32]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f93e 	bl	8003a34 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d107      	bne.n	80037d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e050      	b.n	800387c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037da:	893b      	ldrh	r3, [r7, #8]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e6:	6a39      	ldr	r1, [r7, #32]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f923 	bl	8003a34 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d107      	bne.n	800380c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e035      	b.n	800387c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2200      	movs	r2, #0
 8003828:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f82b 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00d      	beq.n	8003854 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003846:	d103      	bne.n	8003850 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e013      	b.n	800387c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003854:	897b      	ldrh	r3, [r7, #10]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	b2da      	uxtb	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	6a3a      	ldr	r2, [r7, #32]
 8003868:	4906      	ldr	r1, [pc, #24]	; (8003884 <I2C_RequestMemoryRead+0x1cc>)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f863 	bl	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	00010002 	.word	0x00010002

08003888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003898:	e025      	b.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d021      	beq.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fe fe15 	bl	80024d0 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e023      	b.n	800392e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10d      	bne.n	800390c <I2C_WaitOnFlagUntilTimeout+0x84>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	e00c      	b.n	8003926 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4013      	ands	r3, r2
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf0c      	ite	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	2300      	movne	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	429a      	cmp	r2, r3
 800392a:	d0b6      	beq.n	800389a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003944:	e051      	b.n	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003954:	d123      	bne.n	800399e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003964:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800396e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f043 0204 	orr.w	r2, r3, #4
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e046      	b.n	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d021      	beq.n	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fe fd93 	bl	80024d0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d116      	bne.n	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e020      	b.n	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10c      	bne.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	e00b      	b.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	43da      	mvns	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d18d      	bne.n	8003946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a40:	e02d      	b.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f8ce 	bl	8003be4 <I2C_IsAcknowledgeFailed>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e02d      	b.n	8003aae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d021      	beq.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fe fd39 	bl	80024d0 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d116      	bne.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e007      	b.n	8003aae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b80      	cmp	r3, #128	; 0x80
 8003aaa:	d1ca      	bne.n	8003a42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ac2:	e02d      	b.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f88d 	bl	8003be4 <I2C_IsAcknowledgeFailed>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e02d      	b.n	8003b30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d021      	beq.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003adc:	f7fe fcf8 	bl	80024d0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d302      	bcc.n	8003af2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e007      	b.n	8003b30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d1ca      	bne.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b44:	e042      	b.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d119      	bne.n	8003b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0210 	mvn.w	r2, #16
 8003b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e029      	b.n	8003bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b88:	f7fe fca2 	bl	80024d0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d302      	bcc.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e007      	b.n	8003bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d1b5      	bne.n	8003b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfa:	d11b      	bne.n	8003c34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 0204 	orr.w	r2, r3, #4
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e272      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8087 	beq.w	8003d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c60:	4b92      	ldr	r3, [pc, #584]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d00c      	beq.n	8003c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c6c:	4b8f      	ldr	r3, [pc, #572]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d112      	bne.n	8003c9e <HAL_RCC_OscConfig+0x5e>
 8003c78:	4b8c      	ldr	r3, [pc, #560]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d10b      	bne.n	8003c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c86:	4b89      	ldr	r3, [pc, #548]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d06c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x12c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d168      	bne.n	8003d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e24c      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x76>
 8003ca8:	4b80      	ldr	r3, [pc, #512]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a7f      	ldr	r2, [pc, #508]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	e02e      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x98>
 8003cbe:	4b7b      	ldr	r3, [pc, #492]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7a      	ldr	r2, [pc, #488]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b78      	ldr	r3, [pc, #480]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a77      	ldr	r2, [pc, #476]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e01d      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0xbc>
 8003ce2:	4b72      	ldr	r3, [pc, #456]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a71      	ldr	r2, [pc, #452]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b6f      	ldr	r3, [pc, #444]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6e      	ldr	r2, [pc, #440]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cfc:	4b6b      	ldr	r3, [pc, #428]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6a      	ldr	r2, [pc, #424]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b68      	ldr	r3, [pc, #416]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a67      	ldr	r2, [pc, #412]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fbd8 	bl	80024d0 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe fbd4 	bl	80024d0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e200      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xe4>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fe fbc4 	bl	80024d0 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fe fbc0 	bl	80024d0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1ec      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x10c>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d063      	beq.n	8003e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7a:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d86:	4b49      	ldr	r3, [pc, #292]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d11c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x18c>
 8003d92:	4b46      	ldr	r3, [pc, #280]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d116      	bne.n	8003dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	4b43      	ldr	r3, [pc, #268]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_RCC_OscConfig+0x176>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1c0      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4939      	ldr	r1, [pc, #228]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	e03a      	b.n	8003e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d020      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd4:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fe fb79 	bl	80024d0 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fe fb75 	bl	80024d0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e1a1      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4927      	ldr	r1, [pc, #156]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]
 8003e14:	e015      	b.n	8003e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <HAL_RCC_OscConfig+0x270>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fb58 	bl	80024d0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e24:	f7fe fb54 	bl	80024d0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e180      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d03a      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d019      	beq.n	8003e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <HAL_RCC_OscConfig+0x274>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5c:	f7fe fb38 	bl	80024d0 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e64:	f7fe fb34 	bl	80024d0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e160      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_RCC_OscConfig+0x26c>)
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e82:	2001      	movs	r0, #1
 8003e84:	f000 fad8 	bl	8004438 <RCC_Delay>
 8003e88:	e01c      	b.n	8003ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fe fb1e 	bl	80024d0 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e96:	e00f      	b.n	8003eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fe fb1a 	bl	80024d0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d908      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e146      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	42420000 	.word	0x42420000
 8003eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb8:	4b92      	ldr	r3, [pc, #584]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e9      	bne.n	8003e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80a6 	beq.w	800401e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed6:	4b8b      	ldr	r3, [pc, #556]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10d      	bne.n	8003efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	4b88      	ldr	r3, [pc, #544]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	4a87      	ldr	r2, [pc, #540]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eec:	61d3      	str	r3, [r2, #28]
 8003eee:	4b85      	ldr	r3, [pc, #532]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	4b82      	ldr	r3, [pc, #520]	; (8004108 <HAL_RCC_OscConfig+0x4c8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d118      	bne.n	8003f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f0a:	4b7f      	ldr	r3, [pc, #508]	; (8004108 <HAL_RCC_OscConfig+0x4c8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7e      	ldr	r2, [pc, #504]	; (8004108 <HAL_RCC_OscConfig+0x4c8>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f16:	f7fe fadb 	bl	80024d0 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1e:	f7fe fad7 	bl	80024d0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b64      	cmp	r3, #100	; 0x64
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e103      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	4b75      	ldr	r3, [pc, #468]	; (8004108 <HAL_RCC_OscConfig+0x4c8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d106      	bne.n	8003f52 <HAL_RCC_OscConfig+0x312>
 8003f44:	4b6f      	ldr	r3, [pc, #444]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4a6e      	ldr	r2, [pc, #440]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6213      	str	r3, [r2, #32]
 8003f50:	e02d      	b.n	8003fae <HAL_RCC_OscConfig+0x36e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x334>
 8003f5a:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a69      	ldr	r2, [pc, #420]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6213      	str	r3, [r2, #32]
 8003f66:	4b67      	ldr	r3, [pc, #412]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4a66      	ldr	r2, [pc, #408]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	6213      	str	r3, [r2, #32]
 8003f72:	e01c      	b.n	8003fae <HAL_RCC_OscConfig+0x36e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	d10c      	bne.n	8003f96 <HAL_RCC_OscConfig+0x356>
 8003f7c:	4b61      	ldr	r3, [pc, #388]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4a60      	ldr	r2, [pc, #384]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6213      	str	r3, [r2, #32]
 8003f88:	4b5e      	ldr	r3, [pc, #376]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	4a5d      	ldr	r2, [pc, #372]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6213      	str	r3, [r2, #32]
 8003f94:	e00b      	b.n	8003fae <HAL_RCC_OscConfig+0x36e>
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a5a      	ldr	r2, [pc, #360]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6213      	str	r3, [r2, #32]
 8003fa2:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4a57      	ldr	r2, [pc, #348]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003fa8:	f023 0304 	bic.w	r3, r3, #4
 8003fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fa8b 	bl	80024d0 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fe fa87 	bl	80024d0 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0b1      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ee      	beq.n	8003fbe <HAL_RCC_OscConfig+0x37e>
 8003fe0:	e014      	b.n	800400c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe2:	f7fe fa75 	bl	80024d0 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fe fa71 	bl	80024d0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e09b      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	4b40      	ldr	r3, [pc, #256]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ee      	bne.n	8003fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004012:	4b3c      	ldr	r3, [pc, #240]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4a3b      	ldr	r2, [pc, #236]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8087 	beq.w	8004136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004028:	4b36      	ldr	r3, [pc, #216]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d061      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d146      	bne.n	80040ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403c:	4b33      	ldr	r3, [pc, #204]	; (800410c <HAL_RCC_OscConfig+0x4cc>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fe fa45 	bl	80024d0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404a:	f7fe fa41 	bl	80024d0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e06d      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d108      	bne.n	8004084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	4921      	ldr	r1, [pc, #132]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004084:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a19      	ldr	r1, [r3, #32]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	430b      	orrs	r3, r1
 8004096:	491b      	ldr	r1, [pc, #108]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_RCC_OscConfig+0x4cc>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fe fa15 	bl	80024d0 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fe fa11 	bl	80024d0 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e03d      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x46a>
 80040c8:	e035      	b.n	8004136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_RCC_OscConfig+0x4cc>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fe f9fe 	bl	80024d0 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe f9fa 	bl	80024d0 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e026      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x498>
 80040f6:	e01e      	b.n	8004136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e019      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
 800410c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_OscConfig+0x500>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	429a      	cmp	r2, r3
 8004122:	d106      	bne.n	8004132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0d0      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b6a      	ldr	r3, [pc, #424]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d910      	bls.n	8004188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b67      	ldr	r3, [pc, #412]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 0207 	bic.w	r2, r3, #7
 800416e:	4965      	ldr	r1, [pc, #404]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b63      	ldr	r3, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0b8      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d020      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a52      	ldr	r2, [pc, #328]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b50      	ldr	r3, [pc, #320]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	494d      	ldr	r1, [pc, #308]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d040      	beq.n	8004264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d115      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e07f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e073      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004212:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e06b      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4936      	ldr	r1, [pc, #216]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004234:	f7fe f94c 	bl	80024d0 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fe f948 	bl	80024d0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e053      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 020c 	and.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429a      	cmp	r2, r3
 8004262:	d1eb      	bne.n	800423c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d210      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	4922      	ldr	r1, [pc, #136]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e032      	b.n	80042fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4916      	ldr	r1, [pc, #88]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	490e      	ldr	r1, [pc, #56]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042d2:	f000 f821 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	490a      	ldr	r1, [pc, #40]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	4a09      	ldr	r2, [pc, #36]	; (8004310 <HAL_RCC_ClockConfig+0x1cc>)
 80042ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1d0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe f8aa 	bl	800244c <HAL_InitTick>

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40022000 	.word	0x40022000
 8004308:	40021000 	.word	0x40021000
 800430c:	08005f74 	.word	0x08005f74
 8004310:	20000070 	.word	0x20000070
 8004314:	20000074 	.word	0x20000074

08004318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b490      	push	{r4, r7}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004320:	1d3c      	adds	r4, r7, #4
 8004322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004328:	f240 2301 	movw	r3, #513	; 0x201
 800432c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004342:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b04      	cmp	r3, #4
 8004350:	d002      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0x40>
 8004352:	2b08      	cmp	r3, #8
 8004354:	d003      	beq.n	800435e <HAL_RCC_GetSysClockFreq+0x46>
 8004356:	e02b      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004358:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800435a:	623b      	str	r3, [r7, #32]
      break;
 800435c:	e02b      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	0c9b      	lsrs	r3, r3, #18
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	3328      	adds	r3, #40	; 0x28
 8004368:	443b      	add	r3, r7
 800436a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800436e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d012      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	0c5b      	lsrs	r3, r3, #17
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	3328      	adds	r3, #40	; 0x28
 8004386:	443b      	add	r3, r7
 8004388:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800438c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004392:	fb03 f202 	mul.w	r2, r3, r2
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
 800439e:	e004      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	623b      	str	r3, [r7, #32]
      break;
 80043ae:	e002      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80043b2:	623b      	str	r3, [r7, #32]
      break;
 80043b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b6:	6a3b      	ldr	r3, [r7, #32]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc90      	pop	{r4, r7}
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	08005f64 	.word	0x08005f64
 80043c8:	40021000 	.word	0x40021000
 80043cc:	007a1200 	.word	0x007a1200
 80043d0:	003d0900 	.word	0x003d0900

080043d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d8:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	20000070 	.word	0x20000070

080043e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043ec:	f7ff fff2 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	4903      	ldr	r1, [pc, #12]	; (800440c <HAL_RCC_GetPCLK1Freq+0x24>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	08005f84 	.word	0x08005f84

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004414:	f7ff ffde 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	0adb      	lsrs	r3, r3, #11
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	; (8004434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000
 8004434:	08005f84 	.word	0x08005f84

08004438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <RCC_Delay+0x34>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <RCC_Delay+0x38>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0a5b      	lsrs	r3, r3, #9
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004454:	bf00      	nop
  }
  while (Delay --);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	60fa      	str	r2, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <RCC_Delay+0x1c>
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	20000070 	.word	0x20000070
 8004470:	10624dd3 	.word	0x10624dd3

08004474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e041      	b.n	800450a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd fe00 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f000 fc56 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d001      	beq.n	800452c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e03a      	b.n	80045a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_TIM_Base_Start_IT+0x98>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x58>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004556:	d009      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x58>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x58>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d111      	bne.n	8004590 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d010      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	e007      	b.n	80045a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800

080045b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a1a      	ldr	r2, [r3, #32]
 80045d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10f      	bne.n	8004600 <HAL_TIM_Base_Stop_IT+0x48>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	f240 4344 	movw	r3, #1092	; 0x444
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_Base_Stop_IT+0x48>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e041      	b.n	80046aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f839 	bl	80046b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 fb86 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d109      	bne.n	80046e8 <HAL_TIM_PWM_Start+0x24>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e022      	b.n	800472e <HAL_TIM_PWM_Start+0x6a>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d109      	bne.n	8004702 <HAL_TIM_PWM_Start+0x3e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	bf14      	ite	ne
 80046fa:	2301      	movne	r3, #1
 80046fc:	2300      	moveq	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	e015      	b.n	800472e <HAL_TIM_PWM_Start+0x6a>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d109      	bne.n	800471c <HAL_TIM_PWM_Start+0x58>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e008      	b.n	800472e <HAL_TIM_PWM_Start+0x6a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e05e      	b.n	80047f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start+0x82>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	e013      	b.n	800476e <HAL_TIM_PWM_Start+0xaa>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0x92>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004754:	e00b      	b.n	800476e <HAL_TIM_PWM_Start+0xaa>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b08      	cmp	r3, #8
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0xa2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004764:	e003      	b.n	800476e <HAL_TIM_PWM_Start+0xaa>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2201      	movs	r2, #1
 8004774:	6839      	ldr	r1, [r7, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fd74 	bl	8005264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <HAL_TIM_PWM_Start+0x138>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d107      	bne.n	8004796 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_TIM_PWM_Start+0x138>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIM_PWM_Start+0xfa>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d009      	beq.n	80047be <HAL_TIM_PWM_Start+0xfa>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a14      	ldr	r2, [pc, #80]	; (8004800 <HAL_TIM_PWM_Start+0x13c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIM_PWM_Start+0xfa>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a12      	ldr	r2, [pc, #72]	; (8004804 <HAL_TIM_PWM_Start+0x140>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d111      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b06      	cmp	r3, #6
 80047ce:	d010      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	e007      	b.n	80047f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800

08004808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d122      	bne.n	8004864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b02      	cmp	r3, #2
 800482a:	d11b      	bne.n	8004864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0202 	mvn.w	r2, #2
 8004834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa6f 	bl	8004d2e <HAL_TIM_IC_CaptureCallback>
 8004850:	e005      	b.n	800485e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa62 	bl	8004d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fa71 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d122      	bne.n	80048b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b04      	cmp	r3, #4
 800487e:	d11b      	bne.n	80048b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0204 	mvn.w	r2, #4
 8004888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa45 	bl	8004d2e <HAL_TIM_IC_CaptureCallback>
 80048a4:	e005      	b.n	80048b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa38 	bl	8004d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fa47 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d122      	bne.n	800490c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d11b      	bne.n	800490c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0208 	mvn.w	r2, #8
 80048dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2204      	movs	r2, #4
 80048e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa1b 	bl	8004d2e <HAL_TIM_IC_CaptureCallback>
 80048f8:	e005      	b.n	8004906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa0e 	bl	8004d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fa1d 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b10      	cmp	r3, #16
 8004918:	d122      	bne.n	8004960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b10      	cmp	r3, #16
 8004926:	d11b      	bne.n	8004960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0210 	mvn.w	r2, #16
 8004930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2208      	movs	r2, #8
 8004936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9f1 	bl	8004d2e <HAL_TIM_IC_CaptureCallback>
 800494c:	e005      	b.n	800495a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f9e4 	bl	8004d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f9f3 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0201 	mvn.w	r2, #1
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc faa2 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d10e      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b80      	cmp	r3, #128	; 0x80
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fd32 	bl	800541c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f9b7 	bl	8004d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d10e      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d107      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0220 	mvn.w	r2, #32
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fcfd 	bl	800540a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e0ac      	b.n	8004b8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b0c      	cmp	r3, #12
 8004a3e:	f200 809f 	bhi.w	8004b80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a7d 	.word	0x08004a7d
 8004a4c:	08004b81 	.word	0x08004b81
 8004a50:	08004b81 	.word	0x08004b81
 8004a54:	08004b81 	.word	0x08004b81
 8004a58:	08004abd 	.word	0x08004abd
 8004a5c:	08004b81 	.word	0x08004b81
 8004a60:	08004b81 	.word	0x08004b81
 8004a64:	08004b81 	.word	0x08004b81
 8004a68:	08004aff 	.word	0x08004aff
 8004a6c:	08004b81 	.word	0x08004b81
 8004a70:	08004b81 	.word	0x08004b81
 8004a74:	08004b81 	.word	0x08004b81
 8004a78:	08004b3f 	.word	0x08004b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f9d0 	bl	8004e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0208 	orr.w	r2, r2, #8
 8004a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0204 	bic.w	r2, r2, #4
 8004aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6999      	ldr	r1, [r3, #24]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	619a      	str	r2, [r3, #24]
      break;
 8004aba:	e062      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fa16 	bl	8004ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6999      	ldr	r1, [r3, #24]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	619a      	str	r2, [r3, #24]
      break;
 8004afc:	e041      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fa5f 	bl	8004fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0208 	orr.w	r2, r2, #8
 8004b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0204 	bic.w	r2, r2, #4
 8004b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69d9      	ldr	r1, [r3, #28]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	61da      	str	r2, [r3, #28]
      break;
 8004b3c:	e021      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 faa9 	bl	800509c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69d9      	ldr	r1, [r3, #28]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	021a      	lsls	r2, r3, #8
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	61da      	str	r2, [r3, #28]
      break;
 8004b7e:	e000      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_TIM_ConfigClockSource+0x18>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e0b3      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x180>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be4:	d03e      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0xd0>
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bea:	f200 8087 	bhi.w	8004cfc <HAL_TIM_ConfigClockSource+0x168>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf2:	f000 8085 	beq.w	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d87f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x168>
 8004bfc:	2b70      	cmp	r3, #112	; 0x70
 8004bfe:	d01a      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xa2>
 8004c00:	2b70      	cmp	r3, #112	; 0x70
 8004c02:	d87b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x168>
 8004c04:	2b60      	cmp	r3, #96	; 0x60
 8004c06:	d050      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x116>
 8004c08:	2b60      	cmp	r3, #96	; 0x60
 8004c0a:	d877      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x168>
 8004c0c:	2b50      	cmp	r3, #80	; 0x50
 8004c0e:	d03c      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0xf6>
 8004c10:	2b50      	cmp	r3, #80	; 0x50
 8004c12:	d873      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x168>
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d058      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x136>
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d86f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x168>
 8004c1c:	2b30      	cmp	r3, #48	; 0x30
 8004c1e:	d064      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x156>
 8004c20:	2b30      	cmp	r3, #48	; 0x30
 8004c22:	d86b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x168>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d060      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x156>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d867      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x168>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05c      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x156>
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d05a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c34:	e062      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6899      	ldr	r1, [r3, #8]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f000 faee 	bl	8005226 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	609a      	str	r2, [r3, #8]
      break;
 8004c62:	e04e      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f000 fad7 	bl	8005226 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c86:	609a      	str	r2, [r3, #8]
      break;
 8004c88:	e03b      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 fa4e 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2150      	movs	r1, #80	; 0x50
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 faa5 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e02b      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 fa6c 	bl	8005194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2160      	movs	r1, #96	; 0x60
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fa95 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e01b      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 fa2e 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2140      	movs	r1, #64	; 0x40
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fa85 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e00b      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f000 fa7c 	bl	80051f2 <TIM_ITRx_SetConfig>
        break;
 8004cfa:	e002      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cfc:	bf00      	nop
 8004cfe:	e000      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr

08004d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <TIM_Base_SetConfig+0xb8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0x30>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0x30>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a26      	ldr	r2, [pc, #152]	; (8004e20 <TIM_Base_SetConfig+0xbc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0x30>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a25      	ldr	r2, [pc, #148]	; (8004e24 <TIM_Base_SetConfig+0xc0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d108      	bne.n	8004da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <TIM_Base_SetConfig+0xb8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <TIM_Base_SetConfig+0x62>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db4:	d007      	beq.n	8004dc6 <TIM_Base_SetConfig+0x62>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <TIM_Base_SetConfig+0xbc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <TIM_Base_SetConfig+0x62>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <TIM_Base_SetConfig+0xc0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <TIM_Base_SetConfig+0xb8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800

08004e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 0201 	bic.w	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0302 	bic.w	r3, r3, #2
 8004e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <TIM_OC1_SetConfig+0xc8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d10c      	bne.n	8004e9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0308 	bic.w	r3, r3, #8
 8004e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 0304 	bic.w	r3, r3, #4
 8004e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <TIM_OC1_SetConfig+0xc8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d111      	bne.n	8004eca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40012c00 	.word	0x40012c00

08004ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0210 	bic.w	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0320 	bic.w	r3, r3, #32
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <TIM_OC2_SetConfig+0xd0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10d      	bne.n	8004f70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <TIM_OC2_SetConfig+0xd0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d113      	bne.n	8004fa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	40012c00 	.word	0x40012c00

08004fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <TIM_OC3_SetConfig+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10d      	bne.n	8005042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800502c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <TIM_OC3_SetConfig+0xd0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d113      	bne.n	8005072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	621a      	str	r2, [r3, #32]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00

0800509c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a0f      	ldr	r2, [pc, #60]	; (8005134 <TIM_OC4_SetConfig+0x98>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr
 8005134:	40012c00 	.word	0x40012c00

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 030a 	bic.w	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f023 0210 	bic.w	r2, r3, #16
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	031b      	lsls	r3, r3, #12
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005226:	b480      	push	{r7}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	021a      	lsls	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	431a      	orrs	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4313      	orrs	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	2201      	movs	r2, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1a      	ldr	r2, [r3, #32]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e046      	b.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a16      	ldr	r2, [pc, #88]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005310:	d009      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a10      	ldr	r2, [pc, #64]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10c      	bne.n	8005340 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4313      	orrs	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800

08005368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e03d      	b.n	8005400 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e03f      	b.n	80054c0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fc ff5b 	bl	8002310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2224      	movs	r2, #36	; 0x24
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005470:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fc84 	bl	8005d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005486:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005496:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d17c      	bne.n	80055e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_UART_Transmit+0x2c>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e075      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_UART_Transmit+0x3e>
 8005502:	2302      	movs	r3, #2
 8005504:	e06e      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2221      	movs	r2, #33	; 0x21
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800551c:	f7fc ffd8 	bl	80024d0 <HAL_GetTick>
 8005520:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	d108      	bne.n	800554a <HAL_UART_Transmit+0x82>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	e003      	b.n	8005552 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800555a:	e02a      	b.n	80055b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	2180      	movs	r1, #128	; 0x80
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fa37 	bl	80059da <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e036      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800558a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	3302      	adds	r3, #2
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e007      	b.n	80055a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1cf      	bne.n	800555c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2200      	movs	r2, #0
 80055c4:	2140      	movs	r1, #64	; 0x40
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fa07 	bl	80059da <UART_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e006      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055e2:	2302      	movs	r3, #2
  }
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	d11d      	bne.n	8005642 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_UART_Receive_IT+0x26>
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e016      	b.n	8005644 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_UART_Receive_IT+0x38>
 8005620:	2302      	movs	r3, #2
 8005622:	e00f      	b.n	8005644 <HAL_UART_Receive_IT+0x58>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	461a      	mov	r2, r3
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fa18 	bl	8005a6e <UART_Start_Receive_IT>
 800563e:	4603      	mov	r3, r0
 8005640:	e000      	b.n	8005644 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800566c:	2300      	movs	r3, #0
 800566e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10d      	bne.n	800569e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_UART_IRQHandler+0x52>
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fac9 	bl	8005c2e <UART_Receive_IT>
      return;
 800569c:	e17b      	b.n	8005996 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80b1 	beq.w	8005808 <HAL_UART_IRQHandler+0x1bc>
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d105      	bne.n	80056bc <HAL_UART_IRQHandler+0x70>
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80a6 	beq.w	8005808 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_UART_IRQHandler+0x90>
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	f043 0201 	orr.w	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_UART_IRQHandler+0xb0>
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	f043 0202 	orr.w	r2, r3, #2
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_UART_IRQHandler+0xd0>
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f043 0204 	orr.w	r2, r3, #4
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00f      	beq.n	8005746 <HAL_UART_IRQHandler+0xfa>
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <HAL_UART_IRQHandler+0xee>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f043 0208 	orr.w	r2, r3, #8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 811e 	beq.w	800598c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <HAL_UART_IRQHandler+0x11e>
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fa62 	bl	8005c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <HAL_UART_IRQHandler+0x146>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d031      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9a4 	bl	8005ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d023      	beq.n	80057ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d013      	beq.n	80057e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	4a76      	ldr	r2, [pc, #472]	; (800599c <HAL_UART_IRQHandler+0x350>)
 80057c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fc fff6 	bl	80027bc <HAL_DMA_Abort_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e00e      	b.n	8005804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8e3 	bl	80059b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e00a      	b.n	8005804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8df 	bl	80059b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f4:	e006      	b.n	8005804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8db 	bl	80059b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005802:	e0c3      	b.n	800598c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	bf00      	nop
    return;
 8005806:	e0c1      	b.n	800598c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	2b01      	cmp	r3, #1
 800580e:	f040 80a1 	bne.w	8005954 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 809b 	beq.w	8005954 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8095 	beq.w	8005954 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d04e      	beq.n	80058ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005858:	8a3b      	ldrh	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8098 	beq.w	8005990 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005864:	8a3a      	ldrh	r2, [r7, #16]
 8005866:	429a      	cmp	r2, r3
 8005868:	f080 8092 	bcs.w	8005990 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8a3a      	ldrh	r2, [r7, #16]
 8005870:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b20      	cmp	r3, #32
 800587a:	d02b      	beq.n	80058d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800588a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0201 	bic.w	r2, r2, #1
 800589a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0210 	bic.w	r2, r2, #16
 80058c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fc ff39 	bl	8002746 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f86d 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058ea:	e051      	b.n	8005990 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d047      	beq.n	8005994 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005904:	8a7b      	ldrh	r3, [r7, #18]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d044      	beq.n	8005994 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005918:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0210 	bic.w	r2, r2, #16
 8005946:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005948:	8a7b      	ldrh	r3, [r7, #18]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f839 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005952:	e01f      	b.n	8005994 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <HAL_UART_IRQHandler+0x324>
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8f9 	bl	8005b60 <UART_Transmit_IT>
    return;
 800596e:	e012      	b.n	8005996 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <HAL_UART_IRQHandler+0x34a>
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f93a 	bl	8005bfe <UART_EndTransmit_IT>
    return;
 800598a:	e004      	b.n	8005996 <HAL_UART_IRQHandler+0x34a>
    return;
 800598c:	bf00      	nop
 800598e:	e002      	b.n	8005996 <HAL_UART_IRQHandler+0x34a>
      return;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_UART_IRQHandler+0x34a>
      return;
 8005994:	bf00      	nop
  }
}
 8005996:	3728      	adds	r7, #40	; 0x28
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	08005b39 	.word	0x08005b39

080059a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr

080059da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4613      	mov	r3, r2
 80059e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ea:	e02c      	b.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d028      	beq.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x30>
 80059fa:	f7fc fd69 	bl	80024d0 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d21d      	bcs.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e00f      	b.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	bf0c      	ite	eq
 8005a56:	2301      	moveq	r3, #1
 8005a58:	2300      	movne	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d0c3      	beq.n	80059ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	88fa      	ldrh	r2, [r7, #6]
 8005a8c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2222      	movs	r2, #34	; 0x22
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0220 	orr.w	r2, r2, #32
 8005ad2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005af6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d107      	bne.n	8005b20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0210 	bic.w	r2, r2, #16
 8005b1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff ff2d 	bl	80059b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b21      	cmp	r3, #33	; 0x21
 8005b72:	d13e      	bne.n	8005bf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7c:	d114      	bne.n	8005ba8 <UART_Transmit_IT+0x48>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d110      	bne.n	8005ba8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	1c9a      	adds	r2, r3, #2
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	621a      	str	r2, [r3, #32]
 8005ba6:	e008      	b.n	8005bba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	1c59      	adds	r1, r3, #1
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6211      	str	r1, [r2, #32]
 8005bb2:	781a      	ldrb	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10f      	bne.n	8005bee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e000      	b.n	8005bf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bf2:	2302      	movs	r3, #2
  }
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff febe 	bl	80059a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b086      	sub	sp, #24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b22      	cmp	r3, #34	; 0x22
 8005c40:	f040 8099 	bne.w	8005d76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	d117      	bne.n	8005c7e <UART_Receive_IT+0x50>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d113      	bne.n	8005c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	1c9a      	adds	r2, r3, #2
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c7c:	e026      	b.n	8005ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d007      	beq.n	8005ca2 <UART_Receive_IT+0x74>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <UART_Receive_IT+0x82>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e008      	b.n	8005cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d148      	bne.n	8005d72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0220 	bic.w	r2, r2, #32
 8005cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d123      	bne.n	8005d68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0210 	bic.w	r2, r2, #16
 8005d34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d10a      	bne.n	8005d5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fe2f 	bl	80059c4 <HAL_UARTEx_RxEventCallback>
 8005d66:	e002      	b.n	8005d6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fb f961 	bl	8001030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e002      	b.n	8005d78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e000      	b.n	8005d78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005d76:	2302      	movs	r3, #2
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005dba:	f023 030c 	bic.w	r3, r3, #12
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2c      	ldr	r2, [pc, #176]	; (8005e94 <UART_SetConfig+0x114>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d103      	bne.n	8005df0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005de8:	f7fe fb12 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	e002      	b.n	8005df6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005df0:	f7fe fafa 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 8005df4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009a      	lsls	r2, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <UART_SetConfig+0x118>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	0119      	lsls	r1, r3, #4
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009a      	lsls	r2, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e2c:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <UART_SetConfig+0x118>)
 8005e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2064      	movs	r0, #100	; 0x64
 8005e36:	fb00 f303 	mul.w	r3, r0, r3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	3332      	adds	r3, #50	; 0x32
 8005e40:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <UART_SetConfig+0x118>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e4c:	4419      	add	r1, r3
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009a      	lsls	r2, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <UART_SetConfig+0x118>)
 8005e66:	fba3 0302 	umull	r0, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2064      	movs	r0, #100	; 0x64
 8005e6e:	fb00 f303 	mul.w	r3, r0, r3
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	3332      	adds	r3, #50	; 0x32
 8005e78:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <UART_SetConfig+0x118>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	440a      	add	r2, r1
 8005e8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40013800 	.word	0x40013800
 8005e98:	51eb851f 	.word	0x51eb851f

08005e9c <__libc_init_array>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	4d0c      	ldr	r5, [pc, #48]	; (8005ed4 <__libc_init_array+0x38>)
 8005ea2:	4c0d      	ldr	r4, [pc, #52]	; (8005ed8 <__libc_init_array+0x3c>)
 8005ea4:	1b64      	subs	r4, r4, r5
 8005ea6:	10a4      	asrs	r4, r4, #2
 8005ea8:	42a6      	cmp	r6, r4
 8005eaa:	d109      	bne.n	8005ec0 <__libc_init_array+0x24>
 8005eac:	f000 f822 	bl	8005ef4 <_init>
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	4d0a      	ldr	r5, [pc, #40]	; (8005edc <__libc_init_array+0x40>)
 8005eb4:	4c0a      	ldr	r4, [pc, #40]	; (8005ee0 <__libc_init_array+0x44>)
 8005eb6:	1b64      	subs	r4, r4, r5
 8005eb8:	10a4      	asrs	r4, r4, #2
 8005eba:	42a6      	cmp	r6, r4
 8005ebc:	d105      	bne.n	8005eca <__libc_init_array+0x2e>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec4:	4798      	blx	r3
 8005ec6:	3601      	adds	r6, #1
 8005ec8:	e7ee      	b.n	8005ea8 <__libc_init_array+0xc>
 8005eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ece:	4798      	blx	r3
 8005ed0:	3601      	adds	r6, #1
 8005ed2:	e7f2      	b.n	8005eba <__libc_init_array+0x1e>
 8005ed4:	08005f8c 	.word	0x08005f8c
 8005ed8:	08005f8c 	.word	0x08005f8c
 8005edc:	08005f8c 	.word	0x08005f8c
 8005ee0:	08005f90 	.word	0x08005f90

08005ee4 <memset>:
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	4402      	add	r2, r0
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d100      	bne.n	8005eee <memset+0xa>
 8005eec:	4770      	bx	lr
 8005eee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef2:	e7f9      	b.n	8005ee8 <memset+0x4>

08005ef4 <_init>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	bf00      	nop
 8005ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efa:	bc08      	pop	{r3}
 8005efc:	469e      	mov	lr, r3
 8005efe:	4770      	bx	lr

08005f00 <_fini>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr
